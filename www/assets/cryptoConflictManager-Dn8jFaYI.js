class c{static instance;CLIENT_NAME="jianluochat";static getInstance(){return c.instance||(c.instance=new c),c.instance}detectConflicts(){const e={hasConflicts:!1,conflictingSources:[],recommendations:[],riskLevel:"low"},t=Object.keys(localStorage);return this.findConflictingKeys(t).length>0&&(e.hasConflicts=!0,e.conflictingSources.push("localStorage"),e.recommendations.push("检测到其他Matrix客户端的存储数据")),this.checkIndexedDBConflicts().then(n=>{n.length>0&&(e.hasConflicts=!0,e.conflictingSources.push("IndexedDB"),e.recommendations.push("检测到其他Matrix客户端的加密数据库"))}),this.detectElementClient()&&(e.hasConflicts=!0,e.conflictingSources.push("Element"),e.recommendations.push("检测到Element客户端，建议使用不同的设备ID"),e.riskLevel="high"),this.detectOtherWebClients()&&(e.hasConflicts=!0,e.conflictingSources.push("其他Web客户端"),e.recommendations.push("检测到其他Web Matrix客户端"),e.riskLevel=e.riskLevel==="high"?"high":"medium"),e}generateIsolatedConfig(e,t){const s=this.detectConflicts(),n=e.split(":")[0].substring(1),i=Date.now(),o=Math.random().toString(36).substring(2,6);return{deviceIdPrefix:`${this.CLIENT_NAME}_${n}_${i}_${o}`,storagePrefix:`${this.CLIENT_NAME}-crypto-${n}-${o}`,useIsolatedStorage:s.hasConflicts,forceMemoryStorage:s.riskLevel==="high"}}async cleanupConflicts(e){console.log("🧹 开始清理加密冲突..."),Object.keys(localStorage).filter(s=>s.startsWith(this.CLIENT_NAME)).forEach(s=>{(s.includes("crypto")||s.includes("device"))&&(localStorage.removeItem(s),console.log(`🗑️ 清理localStorage键: ${s}`))});try{const n=(await indexedDB.databases()).filter(i=>i.name?.includes(this.CLIENT_NAME)&&(i.name.includes("crypto")||i.name.includes("matrix")));for(const i of n)i.name&&(indexedDB.deleteDatabase(i.name),console.log(`🗑️ 清理IndexedDB数据库: ${i.name}`))}catch(s){console.warn("清理IndexedDB时出错:",s)}}createSafeDeviceId(e){return this.generateIsolatedConfig(e).deviceIdPrefix}createSafeCryptoConfig(e,t){const s=this.generateIsolatedConfig(e,t);return{useIndexedDB:!s.forceMemoryStorage,cryptoDatabasePrefix:s.storagePrefix,storagePassword:void 0,storageKey:void 0}}findConflictingKeys(e){const t=[/^mx_/,/^matrix_(?!jianluochat)/,/^riot_/,/^vector_/,/^crypto_/,/^olm_/];return e.filter(s=>t.some(n=>n.test(s))&&!s.includes(this.CLIENT_NAME))}async checkIndexedDBConflicts(){try{return(await indexedDB.databases()).filter(s=>{const n=s.name?.toLowerCase()||"";return(n.includes("matrix")||n.includes("crypto")||n.includes("olm"))&&!n.includes(this.CLIENT_NAME.toLowerCase())}).map(s=>s.name||"unknown")}catch(e){return console.warn("无法检查IndexedDB冲突:",e),[]}}detectElementClient(){return Object.keys(localStorage).filter(t=>t.startsWith("mx_")||t.includes("element")).length>0}detectOtherWebClients(){return Object.keys(localStorage).filter(t=>(t.includes("matrix")||t.includes("riot")||t.includes("vector"))&&!t.includes(this.CLIENT_NAME)).length>0}getConflictResolutionAdvice(e){const t=[];return e.conflictingSources.includes("Element")&&(t.push("建议在不同的浏览器配置文件中使用Element和简洛聊天"),t.push("或者在Element中退出登录后再使用简洛聊天")),e.riskLevel==="high"&&(t.push("检测到高风险冲突，将自动使用内存存储模式"),t.push("这可能会影响加密密钥的持久化")),e.hasConflicts&&(t.push("建议定期清理浏览器存储以避免冲突"),t.push("如果遇到加密问题，请尝试重置加密设置")),t}}const r=c.getInstance();export{c as CryptoConflictManager,r as cryptoConflictManager};
