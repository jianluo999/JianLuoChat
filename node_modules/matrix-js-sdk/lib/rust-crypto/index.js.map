{"version":3,"file":"index.js","names":["RustSdkCryptoJs","StoreHandle","RustCrypto","MigrationState","migrateFromLegacyCrypto","migrateLegacyLocalTrustIfNeeded","migrateRoomSettingsFromLegacyCrypto","initRustCrypto","_x","_initRustCrypto","apply","arguments","_asyncToGenerator","args","logger","debug","initAsync","storeHandle","storePrefix","storeKey","openWithKey","open","storePassphrase","legacyCryptoStore","_objectSpread","legacyStore","rustCrypto","initOlmMachine","http","userId","deviceId","secretStorage","cryptoCallbacks","enableEncryptedStateEvents","free","_x2","_x3","_x4","_x5","_x6","_x7","_x8","_x9","_x0","_initOlmMachine","olmMachine","OlmMachine","initFromStore","UserId","DeviceId","roomKeyRequestsEnabled","registerRoomKeyUpdatedCallback","sessions","onRoomKeysUpdated","registerRoomKeysWithheldCallback","withheld","onRoomKeysWithheld","registerUserIdentityUpdatedCallback","onUserIdentityUpdated","registerDevicesUpdatedCallback","userIds","onDevicesUpdated","checkSecrets","registerReceiveSecretCallback","name","_value","outgoingRequests","containsData","migrationState","getMigrationState","INITIAL_OWN_KEY_QUERY_DONE","initialKeyQueryDone","userHasCrossSigningKeys","e","error","setMigrationState"],"sources":["../../src/rust-crypto/index.ts"],"sourcesContent":["/*\nCopyright 2022 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport { StoreHandle } from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { RustCrypto } from \"./rust-crypto.ts\";\nimport { type IHttpOpts, type MatrixHttpApi } from \"../http-api/index.ts\";\nimport { type ServerSideSecretStorage } from \"../secret-storage.ts\";\nimport { type Logger } from \"../logger.ts\";\nimport { type CryptoStore, MigrationState } from \"../crypto/store/base.ts\";\nimport {\n    migrateFromLegacyCrypto,\n    migrateLegacyLocalTrustIfNeeded,\n    migrateRoomSettingsFromLegacyCrypto,\n} from \"./libolm_migration.ts\";\nimport { type CryptoCallbacks } from \"../crypto-api/index.ts\";\n\n/**\n * Create a new `RustCrypto` implementation\n *\n * @param args - Parameter object\n * @internal\n */\nexport async function initRustCrypto(args: {\n    /** A `Logger` instance that will be used for debug output. */\n    logger: Logger;\n\n    /**\n     * Low-level HTTP interface: used to make outgoing requests required by the rust SDK.\n     * We expect it to set the access token, etc.\n     */\n    http: MatrixHttpApi<IHttpOpts & { onlyData: true }>;\n\n    /** The local user's User ID. */\n    userId: string;\n\n    /** The local user's Device ID. */\n    deviceId: string;\n\n    /** Interface to server-side secret storage. */\n    secretStorage: ServerSideSecretStorage;\n\n    /** Crypto callbacks provided by the application. */\n    cryptoCallbacks: CryptoCallbacks;\n\n    /**\n     * The prefix to use on the indexeddbs created by rust-crypto.\n     * If `null`, a memory store will be used.\n     */\n    storePrefix: string | null;\n\n    /**\n     * A passphrase to use to encrypt the indexeddb created by rust-crypto.\n     *\n     * Ignored if `storePrefix` is null, or `storeKey` is set.  If neither this nor `storeKey` is set\n     * (and `storePrefix` is not null), the indexeddb will be unencrypted.\n     */\n    storePassphrase?: string;\n\n    /**\n     * A key to use to encrypt the indexeddb created by rust-crypto.\n     *\n     * Ignored if `storePrefix` is null. Otherwise, if it is set, it must be a 32-byte cryptographic key, which\n     * will be used to encrypt the indexeddb. See also `storePassphrase`.\n     */\n    storeKey?: Uint8Array;\n\n    /** If defined, we will check if any data needs migrating from this store to the rust store. */\n    legacyCryptoStore?: CryptoStore;\n\n    /** The pickle key for `legacyCryptoStore` */\n    legacyPickleKey?: string;\n\n    /**\n     * A callback which will receive progress updates on migration from `legacyCryptoStore`.\n     *\n     * Called with (-1, -1) to mark the end of migration.\n     */\n    legacyMigrationProgressListener?: (progress: number, total: number) => void;\n\n    /**\n     * Whether to enable support for encrypting state events.\n     */\n    enableEncryptedStateEvents?: boolean;\n}): Promise<RustCrypto> {\n    const { logger } = args;\n\n    // initialise the rust matrix-sdk-crypto-wasm, if it hasn't already been done\n    logger.debug(\"Initialising Rust crypto-sdk WASM artifact\");\n    await RustSdkCryptoJs.initAsync();\n\n    logger.debug(\"Opening Rust CryptoStore\");\n    let storeHandle;\n    if (args.storePrefix) {\n        if (args.storeKey) {\n            storeHandle = await StoreHandle.openWithKey(args.storePrefix, args.storeKey, logger);\n        } else {\n            storeHandle = await StoreHandle.open(args.storePrefix, args.storePassphrase, logger);\n        }\n    } else {\n        storeHandle = await StoreHandle.open(null, null, logger);\n    }\n\n    if (args.legacyCryptoStore) {\n        // We have a legacy crypto store, which we may need to migrate from.\n        await migrateFromLegacyCrypto({\n            legacyStore: args.legacyCryptoStore,\n            storeHandle,\n            ...args,\n        });\n    }\n\n    const rustCrypto = await initOlmMachine(\n        logger,\n        args.http,\n        args.userId,\n        args.deviceId,\n        args.secretStorage,\n        args.cryptoCallbacks,\n        storeHandle,\n        args.legacyCryptoStore,\n        args.enableEncryptedStateEvents,\n    );\n\n    storeHandle.free();\n\n    logger.debug(\"Completed rust crypto-sdk setup\");\n    return rustCrypto;\n}\n\nasync function initOlmMachine(\n    logger: Logger,\n    http: MatrixHttpApi<IHttpOpts & { onlyData: true }>,\n    userId: string,\n    deviceId: string,\n    secretStorage: ServerSideSecretStorage,\n    cryptoCallbacks: CryptoCallbacks,\n    storeHandle: StoreHandle,\n    legacyCryptoStore?: CryptoStore,\n    enableEncryptedStateEvents?: boolean,\n): Promise<RustCrypto> {\n    logger.debug(\"Init OlmMachine\");\n\n    const olmMachine = await RustSdkCryptoJs.OlmMachine.initFromStore(\n        new RustSdkCryptoJs.UserId(userId),\n        new RustSdkCryptoJs.DeviceId(deviceId),\n        storeHandle,\n        logger,\n    );\n\n    // A final migration step, now that we have an OlmMachine.\n    if (legacyCryptoStore) {\n        await migrateRoomSettingsFromLegacyCrypto({\n            logger,\n            legacyStore: legacyCryptoStore,\n            olmMachine,\n        });\n    }\n\n    // Disable room key requests, per https://github.com/vector-im/element-web/issues/26524.\n    olmMachine.roomKeyRequestsEnabled = false;\n\n    const rustCrypto = new RustCrypto(\n        logger,\n        olmMachine,\n        http,\n        userId,\n        deviceId,\n        secretStorage,\n        cryptoCallbacks,\n        enableEncryptedStateEvents,\n    );\n\n    await olmMachine.registerRoomKeyUpdatedCallback((sessions: RustSdkCryptoJs.RoomKeyInfo[]) =>\n        rustCrypto.onRoomKeysUpdated(sessions),\n    );\n    await olmMachine.registerRoomKeysWithheldCallback((withheld: RustSdkCryptoJs.RoomKeyWithheldInfo[]) =>\n        rustCrypto.onRoomKeysWithheld(withheld),\n    );\n    await olmMachine.registerUserIdentityUpdatedCallback((userId: RustSdkCryptoJs.UserId) =>\n        rustCrypto.onUserIdentityUpdated(userId),\n    );\n    await olmMachine.registerDevicesUpdatedCallback((userIds: string[]) => rustCrypto.onDevicesUpdated(userIds));\n\n    // Check if there are any key backup secrets pending processing. There may be multiple secrets to process if several devices have gossiped them.\n    // The `registerReceiveSecretCallback` function will only be triggered for new secrets. If the client is restarted before processing them, the secrets will need to be manually handled.\n    rustCrypto.checkSecrets(\"m.megolm_backup.v1\");\n\n    // Register a callback to be notified when a new secret is received, as for now only the key backup secret is supported (the cross signing secrets are handled automatically by the OlmMachine)\n    await olmMachine.registerReceiveSecretCallback((name: string, _value: string) =>\n        // Instead of directly checking the secret value, we poll the inbox to get all values for that secret type.\n        // Once we have all the values, we can safely clear the secret inbox.\n        rustCrypto.checkSecrets(name),\n    );\n\n    // Tell the OlmMachine to think about its outgoing requests before we hand control back to the application.\n    //\n    // This is primarily a fudge to get it to correctly populate the `users_for_key_query` list, so that future\n    // calls to getIdentity (etc) block until the key queries are performed.\n    //\n    // Note that we don't actually need to *make* any requests here; it is sufficient to tell the Rust side to think\n    // about them.\n    //\n    // XXX: find a less hacky way to do this.\n    await olmMachine.outgoingRequests();\n\n    if (legacyCryptoStore && (await legacyCryptoStore.containsData())) {\n        const migrationState = await legacyCryptoStore.getMigrationState();\n        if (migrationState < MigrationState.INITIAL_OWN_KEY_QUERY_DONE) {\n            logger.debug(`Performing initial key query after migration`);\n            // We need to do an initial keys query so that the rust stack can properly update trust of\n            // the user device and identity from the migrated private keys.\n            // If not done, there is a short period where the own device/identity trust will be undefined after migration.\n            let initialKeyQueryDone = false;\n            while (!initialKeyQueryDone) {\n                try {\n                    await rustCrypto.userHasCrossSigningKeys(userId);\n                    initialKeyQueryDone = true;\n                } catch (e) {\n                    // If the initial key query fails, we retry until it succeeds.\n                    logger.error(\"Failed to check for cross-signing keys after migration, retrying\", e);\n                }\n            }\n\n            // If the private master cross-signing key was not cached in the legacy store, the rust session\n            // will not be able to establish the trust of the user identity.\n            // That means that after migration the session could revert to unverified.\n            // In order to avoid asking the users to re-verify their sessions, we need to migrate the legacy local trust\n            // (if the legacy session was already verified) to the new session.\n            await migrateLegacyLocalTrustIfNeeded({ legacyCryptoStore, rustCrypto, logger });\n\n            await legacyCryptoStore.setMigrationState(MigrationState.INITIAL_OWN_KEY_QUERY_DONE);\n        }\n    }\n\n    return rustCrypto;\n}\n"],"mappings":"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","ignoreList":[]}