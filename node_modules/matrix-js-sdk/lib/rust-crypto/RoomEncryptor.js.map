{"version":3,"file":"RoomEncryptor.js","names":["RustSdkCryptoJs","CollectStrategy","EncryptionAlgorithm","EncryptionSettings","HistoryVisibility","RustHistoryVisibility","RoomId","UserId","EventType","LogSpan","logDuration","KnownMembership","DeviceIsolationModeKind","RoomEncryptor","constructor","prefixedLogger","olmMachine","keyClaimManager","outgoingRequestManager","room","encryptionSettings","_defineProperty","Promise","resolve","members","getJoinedMembers","updateTrackedUsers","map","u","userId","catch","e","error","onCryptoEvent","config","JSON","stringify","Error","onRoomMembership","member","membership","Join","Invite","shouldEncryptForInvitedMembers","prepareForEncryption","globalBlacklistUnverifiedDevices","deviceIsolationMode","_this","_asyncToGenerator","encryptEvent","event","_event$getTxnId","_this2","logger","getTxnId","prom","currentEncryptionPromise","then","ensureEncryptionSession","encryptEventInner","_this3","algorithm","concat","roomId","debug","getEncryptionTargetMembers","lazyLoadedMembersResolved","doProcessOutgoingRequests","userList","ensureSessionsForUsers","rustEncryptionSettings","historyVisibility","toRustHistoryVisibility","getHistoryVisibility","MegolmV1AesSha2","rotation_period_ms","rotationPeriod","BigInt","rotation_period_msgs","rotationPeriodMessages","kind","AllDevicesIsolationMode","_this3$room$getBlackl","onlyAllowTrustedDevices","getBlacklistUnverifiedDevices","sharingStrategy","deviceBasedStrategy","errorOnVerifiedUserProblems","OnlySignedDevicesIsolationMode","identityBasedStrategy","shareMessages","shareRoomKey","m","outgoingRequestProcessor","makeOutgoingRequest","forceDiscardSession","_this4","r","invalidateGroupSession","info","_this5","type","getType","content","getContent","encryptedContent","isState","encryptStateEvent","getStateKey","encryptRoomEvent","makeEncrypted","RoomMessageEncrypted","parse","identityKeys","curve25519","toBase64","ed25519","visibility","Invited","Joined","Shared","WorldReadable"],"sources":["../../src/rust-crypto/RoomEncryptor.ts"],"sourcesContent":["/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport * as RustSdkCryptoJs from \"@matrix-org/matrix-sdk-crypto-wasm\";\nimport {\n    CollectStrategy,\n    EncryptionAlgorithm,\n    EncryptionSettings,\n    HistoryVisibility as RustHistoryVisibility,\n    type OlmMachine,\n    RoomId,\n    type ToDeviceRequest,\n    UserId,\n} from \"@matrix-org/matrix-sdk-crypto-wasm\";\n\nimport { EventType } from \"../@types/event.ts\";\nimport { type MatrixEvent, type IContent } from \"../models/event.ts\";\nimport { type Room } from \"../models/room.ts\";\nimport { type Logger, LogSpan } from \"../logger.ts\";\nimport { type KeyClaimManager } from \"./KeyClaimManager.ts\";\nimport { type RoomMember } from \"../models/room-member.ts\";\nimport { HistoryVisibility } from \"../@types/partials.ts\";\nimport { type OutgoingRequestsManager } from \"./OutgoingRequestsManager.ts\";\nimport { logDuration } from \"../utils.ts\";\nimport { KnownMembership } from \"../@types/membership.ts\";\nimport { type DeviceIsolationMode, DeviceIsolationModeKind } from \"../crypto-api/index.ts\";\n\n/**\n * RoomEncryptor: responsible for encrypting messages to a given room\n *\n * @internal\n */\nexport class RoomEncryptor {\n    /** whether the room members have been loaded and tracked for the first time */\n    private lazyLoadedMembersResolved = false;\n\n    /**\n     * Ensures that there is only one encryption operation at a time for that room.\n     *\n     * An encryption operation is either a {@link prepareForEncryption} or an {@link encryptEvent} call.\n     */\n    private currentEncryptionPromise: Promise<void> = Promise.resolve();\n\n    /**\n     * @param prefixedLogger - A logger to use for log messages.\n     * @param olmMachine - The rust-sdk's OlmMachine\n     * @param keyClaimManager - Our KeyClaimManager, which manages the queue of one-time-key claim requests\n     * @param outgoingRequestManager - The OutgoingRequestManager, which manages the queue of outgoing requests.\n     * @param room - The room we want to encrypt for\n     * @param encryptionSettings - body of the m.room.encryption event currently in force in this room\n     */\n    public constructor(\n        private readonly prefixedLogger: Logger,\n        private readonly olmMachine: OlmMachine,\n        private readonly keyClaimManager: KeyClaimManager,\n        private readonly outgoingRequestManager: OutgoingRequestsManager,\n        private readonly room: Room,\n        private encryptionSettings: IContent,\n    ) {\n        // start tracking devices for any users already known to be in this room.\n        // Do not load members here, would defeat lazy loading.\n        const members = room.getJoinedMembers();\n\n        // At this point just mark the known members as tracked, it might not be the full list of members\n        // because of lazy loading. This is fine, because we will get a member list update when sending a message for\n        // the first time, see `RoomEncryptor#ensureEncryptionSession`\n        this.olmMachine\n            .updateTrackedUsers(members.map((u) => new RustSdkCryptoJs.UserId(u.userId)))\n            .catch((e) => this.prefixedLogger.error(\"Error initializing tracked users\", e));\n    }\n\n    /**\n     * Handle a new `m.room.encryption` event in this room\n     *\n     * @param config - The content of the encryption event\n     */\n    public onCryptoEvent(config: IContent): void {\n        if (JSON.stringify(this.encryptionSettings) != JSON.stringify(config)) {\n            // This should currently be unreachable, since the Rust SDK will reject any attempts to change config.\n            throw new Error(\"Cannot reconfigure an active RoomEncryptor\");\n        }\n    }\n\n    /**\n     * Handle a new `m.room.member` event in this room\n     *\n     * @param member - new membership state\n     */\n    public onRoomMembership(member: RoomMember): void {\n        if (\n            member.membership == KnownMembership.Join ||\n            (member.membership == KnownMembership.Invite && this.room.shouldEncryptForInvitedMembers())\n        ) {\n            // make sure we are tracking the deviceList for this user\n            this.olmMachine.updateTrackedUsers([new UserId(member.userId)]).catch((e) => {\n                this.prefixedLogger.error(\"Unable to update tracked users\", e);\n            });\n        }\n\n        // TODO: handle leaves (including our own)\n    }\n\n    /**\n     * Prepare to encrypt events in this room.\n     *\n     * This ensures that we have a megolm session ready to use and that we have shared its key with all the devices\n     * in the room.\n     * @param globalBlacklistUnverifiedDevices - When `true`, and `deviceIsolationMode` is `AllDevicesIsolationMode`,\n     * will not send encrypted messages to unverified devices.\n     * Ignored when `deviceIsolationMode` is `OnlySignedDevicesIsolationMode`.\n     * @param deviceIsolationMode - The device isolation mode. See {@link DeviceIsolationMode}.\n     */\n    public async prepareForEncryption(\n        globalBlacklistUnverifiedDevices: boolean,\n        deviceIsolationMode: DeviceIsolationMode,\n    ): Promise<void> {\n        // We consider a prepareForEncryption as an encryption promise as it will potentially share keys\n        // even if it doesn't send an event.\n        // Usually this is called when the user starts typing, so we want to make sure we have keys ready when the\n        // message is finally sent.\n        // If `encryptEvent` is invoked before `prepareForEncryption` has completed, the `encryptEvent` call will wait for\n        // `prepareForEncryption` to complete before executing.\n        // The part where `encryptEvent` shares the room key will then usually be a no-op as it was already performed by `prepareForEncryption`.\n        await this.encryptEvent(null, globalBlacklistUnverifiedDevices, deviceIsolationMode);\n    }\n\n    /**\n     * Encrypt an event for this room, or prepare for encryption.\n     *\n     * This will ensure that we have a megolm session for this room, share it with the devices in the room, and\n     * then, if an event is provided, encrypt it using the session.\n     *\n     * @param event - Event to be encrypted, or null if only preparing for encryption (in which case we will pre-share the room key).\n     * @param globalBlacklistUnverifiedDevices - When `true`, and `deviceIsolationMode` is `AllDevicesIsolationMode`,\n     * will not send encrypted messages to unverified devices.\n     * Ignored when `deviceIsolationMode` is `OnlySignedDevicesIsolationMode`.\n     * @param deviceIsolationMode - The device isolation mode. See {@link DeviceIsolationMode}.\n     */\n    public encryptEvent(\n        event: MatrixEvent | null,\n        globalBlacklistUnverifiedDevices: boolean,\n        deviceIsolationMode: DeviceIsolationMode,\n    ): Promise<void> {\n        const logger = new LogSpan(this.prefixedLogger, event ? (event.getTxnId() ?? \"\") : \"prepareForEncryption\");\n        // Ensure order of encryption to avoid message ordering issues, as the scheduler only ensures\n        // events order after they have been encrypted.\n        const prom = this.currentEncryptionPromise\n            .catch(() => {\n                // Any errors in the previous call will have been reported already, so there is nothing to do here.\n                // we just throw away the error and start anew.\n            })\n            .then(async () => {\n                await logDuration(logger, \"ensureEncryptionSession\", async () => {\n                    await this.ensureEncryptionSession(logger, globalBlacklistUnverifiedDevices, deviceIsolationMode);\n                });\n                if (event) {\n                    await logDuration(logger, \"encryptEventInner\", async () => {\n                        await this.encryptEventInner(logger, event);\n                    });\n                }\n            });\n\n        this.currentEncryptionPromise = prom;\n        return prom;\n    }\n\n    /**\n     * Prepare to encrypt events in this room.\n     *\n     * This ensures that we have a megolm session ready to use and that we have shared its key with all the devices\n     * in the room.\n     *\n     * @param logger - a place to write diagnostics to\n     * @param globalBlacklistUnverifiedDevices - When `true`, and `deviceIsolationMode` is `AllDevicesIsolationMode`,\n     * will not send encrypted messages to unverified devices.\n     * Ignored when `deviceIsolationMode` is `OnlySignedDevicesIsolationMode`.\n     * @param deviceIsolationMode - The device isolation mode. See {@link DeviceIsolationMode}.\n     */\n    private async ensureEncryptionSession(\n        logger: LogSpan,\n        globalBlacklistUnverifiedDevices: boolean,\n        deviceIsolationMode: DeviceIsolationMode,\n    ): Promise<void> {\n        if (this.encryptionSettings.algorithm !== \"m.megolm.v1.aes-sha2\") {\n            throw new Error(\n                `Cannot encrypt in ${this.room.roomId} for unsupported algorithm '${this.encryptionSettings.algorithm}'`,\n            );\n        }\n        logger.debug(\"Starting encryption\");\n\n        const members = await this.room.getEncryptionTargetMembers();\n\n        // If this is the first time we are sending a message to the room, we may not yet have seen all the members\n        // (so the Crypto SDK might not have a device list for them). So, if this is the first time we are encrypting\n        // for this room, give the SDK the full list of members, to be on the safe side.\n        //\n        // This could end up being racy (if two calls to ensureEncryptionSession happen at the same time), but that's\n        // not a particular problem, since `OlmMachine.updateTrackedUsers` just adds any users that weren't already tracked.\n        if (!this.lazyLoadedMembersResolved) {\n            await logDuration(logger, \"loadMembersIfNeeded: updateTrackedUsers\", async () => {\n                await this.olmMachine.updateTrackedUsers(members.map((u) => new RustSdkCryptoJs.UserId(u.userId)));\n            });\n            logger.debug(`Updated tracked users`);\n            this.lazyLoadedMembersResolved = true;\n\n            // Query keys in case we don't have them for newly tracked members.\n            // It's important after loading members for the first time, as likely most of them won't be\n            // known yet and will be unable to decrypt messages despite being in the room for long.\n            // This must be done before ensuring sessions. If not the devices of these users are not\n            // known yet and will not get the room key.\n            // We don't have API to only get the keys queries related to this member list, so we just\n            // process the pending requests from the olmMachine. (usually these are processed\n            // at the end of the sync, but we can't wait for that).\n            // XXX future improvement process only KeysQueryRequests for the users that have never been queried.\n            logger.debug(`Processing outgoing requests`);\n\n            await logDuration(logger, \"doProcessOutgoingRequests\", async () => {\n                await this.outgoingRequestManager.doProcessOutgoingRequests();\n            });\n        } else {\n            // If members are already loaded it's less critical to await on key queries.\n            // We might still want to trigger a processOutgoingRequests here.\n            // The call to `ensureSessionsForUsers` below will wait a bit on in-flight key queries we are\n            // interested in. If a sync handling happens in the meantime, and some new members are added to the room\n            // or have new devices it would give us a chance to query them before sending.\n            // It's less critical due to the racy nature of this process.\n            logger.debug(`Processing outgoing requests in background`);\n            this.outgoingRequestManager.doProcessOutgoingRequests();\n        }\n\n        logger.debug(\n            `Encrypting for users (shouldEncryptForInvitedMembers: ${this.room.shouldEncryptForInvitedMembers()}):`,\n            members.map((u) => `${u.userId} (${u.membership})`),\n        );\n\n        const userList = members.map((u) => new UserId(u.userId));\n\n        await logDuration(logger, \"ensureSessionsForUsers\", async () => {\n            await this.keyClaimManager.ensureSessionsForUsers(logger, userList);\n        });\n\n        const rustEncryptionSettings = new EncryptionSettings();\n        rustEncryptionSettings.historyVisibility = toRustHistoryVisibility(this.room.getHistoryVisibility());\n\n        // We only support megolm\n        rustEncryptionSettings.algorithm = EncryptionAlgorithm.MegolmV1AesSha2;\n\n        // We need to convert the rotation period from milliseconds to microseconds\n        // See https://spec.matrix.org/v1.8/client-server-api/#mroomencryption and\n        // https://matrix-org.github.io/matrix-rust-sdk-crypto-wasm/classes/EncryptionSettings.html#rotationPeriod\n        if (typeof this.encryptionSettings.rotation_period_ms === \"number\") {\n            rustEncryptionSettings.rotationPeriod = BigInt(this.encryptionSettings.rotation_period_ms * 1000);\n        }\n\n        if (typeof this.encryptionSettings.rotation_period_msgs === \"number\") {\n            rustEncryptionSettings.rotationPeriodMessages = BigInt(this.encryptionSettings.rotation_period_msgs);\n        }\n\n        switch (deviceIsolationMode.kind) {\n            case DeviceIsolationModeKind.AllDevicesIsolationMode:\n                {\n                    // When this.room.getBlacklistUnverifiedDevices() === null, the global settings should be used\n                    // See Room#getBlacklistUnverifiedDevices\n                    const onlyAllowTrustedDevices =\n                        this.room.getBlacklistUnverifiedDevices() ?? globalBlacklistUnverifiedDevices;\n                    rustEncryptionSettings.sharingStrategy = CollectStrategy.deviceBasedStrategy(\n                        onlyAllowTrustedDevices,\n                        deviceIsolationMode.errorOnVerifiedUserProblems,\n                    );\n                }\n                break;\n            case DeviceIsolationModeKind.OnlySignedDevicesIsolationMode:\n                rustEncryptionSettings.sharingStrategy = CollectStrategy.identityBasedStrategy();\n                break;\n        }\n\n        await logDuration(logger, \"shareRoomKey\", async () => {\n            const shareMessages: ToDeviceRequest[] = await this.olmMachine.shareRoomKey(\n                new RoomId(this.room.roomId),\n                // safe to pass without cloning, as it's not reused here (before or after)\n                userList,\n                rustEncryptionSettings,\n            );\n            if (shareMessages) {\n                for (const m of shareMessages) {\n                    await this.outgoingRequestManager.outgoingRequestProcessor.makeOutgoingRequest(m);\n                }\n            }\n        });\n    }\n\n    /**\n     * Discard any existing group session for this room\n     */\n    public async forceDiscardSession(): Promise<void> {\n        const r = await this.olmMachine.invalidateGroupSession(new RoomId(this.room.roomId));\n        if (r) {\n            this.prefixedLogger.info(\"Discarded existing group session\");\n        }\n    }\n\n    private async encryptEventInner(logger: LogSpan, event: MatrixEvent): Promise<void> {\n        logger.debug(\"Encrypting actual message content\");\n\n        const room = new RoomId(this.room.roomId);\n        const type = event.getType();\n        const content = JSON.stringify(event.getContent());\n\n        let encryptedContent;\n        if (event.isState()) {\n            encryptedContent = await this.olmMachine.encryptStateEvent(\n                room,\n                type,\n                // Safety: we've already checked above that this is a state event, so the state key must exist.\n                event.getStateKey()!,\n                content,\n            );\n        } else {\n            encryptedContent = await this.olmMachine.encryptRoomEvent(room, type, content);\n        }\n\n        event.makeEncrypted(\n            EventType.RoomMessageEncrypted,\n            JSON.parse(encryptedContent),\n            this.olmMachine.identityKeys.curve25519.toBase64(),\n            this.olmMachine.identityKeys.ed25519.toBase64(),\n        );\n\n        logger.debug(\"Encrypted event successfully\");\n    }\n}\n\n/**\n * Convert a HistoryVisibility to a RustHistoryVisibility\n * @param visibility - HistoryVisibility enum\n * @returns a RustHistoryVisibility enum\n */\nexport function toRustHistoryVisibility(visibility: HistoryVisibility): RustHistoryVisibility {\n    switch (visibility) {\n        case HistoryVisibility.Invited:\n            return RustHistoryVisibility.Invited;\n        case HistoryVisibility.Joined:\n            return RustHistoryVisibility.Joined;\n        case HistoryVisibility.Shared:\n            return RustHistoryVisibility.Shared;\n        case HistoryVisibility.WorldReadable:\n            return RustHistoryVisibility.WorldReadable;\n    }\n}\n"],"mappings":"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","ignoreList":[]}