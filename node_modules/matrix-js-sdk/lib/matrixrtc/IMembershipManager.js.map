{"version":3,"file":"IMembershipManager.js","names":["MembershipManagerEvent"],"sources":["../../src/matrixrtc/IMembershipManager.ts"],"sourcesContent":["/*\nCopyright 2025 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport type { CallMembership } from \"./CallMembership.ts\";\nimport type { RTCCallIntent, Status, Transport } from \"./types.ts\";\nimport { type TypedEventEmitter } from \"../models/typed-event-emitter.ts\";\n\nexport enum MembershipManagerEvent {\n    StatusChanged = \"StatusChanged\",\n    /**\n     * Emitted when the membership manager has not heard back from the server for the duration\n     * of the delayed event and hence failed to restart the delayed event.\n     * This means that the user is probably not joined anymore and the leave event was distributed to other session members.\n     */\n    ProbablyLeft = \"ProbablyLeft\",\n}\n\nexport type MembershipManagerEventHandlerMap = {\n    [MembershipManagerEvent.StatusChanged]: (prefStatus: Status, newStatus: Status) => void;\n    [MembershipManagerEvent.ProbablyLeft]: (probablyLeft: boolean) => void;\n};\n\n/**\n * This interface defines what a MembershipManager uses and exposes.\n * This interface is what we use to write tests and allows changing the actual implementation\n * without breaking tests because of some internal method renaming.\n *\n * @internal\n */\nexport interface IMembershipManager\n    extends TypedEventEmitter<MembershipManagerEvent, MembershipManagerEventHandlerMap> {\n    /**\n     * If we are trying to join, or have successfully joined the session.\n     * It does not reflect if the room state is already configured to represent us being joined.\n     * It only means that the Manager should be trying to connect or to disconnect running.\n     * The Manager is still running right after isJoined becomes false to send the disconnect events.\n     * @returns true if we intend to be participating in the MatrixRTC session\n     * @deprecated This name is confusing and replaced by `isActivated()`. (Returns the same as `isActivated()`)\n     */\n    isJoined(): boolean;\n    /**\n     * If the manager is activated. This means it tries to do its job to join the call, resend state events...\n     * It does not imply that the room state is already configured to represent being joined.\n     * It means that the Manager tries to connect or is connected. (\"the manager is still active\")\n     * Once `leave()` is called the manager is not activated anymore but still running until `leave()` resolves.\n     * @returns `true` if we intend to be participating in the MatrixRTC session\n     */\n    isActivated(): boolean;\n    /**\n     * Get the actual connection status of the manager.\n     */\n    get status(): Status;\n\n    /**\n     * The Current own state event if the manger is connected.\n     * `undefined` if not connected.\n     */\n    get ownMembership(): CallMembership | undefined;\n\n    /**\n     * If the membership manager has reason to believe that the hs sent a leave event\n     * and as a consequence the current user is perceived as left for other session participants.\n     */\n    get probablyLeft(): boolean;\n\n    /**\n     * Start sending all necessary events to make this user participate in the RTC session.\n     * @param fociPreferred the list of preferred foci to use in the joined RTC membership event.\n     * If multiSfuFocus is set, this is only needed if this client wants to publish to multiple transports simultaneously.\n     * @param multiSfuFocus the active focus to use in the joined RTC membership event. Setting this implies the\n     * membership manager will operate in a multi-SFU connection mode. If `undefined`, an `oldest_membership`\n     * transport selection will be used instead.\n     * @throws can throw if it exceeds a configured maximum retry.\n     */\n    join(fociPreferred: Transport[], multiSfuFocus?: Transport, onError?: (error: unknown) => void): void;\n    /**\n     * Send all necessary events to make this user leave the RTC session.\n     * @param timeout the maximum duration in ms until the promise is forced to resolve.\n     * @returns It resolves with true in case the leave was sent successfully.\n     * It resolves with false in case we hit the timeout before sending successfully.\n     */\n    leave(timeout?: number): Promise<boolean>;\n    /**\n     * Call this if the MatrixRTC session members have changed.\n     */\n    onRTCSessionMemberUpdate(memberships: CallMembership[]): Promise<void>;\n\n    /**\n     * Update the intent of a membership on the call (e.g. user is now providing a video feed)\n     * @param callIntent The new intent to set.\n     */\n    updateCallIntent(callIntent: RTCCallIntent): Promise<void>;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA,WAAYA,sBAAsB,0BAAtBA,sBAAsB;EAAtBA,sBAAsB;EAE9B;AACJ;AACA;AACA;AACA;EANYA,sBAAsB;EAAA,OAAtBA,sBAAsB;AAAA;;AAelC;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]}