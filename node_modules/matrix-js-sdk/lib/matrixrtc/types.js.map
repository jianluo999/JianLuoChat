{"version":3,"file":"types.js","names":["Status","isMyMembership","m","userId","deviceId","sender"],"sources":["../../src/matrixrtc/types.ts"],"sourcesContent":["/*\nCopyright 2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport type { IMentions } from \"../matrix.ts\";\nimport type { RelationEvent } from \"../types.ts\";\nimport type { CallMembership } from \"./CallMembership.ts\";\n\nexport type ParticipantId = string;\n\nexport interface EncryptionKeyEntry {\n    index: number;\n    key: string;\n}\n\n/**\n * The mxID, deviceId and membership timestamp of a RTC session participant.\n */\nexport type ParticipantDeviceInfo = {\n    userId: string;\n    deviceId: string;\n    membershipTs: number;\n};\n\n/**\n * A type representing the information needed to decrypt video streams.\n */\nexport type InboundEncryptionSession = {\n    key: Uint8Array;\n    participantId: ParticipantId;\n    keyIndex: number;\n    creationTS: number;\n};\n\n/**\n * The information about the key used to encrypt video streams.\n */\nexport type OutboundEncryptionSession = {\n    key: Uint8Array;\n    creationTS: number;\n    // The devices that this key is shared with.\n    sharedWith: Array<ParticipantDeviceInfo>;\n    // This is an index acting as the id of the key\n    keyId: number;\n};\n\nexport interface EncryptionKeysEventContent {\n    keys: EncryptionKeyEntry[];\n    device_id: string;\n    call_id: string;\n    sent_ts?: number;\n}\n\n/**\n * THe content of a to-device event that contains encryption keys.\n */\nexport interface EncryptionKeysToDeviceEventContent {\n    keys: { index: number; key: string };\n    member: {\n        // TODO Remove that it is claimed, need to get the sealed sender from decryption info\n        // Or add some validation on it based on the encryption info\n        claimed_device_id: string;\n    };\n    room_id: string;\n    session: {\n        application: string;\n        call_id: string;\n        scope: string;\n    };\n    // Why is this needed?\n    sent_ts?: number;\n}\n/**\n * @deprecated Use `RTCNotificationType` instead.\n */\nexport type CallNotifyType = \"ring\" | \"notify\";\n/**\n * @deprecated Use `IRTCNotificationContent` instead.\n */\nexport interface ICallNotifyContent {\n    \"application\": string;\n    \"m.mentions\": IMentions;\n    \"notify_type\": CallNotifyType;\n    \"call_id\": string;\n}\n\nexport type RTCNotificationType = \"ring\" | \"notification\";\n\n/**\n * Represents the intention of the call from the perspective of the sending user.\n * May be any string, although `\"audio\"` and `\"video\"` are commonly accepted values.\n */\nexport type RTCCallIntent = \"audio\" | \"video\" | string;\nexport interface IRTCNotificationContent extends RelationEvent {\n    \"m.mentions\": IMentions;\n    \"decline_reason\"?: string;\n    \"notification_type\": RTCNotificationType;\n    /**\n     * The initial intent of the calling user.\n     */\n    \"m.call.intent\"?: RTCCallIntent;\n    \"sender_ts\": number;\n    \"lifetime\": number;\n}\n\n/**\n * MSC4310 decline event content for `org.matrix.msc4310.rtc.decline`.\n * Sent as a standard m.reference relation to an `org.matrix.msc4075.rtc.notification` event.\n */\nexport interface IRTCDeclineContent extends RelationEvent {}\n\nexport enum Status {\n    Disconnected = \"Disconnected\",\n    Connecting = \"Connecting\",\n    ConnectingFailed = \"ConnectingFailed\",\n    Connected = \"Connected\",\n    Reconnecting = \"Reconnecting\",\n    Disconnecting = \"Disconnecting\",\n    Stuck = \"Stuck\",\n    Unknown = \"Unknown\",\n}\n\n/**\n * A type collecting call encryption statistics for a session.\n */\nexport type Statistics = {\n    counters: {\n        /**\n         * The number of times we have sent a room event containing encryption keys.\n         */\n        roomEventEncryptionKeysSent: number;\n        /**\n         * The number of times we have received a room event containing encryption keys.\n         */\n        roomEventEncryptionKeysReceived: number;\n    };\n    totals: {\n        /**\n         * The total age (in milliseconds) of all room events containing encryption keys that we have received.\n         * We track the total age so that we can later calculate the average age of all keys received.\n         */\n        roomEventEncryptionKeysReceivedTotalAge: number;\n    };\n};\n\nexport const isMyMembership = (m: CallMembership, userId: string, deviceId: string): boolean =>\n    m.sender === userId && m.deviceId === deviceId;\n\n/**\n *  A RTC transport is a JSON object that describes how to connect to a RTC member.\n */\nexport interface Transport {\n    type: string;\n    [key: string]: unknown;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYA;AACA;AACA;;AAOA;AACA;AACA;;AAQA;AACA;AACA;;AAiBA;AACA;AACA;;AAiBA;AACA;AACA;;AAEA;AACA;AACA;;AAUA;AACA;AACA;AACA;;AAcA;AACA;AACA;AACA;;AAGA,WAAYA,MAAM,0BAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAAA,OAANA,MAAM;AAAA;;AAWlB;AACA;AACA;;AAqBA,OAAO,IAAMC,cAAc,GAAGA,CAACC,CAAiB,EAAEC,MAAc,EAAEC,QAAgB,KAC9EF,CAAC,CAACG,MAAM,KAAKF,MAAM,IAAID,CAAC,CAACE,QAAQ,KAAKA,QAAQ;;AAElD;AACA;AACA","ignoreList":[]}