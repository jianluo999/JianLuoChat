{"version":3,"file":"utils.js","names":["OutdatedKeyFilter","constructor","_defineProperty","Map","isOutdated","participantId","item","_this$tsBuffer$get","tsBuffer","has","set","latestTimestamp","get","keyIndex","creationTS","getParticipantId","userId","deviceId","concat"],"sources":["../../src/matrixrtc/utils.ts"],"sourcesContent":["/*\nCopyright 2025 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport type { InboundEncryptionSession, ParticipantId } from \"./types.ts\";\n\n/**\n * Detects when a key for a given index is outdated.\n */\nexport class OutdatedKeyFilter {\n    // Map of participantId -> keyIndex -> timestamp\n    private tsBuffer: Map<ParticipantId, Map<number, number>> = new Map();\n\n    public constructor() {}\n\n    /**\n     * Check if there is a recent key with the same keyId (index) and then use the creationTS to decide what to\n     * do with the key. If the key received is older than the one already in the buffer, it is ignored.\n     * @param participantId\n     * @param item\n     */\n    public isOutdated(participantId: ParticipantId, item: InboundEncryptionSession): boolean {\n        if (!this.tsBuffer.has(participantId)) {\n            this.tsBuffer.set(participantId, new Map<number, number>());\n        }\n\n        const latestTimestamp = this.tsBuffer.get(participantId)?.get(item.keyIndex);\n        if (latestTimestamp && latestTimestamp > item.creationTS) {\n            // The existing key is more recent, ignore this one\n            return true;\n        }\n        this.tsBuffer.get(participantId)!.set(item.keyIndex, item.creationTS);\n        return false;\n    }\n}\n\nexport function getParticipantId(userId: string, deviceId: string): ParticipantId {\n    return `${userId}:${deviceId}`;\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA,OAAO,MAAMA,iBAAiB,CAAC;EAIpBC,WAAWA,CAAA,EAAG;IAHrB;IAAAC,eAAA,mBAC4D,IAAIC,GAAG,CAAC,CAAC;EAE/C;;EAEtB;AACJ;AACA;AACA;AACA;AACA;EACWC,UAAUA,CAACC,aAA4B,EAAEC,IAA8B,EAAW;IAAA,IAAAC,kBAAA;IACrF,IAAI,CAAC,IAAI,CAACC,QAAQ,CAACC,GAAG,CAACJ,aAAa,CAAC,EAAE;MACnC,IAAI,CAACG,QAAQ,CAACE,GAAG,CAACL,aAAa,EAAE,IAAIF,GAAG,CAAiB,CAAC,CAAC;IAC/D;IAEA,IAAMQ,eAAe,IAAAJ,kBAAA,GAAG,IAAI,CAACC,QAAQ,CAACI,GAAG,CAACP,aAAa,CAAC,cAAAE,kBAAA,uBAAhCA,kBAAA,CAAkCK,GAAG,CAACN,IAAI,CAACO,QAAQ,CAAC;IAC5E,IAAIF,eAAe,IAAIA,eAAe,GAAGL,IAAI,CAACQ,UAAU,EAAE;MACtD;MACA,OAAO,IAAI;IACf;IACA,IAAI,CAACN,QAAQ,CAACI,GAAG,CAACP,aAAa,CAAC,CAAEK,GAAG,CAACJ,IAAI,CAACO,QAAQ,EAAEP,IAAI,CAACQ,UAAU,CAAC;IACrE,OAAO,KAAK;EAChB;AACJ;AAEA,OAAO,SAASC,gBAAgBA,CAACC,MAAc,EAAEC,QAAgB,EAAiB;EAC9E,UAAAC,MAAA,CAAUF,MAAM,OAAAE,MAAA,CAAID,QAAQ;AAChC","ignoreList":[]}