{"version":3,"file":"EncryptionManager.js","names":["logger","rootLogger","secureRandomBase64Url","decodeBase64","encodeUnpaddedBase64","safeGetRetryAfterMs","KeyTransportEvents","isMyMembership","getParticipantId","RoomAndToDeviceEvents","RoomAndToDeviceTransport","EncryptionManager","updateEncryptionKeyThrottle","_this$joinConfig$upda","_this$joinConfig","joinConfig","makeKeyDelay","_this$joinConfig$make","_this$joinConfig2","useKeyDelay","_this$joinConfig$useK","_this$joinConfig3","constructor","userId","deviceId","getMemberships","transport","statistics","onEncryptionKeysChanged","parentLogger","_this","_defineProperty","Set","Map","_ref","_asyncToGenerator","indexToSend","keysEventUpdateTimeout","undefined","clearTimeout","lastEncryptionKeyUpdateRequest","Date","now","joined","myKeys","getKeysForParticipant","warn","latestGeneratedKeyIndex","keyIndexToSend","info","concat","keyToSend","counters","roomEventEncryptionKeysSent","targets","filter","membership","sender","map","membershipTs","createdTs","sendKey","debug","length","error","resendDelay","setTimeout","sendEncryptionKeysEvent","_x","apply","arguments","requestSendCurrentKey","keyBase64Encoded","index","timestamp","setEncryptionKey","manageMediaKeys","makeNewKeyTimeout","newKeyIndex","makeNewSenderKey","getChild","getEncryptionKeys","keysMap","userKeys","encryptionKeys","keys","entry","key","keyIndex","set","join","_this$joinConfig$mana","_this$joinConfig4","_this$joinConfig5","on","ReceivedKeys","onNewKeyReceived","EnabledTransportsChanged","onTransportChanged","start","leave","off","stop","t","setNewKeyTimeouts","clear","onMembershipsUpdate","oldMemberships","oldMembershipIds","m","getParticipantIdFromMembership","newMembershipIds","anyLeft","Array","from","some","x","has","anyJoined","oldFingerprints","lastMembershipFingerprints","storeLastMembershipFingerprints","onRotateKeyTimeout","newFingerprints","candidateUpdates","delayBeforeUse","encryptionKey","encryptionKeyIndex","getNewEncryptionKeyIndex","_this$encryptionKeys$","get","encryptionKeyString","keyBin","participantId","participantKeys","existingKeyAtIndex","keysEqual","useKeyTimeout","delete","add","a","b","every","i"],"sources":["../../src/matrixrtc/EncryptionManager.ts"],"sourcesContent":["import { type Logger, logger as rootLogger } from \"../logger.ts\";\nimport { type EncryptionConfig } from \"./MatrixRTCSession.ts\";\nimport { secureRandomBase64Url } from \"../randomstring.ts\";\nimport { decodeBase64, encodeUnpaddedBase64 } from \"../base64.ts\";\nimport { safeGetRetryAfterMs } from \"../http-api/errors.ts\";\nimport { type CallMembership } from \"./CallMembership.ts\";\nimport { type KeyTransportEventListener, KeyTransportEvents, type IKeyTransport } from \"./IKeyTransport.ts\";\nimport { isMyMembership, type ParticipantId, type Statistics } from \"./types.ts\";\nimport { getParticipantId } from \"./utils.ts\";\nimport {\n    type EnabledTransports,\n    RoomAndToDeviceEvents,\n    RoomAndToDeviceTransport,\n} from \"./RoomAndToDeviceKeyTransport.ts\";\n\n/**\n * This interface is for testing and for making it possible to interchange the encryption manager.\n * @internal\n */\nexport interface IEncryptionManager {\n    /**\n     * Joins the encryption manager with the provided configuration.\n     *\n     * @param joinConfig - The configuration for joining encryption, or undefined\n     * if no specific configuration is provided.\n     */\n    join(joinConfig: EncryptionConfig | undefined): void;\n\n    /**\n     * Leaves the encryption manager, cleaning up any associated resources.\n     */\n    leave(): void;\n\n    /**\n     * Called from the MatrixRTCSession when the memberships in this session updated.\n     *\n     * @param oldMemberships - The previous state of call memberships before the update.\n     */\n    onMembershipsUpdate(oldMemberships: CallMembership[]): void;\n\n    /**\n     * Retrieves the encryption keys currently managed by the encryption manager.\n     *\n     * @returns A map of participant IDs to their encryption keys.\n     */\n    getEncryptionKeys(): ReadonlyMap<ParticipantId, ReadonlyArray<{ key: Uint8Array; keyIndex: number }>>;\n}\n\n/**\n * This class implements the IEncryptionManager interface,\n * and takes care of managing the encryption keys of all rtc members:\n *  - generate new keys for the local user and send them to other participants\n *  - track all keys of all other members and update livekit.\n *\n * @internal\n */\nexport class EncryptionManager implements IEncryptionManager {\n    private manageMediaKeys = false;\n    private keysEventUpdateTimeout?: ReturnType<typeof setTimeout>;\n    private makeNewKeyTimeout?: ReturnType<typeof setTimeout>;\n    private setNewKeyTimeouts = new Set<ReturnType<typeof setTimeout>>();\n\n    private get updateEncryptionKeyThrottle(): number {\n        return this.joinConfig?.updateEncryptionKeyThrottle ?? 3_000;\n    }\n\n    private get makeKeyDelay(): number {\n        return this.joinConfig?.makeKeyDelay ?? 3_000;\n    }\n\n    private get useKeyDelay(): number {\n        return this.joinConfig?.useKeyDelay ?? 5_000;\n    }\n\n    private encryptionKeys = new Map<string, Array<{ key: Uint8Array; timestamp: number }>>();\n    private lastEncryptionKeyUpdateRequest?: number;\n\n    // We use this to store the last membership fingerprints we saw, so we can proactively re-send encryption keys\n    // if it looks like a membership has been updated.\n    private lastMembershipFingerprints: Set<string> | undefined;\n\n    private latestGeneratedKeyIndex = -1;\n    private joinConfig: EncryptionConfig | undefined;\n    private logger: Logger;\n\n    public constructor(\n        private userId: string,\n        private deviceId: string,\n        private getMemberships: () => CallMembership[],\n        private transport: IKeyTransport,\n        private statistics: Statistics,\n        private onEncryptionKeysChanged: (\n            keyBin: Uint8Array,\n            encryptionKeyIndex: number,\n            participantId: string,\n        ) => void,\n        parentLogger?: Logger,\n    ) {\n        this.logger = (parentLogger ?? rootLogger).getChild(`[EncryptionManager]`);\n    }\n\n    public getEncryptionKeys(): ReadonlyMap<ParticipantId, ReadonlyArray<{ key: Uint8Array; keyIndex: number }>> {\n        const keysMap = new Map<ParticipantId, ReadonlyArray<{ key: Uint8Array; keyIndex: number }>>();\n        for (const [userId, userKeys] of this.encryptionKeys) {\n            const keys = userKeys.map((entry, index) => ({\n                key: entry.key,\n                keyIndex: index,\n            }));\n            keysMap.set(userId as ParticipantId, keys);\n        }\n        return keysMap;\n    }\n\n    private joined = false;\n\n    public join(joinConfig: EncryptionConfig): void {\n        this.joinConfig = joinConfig;\n        this.joined = true;\n        this.manageMediaKeys = this.joinConfig?.manageMediaKeys ?? this.manageMediaKeys;\n\n        this.transport.on(KeyTransportEvents.ReceivedKeys, this.onNewKeyReceived);\n        // Deprecate RoomKeyTransport: this can get removed.\n        if (this.transport instanceof RoomAndToDeviceTransport) {\n            this.transport.on(RoomAndToDeviceEvents.EnabledTransportsChanged, this.onTransportChanged);\n        }\n        this.transport.start();\n        if (this.joinConfig?.manageMediaKeys) {\n            this.makeNewSenderKey();\n            this.requestSendCurrentKey();\n        }\n    }\n\n    public leave(): void {\n        // clear our encryption keys as we're done with them now (we'll\n        // make new keys if we rejoin). We leave keys for other participants\n        // as they may still be using the same ones.\n        this.encryptionKeys.set(getParticipantId(this.userId, this.deviceId), []);\n        this.transport.off(KeyTransportEvents.ReceivedKeys, this.onNewKeyReceived);\n        this.transport.stop();\n\n        if (this.makeNewKeyTimeout !== undefined) {\n            clearTimeout(this.makeNewKeyTimeout);\n            this.makeNewKeyTimeout = undefined;\n        }\n        for (const t of this.setNewKeyTimeouts) {\n            clearTimeout(t);\n        }\n        this.setNewKeyTimeouts.clear();\n\n        this.manageMediaKeys = false;\n        this.joined = false;\n    }\n\n    public onMembershipsUpdate(oldMemberships: CallMembership[]): void {\n        if (this.manageMediaKeys && this.joined) {\n            const oldMembershipIds = new Set(\n                oldMemberships\n                    .filter((m) => !isMyMembership(m, this.userId, this.deviceId))\n                    .map(getParticipantIdFromMembership),\n            );\n            const newMembershipIds = new Set(\n                this.getMemberships()\n                    .filter((m) => !isMyMembership(m, this.userId, this.deviceId))\n                    .map(getParticipantIdFromMembership),\n            );\n\n            // We can use https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/symmetricDifference\n            // for this once available\n            const anyLeft = Array.from(oldMembershipIds).some((x) => !newMembershipIds.has(x));\n            const anyJoined = Array.from(newMembershipIds).some((x) => !oldMembershipIds.has(x));\n\n            const oldFingerprints = this.lastMembershipFingerprints;\n            // always store the fingerprints of these latest memberships\n            this.storeLastMembershipFingerprints();\n\n            if (anyLeft) {\n                if (this.makeNewKeyTimeout) {\n                    // existing rotation in progress, so let it complete\n                } else {\n                    this.logger.debug(`Member(s) have left: queueing sender key rotation`);\n                    this.makeNewKeyTimeout = setTimeout(this.onRotateKeyTimeout, this.makeKeyDelay);\n                }\n            } else if (anyJoined) {\n                this.logger.debug(`New member(s) have joined: re-sending keys`);\n                this.requestSendCurrentKey();\n            } else if (oldFingerprints) {\n                // does it look like any of the members have updated their memberships?\n                const newFingerprints = this.lastMembershipFingerprints!;\n\n                // We can use https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set/symmetricDifference\n                // for this once available\n                const candidateUpdates =\n                    Array.from(oldFingerprints).some((x) => !newFingerprints.has(x)) ||\n                    Array.from(newFingerprints).some((x) => !oldFingerprints.has(x));\n                if (candidateUpdates) {\n                    this.logger.debug(`Member(s) have updated/reconnected: re-sending keys to everyone`);\n                    this.requestSendCurrentKey();\n                }\n            }\n        }\n    }\n\n    /**\n     * Generate a new sender key and add it at the next available index\n     * @param delayBeforeUse - If true, wait for a short period before setting the key for the\n     *                         media encryptor to use. If false, set the key immediately.\n     * @returns The index of the new key\n     */\n    private makeNewSenderKey(delayBeforeUse = false): number {\n        const encryptionKey = secureRandomBase64Url(16);\n        const encryptionKeyIndex = this.getNewEncryptionKeyIndex();\n        this.logger.info(\"Generated new key at index \" + encryptionKeyIndex);\n        this.setEncryptionKey(\n            this.userId,\n            this.deviceId,\n            encryptionKeyIndex,\n            encryptionKey,\n            Date.now(),\n            delayBeforeUse,\n        );\n        return encryptionKeyIndex;\n    }\n\n    /**\n     * Requests that we resend our current keys to the room. May send a keys event immediately\n     * or queue for alter if one has already been sent recently.\n     */\n    private requestSendCurrentKey(): void {\n        if (!this.manageMediaKeys) return;\n\n        if (\n            this.lastEncryptionKeyUpdateRequest &&\n            this.lastEncryptionKeyUpdateRequest + this.updateEncryptionKeyThrottle > Date.now()\n        ) {\n            this.logger.info(\"Last encryption key event sent too recently: postponing\");\n            if (this.keysEventUpdateTimeout === undefined) {\n                this.keysEventUpdateTimeout = setTimeout(\n                    () => void this.sendEncryptionKeysEvent(),\n                    this.updateEncryptionKeyThrottle,\n                );\n            }\n            return;\n        }\n\n        void this.sendEncryptionKeysEvent();\n    }\n\n    /**\n     * Get the known encryption keys for a given participant device.\n     *\n     * @param userId the user ID of the participant\n     * @param deviceId the device ID of the participant\n     * @returns The encryption keys for the given participant, or undefined if they are not known.\n     */\n    private getKeysForParticipant(userId: string, deviceId: string): Array<Uint8Array> | undefined {\n        return this.encryptionKeys.get(getParticipantId(userId, deviceId))?.map((entry) => entry.key);\n    }\n\n    /**\n     * Re-sends the encryption keys room event\n     */\n    private sendEncryptionKeysEvent = async (indexToSend?: number): Promise<void> => {\n        if (this.keysEventUpdateTimeout !== undefined) {\n            clearTimeout(this.keysEventUpdateTimeout);\n            this.keysEventUpdateTimeout = undefined;\n        }\n        this.lastEncryptionKeyUpdateRequest = Date.now();\n\n        if (!this.joined) return;\n\n        const myKeys = this.getKeysForParticipant(this.userId, this.deviceId);\n\n        if (!myKeys) {\n            this.logger.warn(\"Tried to send encryption keys event but no keys found!\");\n            return;\n        }\n\n        if (typeof indexToSend !== \"number\" && this.latestGeneratedKeyIndex === -1) {\n            this.logger.warn(\"Tried to send encryption keys event but no current key index found!\");\n            return;\n        }\n\n        const keyIndexToSend = indexToSend ?? this.latestGeneratedKeyIndex;\n\n        this.logger.info(\n            `Try sending encryption keys event. keyIndexToSend=${keyIndexToSend} (method parameter: ${indexToSend})`,\n        );\n        const keyToSend = myKeys[keyIndexToSend];\n\n        try {\n            this.statistics.counters.roomEventEncryptionKeysSent += 1;\n            const targets = this.getMemberships()\n                .filter((membership) => {\n                    return membership.sender != undefined;\n                })\n                .map((membership) => {\n                    return {\n                        userId: membership.sender!,\n                        deviceId: membership.deviceId,\n                        membershipTs: membership.createdTs(),\n                    };\n                });\n            await this.transport.sendKey(encodeUnpaddedBase64(keyToSend), keyIndexToSend, targets);\n            this.logger.debug(\n                `sendEncryptionKeysEvent participantId=${this.userId}:${this.deviceId} numKeys=${myKeys.length} currentKeyIndex=${this.latestGeneratedKeyIndex} keyIndexToSend=${keyIndexToSend}`,\n            );\n        } catch (error) {\n            if (this.keysEventUpdateTimeout === undefined) {\n                const resendDelay = safeGetRetryAfterMs(error, 5000);\n                this.logger.warn(`Failed to send m.call.encryption_key, retrying in ${resendDelay}`, error);\n                this.keysEventUpdateTimeout = setTimeout(() => void this.sendEncryptionKeysEvent(), resendDelay);\n            } else {\n                this.logger.info(\"Not scheduling key resend as another re-send is already pending\");\n            }\n        }\n    };\n\n    private onTransportChanged: (enabled: EnabledTransports) => void = () => {\n        this.requestSendCurrentKey();\n    };\n\n    public onNewKeyReceived: KeyTransportEventListener = (userId, deviceId, keyBase64Encoded, index, timestamp) => {\n        this.logger.debug(`Received key over key transport ${userId}:${deviceId} at index ${index}`);\n        this.setEncryptionKey(userId, deviceId, index, keyBase64Encoded, timestamp);\n    };\n\n    private storeLastMembershipFingerprints(): void {\n        this.lastMembershipFingerprints = new Set(\n            this.getMemberships()\n                .filter((m) => !isMyMembership(m, this.userId, this.deviceId))\n                .map((m) => `${getParticipantIdFromMembership(m)}:${m.createdTs()}`),\n        );\n    }\n\n    private getNewEncryptionKeyIndex(): number {\n        if (this.latestGeneratedKeyIndex === -1) {\n            return 0;\n        }\n\n        // maximum key index is 255\n        return (this.latestGeneratedKeyIndex + 1) % 256;\n    }\n\n    /**\n     * Sets an encryption key at a specified index for a participant.\n     * The encryption keys for the local participant are also stored here under the\n     * user and device ID of the local participant.\n     * If the key is older than the existing key at the index, it will be ignored.\n     * @param userId - The user ID of the participant\n     * @param deviceId - Device ID of the participant\n     * @param encryptionKeyIndex - The index of the key to set\n     * @param encryptionKeyString - The string representation of the key to set in base64\n     * @param timestamp - The timestamp of the key. We assume that these are monotonic for each participant device.\n     * @param delayBeforeUse - If true, delay before emitting a key changed event. Useful when setting\n     *                         encryption keys for the local participant to allow time for the key to\n     *                         be distributed.\n     */\n    private setEncryptionKey(\n        userId: string,\n        deviceId: string,\n        encryptionKeyIndex: number,\n        encryptionKeyString: string,\n        timestamp: number,\n        delayBeforeUse = false,\n    ): void {\n        this.logger.debug(`Setting encryption key for ${userId}:${deviceId} at index ${encryptionKeyIndex}`);\n        const keyBin = decodeBase64(encryptionKeyString);\n\n        const participantId = getParticipantId(userId, deviceId);\n        if (!this.encryptionKeys.has(participantId)) {\n            this.encryptionKeys.set(participantId, []);\n        }\n        const participantKeys = this.encryptionKeys.get(participantId)!;\n\n        const existingKeyAtIndex = participantKeys[encryptionKeyIndex];\n\n        if (existingKeyAtIndex) {\n            if (existingKeyAtIndex.timestamp > timestamp) {\n                this.logger.info(\n                    `Ignoring new key at index ${encryptionKeyIndex} for ${participantId} as it is older than existing known key`,\n                );\n                return;\n            }\n\n            if (keysEqual(existingKeyAtIndex.key, keyBin)) {\n                existingKeyAtIndex.timestamp = timestamp;\n                return;\n            }\n        }\n\n        if (userId === this.userId && deviceId === this.deviceId) {\n            // It is important to already update the latestGeneratedKeyIndex here\n            // NOT IN THE `delayBeforeUse` `setTimeout`.\n            // Even though this is where we call onEncryptionKeysChanged and set the key in EC (and livekit).\n            // It needs to happen here because we will send the key before the timeout has passed and sending\n            // the key will use latestGeneratedKeyIndex as the index. if we update it in the `setTimeout` callback\n            // it will use the wrong index (index - 1)!\n            this.latestGeneratedKeyIndex = encryptionKeyIndex;\n        }\n        participantKeys[encryptionKeyIndex] = {\n            key: keyBin,\n            timestamp,\n        };\n\n        if (delayBeforeUse) {\n            const useKeyTimeout = setTimeout(() => {\n                this.setNewKeyTimeouts.delete(useKeyTimeout);\n                this.logger.info(`Delayed-emitting key changed event for ${participantId} index ${encryptionKeyIndex}`);\n\n                this.onEncryptionKeysChanged(keyBin, encryptionKeyIndex, participantId);\n            }, this.useKeyDelay);\n            this.setNewKeyTimeouts.add(useKeyTimeout);\n        } else {\n            this.onEncryptionKeysChanged(keyBin, encryptionKeyIndex, participantId);\n        }\n    }\n\n    private onRotateKeyTimeout = (): void => {\n        if (!this.manageMediaKeys) return;\n\n        this.makeNewKeyTimeout = undefined;\n        this.logger.info(\"Making new sender key for key rotation\");\n        const newKeyIndex = this.makeNewSenderKey(true);\n        // send immediately: if we're about to start sending with a new key, it's\n        // important we get it out to others as soon as we can.\n        void this.sendEncryptionKeysEvent(newKeyIndex);\n    };\n}\n\nfunction keysEqual(a: Uint8Array | undefined, b: Uint8Array | undefined): boolean {\n    if (a === b) return true;\n    return !!a && !!b && a.length === b.length && a.every((x, i) => x === b[i]);\n}\n\nconst getParticipantIdFromMembership = (m: CallMembership): string => getParticipantId(m.sender!, m.deviceId);\n"],"mappings":"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","ignoreList":[]}