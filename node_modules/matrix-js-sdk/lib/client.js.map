{"version":3,"file":"client.js","names":["SyncApi","SyncState","EventStatus","MatrixEvent","MatrixEventEvent","StubStore","createNewMatrixCall","supportsMatrixCall","Filter","CallEventHandler","GroupCallEventHandler","utils","deepCompare","noUnsafeEventProps","replaceParam","safeSet","sleep","Direction","EventTimeline","PushProcessor","AutoDiscovery","encodeUnpaddedBase64Url","TypedReEmitter","logger","SERVICE_TYPES","ClientPrefix","IdentityPrefix","MatrixError","MatrixHttpApi","MediaPrefix","Method","retryNetworkOperation","User","UserEvent","getHttpUriForMxc","SearchResult","ContentHelpers","NotificationCountType","RoomMemberEvent","isSendDelayedEventRequestOpts","EventType","LOCAL_NOTIFICATION_SETTINGS_PREFIX","MSC3912_RELATION_BASED_REDACTIONS_PROP","MsgType","PUSHER_ENABLED","RelationType","RoomCreateTypeField","RoomType","UNSTABLE_MSC3088_ENABLED","UNSTABLE_MSC3088_PURPOSE","UNSTABLE_MSC3089_TREE_SUBTYPE","GuestAccess","HistoryVisibility","Preset","eventMapperFor","secureRandomString","DEFAULT_TREE_POWER_LEVELS_TEMPLATE","MSC3089TreeSpace","SearchOrderBy","PushRuleActionName","PushRuleKind","GroupCall","MediaHandler","TypedEventEmitter","MAIN_ROOM_TIMELINE","ReceiptType","SlidingSyncSdk","determineFeatureSupport","FeatureSupport","Thread","THREAD_RELATION_TYPE","ThreadFilterType","threadFilterTypeToFilter","M_BEACON_INFO","NamespacedValue","UnstableValue","ToDeviceMessageQueue","IgnoredInvites","buildFeatureSupportMap","Feature","ServerSupport","RUST_SDK_STORE_PREFIX","CryptoEvent","ServerSideSecretStorageImpl","MatrixRTCSessionManager","getRelationsThreadFilter","KnownMembership","ServerCapabilities","sha256","discoverAndValidateOIDCIssuerWellKnown","validateAuthMetadataAndKeys","UnsupportedDelayedEventsEndpointError","UnsupportedStickyEventsEndpointError","SCROLLBACK_DELAY_MS","TURN_CHECK_INTERVAL","UNSTABLE_MSC3852_LAST_SEEN_UA","PendingEventOrdering","GET_LOGIN_TOKEN_CAPABILITY","UNSTABLE_MSC2666_SHARED_ROOMS","UNSTABLE_MSC2666_MUTUAL_ROOMS","UNSTABLE_MSC2666_QUERY_MUTUAL_ROOMS","UNSTABLE_MSC4140_DELAYED_EVENTS","UNSTABLE_MSC4354_STICKY_EVENTS","UNSTABLE_MSC4133_EXTENDED_PROFILES","STABLE_MSC4133_EXTENDED_PROFILES","CrossSigningKeyType","EVENT_ID_PREFIX","ClientEvent","SSO_ACTION_PARAM","MatrixClient","constructor","opts","_opts$logger","_opts$usingExternalCr","_this","_opts$disableVoip","_opts$enableEncrypted","_opts$cryptoCallbacks","this","_defineProperty","Map","Set","isInitialSyncComplete","callEventHandler","start","groupCallEventHandler","off","Sync","startCallEventHandler","matrixRTC","startMatrixRTC","_this$getRooms","unreadRooms","getRooms","filter","room","getUnreadNotificationCount","Total","currentUserId","getSafeUserId","fixupNotifications","fixupRoomNotifications","baseUrl","ensureNoTrailingSlash","idBaseUrl","identityServer","usingExternalCrypto","store","deviceId","sessionId","userId","credentials","http","fetchFn","accessToken","refreshToken","tokenRefreshFunction","prefix","V3","onlyData","extraParams","queryParams","localTimeoutMs","useAuthorizationHeader","pickleKey","legacyPickleKey","useLivekitForGroupCalls","Boolean","scheduler","setProcessFunction","_ref","_asyncToGenerator","eventToSend","getRoom","getRoomId","status","SENDING","updatePendingEventStatus","res","sendEventHttpRequest","updatePendingEvent","SENT","event_id","_x","apply","arguments","disableVoip","canSupportVoip","on","serverCapabilitiesService","timelineSupport","legacyCryptoStore","cryptoStore","verificationMethods","cryptoCallbacks","enableEncryptedStateEvents","forceTURN","iceCandidatePoolSize","undefined","supportsCallTransfer","fallbackICEServerAllowed","isVoipWithNoMediaAllowed","useE2eForGroupCall","livekitServiceURL","roomNameGenerator","toDeviceMessageQueue","Decrypted","event","fixNotificationCountOnDecryption","ignoredInvites","_secretStorage","setMaxListeners","newStore","_store","setUserCreator","createUser","startClient","_this2","clientRunning","getUserId","storeUser","supportsVoip","checkTurnServersIntervalID","setInterval","checkTurnServers","syncApi","error","stop","getVersions","threads","list","fwdPagination","doesServerSupportThread","setServerSideSupport","setServerSideListSupport","setServerSideFwdPaginationSupport","e","clientOpts","slidingSync","buildSyncApiOptions","sync","catch","info","clientWellKnownPollPeriod","clientWellKnownIntervalID","fetchClientWellKnown","cryptoBackend","canResetEntireTimeline","roomId","canResetTimelineCallback","getChild","stopClient","_this$cryptoBackend","_this$syncApi","_this$peekSync","_this$callEventHandle","_this$groupCallEventH","debug","peekSync","stopPeeking","globalThis","clearInterval","clearStores","_this3","args","length","Error","promises","push","deleteAllData","deleteRustSdkStore","_ref2","indexedDB","_unused","_loop","dbname","prom","Promise","resolve","reject","concat","req","deleteDatabase","onsuccess","_","onerror","warn","onblocked","_args$cryptoDatabaseP","cryptoDatabasePrefix","_args$cryptoDatabaseP2","all","then","_this$credentials$use","_this$credentials","getDomain","_this$credentials2","replace","getUserIdLocalpart","_this$credentials$use2","_this$credentials3","split","substring","getDeviceId","getSessionId","getMediaHandler","mediaHandler","setForceTURN","force","setSupportsCallTransfer","support","getUseE2eForGroupCall","createCall","createGroupCall","type","isPtt","intent","dataChannelsEnabled","dataChannelOptions","_this4","getGroupCallForRoom","create","getLivekitServiceURL","setLivekitServiceURL","newURL","waitUntilRoomReadyForGroupCalls","groupCalls","get","getSyncState","_this$syncApi$getSync","_this$syncApi2","getSyncStateData","state","Prepared","Syncing","isGuest","isGuestAccount","setGuest","guest","getScheduler","retryImmediately","_this$syncApi$retryIm","_this$syncApi3","sendQueue","getNotifTimelineSet","notifTimelineSet","setNotifTimelineSet","set","getCapabilities","_this5","caps","getCachedCapabilities","fetchCapabilities","initRustCrypto","_arguments","_this6","_args$cryptoDatabaseP3","_this6$legacyPickleKe","RustCrypto","rustCrypto","secretStorage","storePrefix","useIndexedDB","storeKey","storageKey","storePassphrase","storagePassword","legacyMigrationProgressListener","progress","total","emit","LegacyCryptoStoreMigrationProgress","setSupportedVerificationMethods","Membership","onRoomMembership","bind","Event","onLiveEventFromSync","reEmitter","reEmit","VerificationRequestReceived","UserTrustStatusChanged","KeyBackupStatus","KeyBackupSessionsRemaining","KeyBackupFailed","KeyBackupDecryptionKeyCached","KeysChanged","DevicesUpdated","WillUpdateDevices","DehydratedDeviceCreated","DehydratedDeviceUploaded","RehydrationStarted","RehydrationProgress","RehydrationCompleted","RehydrationError","DehydrationKeyCached","DehydratedDeviceRotationError","getCrypto","isRoomEncrypted","hasEncryptionStateEvent","isKeyBackupKeyStored","isStored","makeKeyBackupPath","version","path","encodeUri","$roomId","$sessionId","queryData","deleteKeysFromBackup","_this7","authedRequest","Delete","getMediaConfig","useAuthenticatedMedia","Get","V1","getVisibleRooms","msc3946ProcessDynamicPredecessor","allRooms","visibleRooms","predecessors","findPredecessorRooms","predecessor","delete","Array","from","getUser","getUsers","setAccountData","eventType","content","_this8","setAccountDataRaw","existingData","getAccountData","updatedResolvers","withResolvers","accountDataListener","getType","addListener","AccountData","result","promise","removeListener","$userId","$type","Put","getAccountDataFromServer","_this9","getContent","_data","data","errcode","deleteAccountData","_this0","msc3391DeleteAccountDataServerSupport","canSupport","AccountDataDeletion","Unsupported","options","Unstable","getIgnoredUsers","IgnoredUserList","Object","keys","setIgnoredUsers","userIds","ignored_users","forEach","u","isUserIgnored","includes","joinRoom","roomIdOrAlias","_arguments2","_this1","_roomMember$events$me","_roomMember$events$me2","roomMember","getMember","preJoinMembership","membership","inviter","Invite","events","member","getSender","JSON","stringify","Join","signPromise","inviteSignUrl","url","URL","searchParams","requestOtherUrl","Post","viaServers","via","server_name","slice","signedInviteObj","third_party_signed","$roomid","room_id","acceptSharedHistory","maybeAcceptKeyBundle","resolvedRoom","hasMembershipState","createRoom","knockRoom","Knock","$roomIdOrAlias","isArray","body","reason","resendEvent","encryptAndSendEvent","cancelPendingEvent","QUEUED","NOT_SENT","ENCRYPTING","eventsBeingEncrypted","getId","removeEventFromQueue","CANCELLED","setRoomName","name","sendStateEvent","RoomName","setRoomTopic","topic","htmlTopic","makeTopicContent","RoomTopic","getRoomTags","setRoomTag","tagName","metadata","$tag","deleteRoomTag","setRoomAccountData","setPowerLevel","powerLevel","_this10","_content","_this10$getRoom","currentState","getStateEvents","RoomPowerLevels","getStateEvent","deepCopy","users","user","unstable_createLiveBeacon","beaconInfoContent","_this11","unstable_setLiveBeacon","_this12","sendEvent","threadIdOrEventType","eventTypeOrContent","contentOrTxnId","txnIdOrVoid","threadId","txnId","startsWith","addThreadRelationIfNeeded","sendCompleteEvent","eventObject","_content$mRelates_to","rel_type","_content$mRelates_to2","_this$getRoom","isReply","_objectSpread","is_falling_back","thread","getThread","_thread$lastReply$get","_thread$lastReply","lastReply","ev","isRelation","_ref3","delayOpts","queryDict","makeTxnId","localEvent","assign","user_id","sender","origin_server_ts","Date","getTime","setThread","Replaced","VisibilityChange","BeforeRedaction","targetId","getAssociatedId","target","getPendingEvents","find","once","LocalEventIdReplaced","updateAssociatedId","setTxnId","setStatus","addPendingEvent","delayOptsOrQuery","_this13","queryOpts","cancelled","add","encryptEventIfNeeded","queueEvent","getQueueForEvent","err","_this14","shouldEncryptEventForRoom","encryptEvent","_this15","_this15$cryptoBackend","isEncrypted","Reaction","isRedaction","isEncryptionEnabledInRoom","getEncryptedIfNeededEventType","_this$getRoom2","RoomMessageEncrypted","newStatus","queryOrDelayOpts","getTxnId","pathParams","$eventType","getWireType","$stateKey","getStateKey","$txnId","isState","pathTemplate","redacts","$redactsEventId","getWireContent","getUnstableDelayQueryOpts","redactEvent","eventId","_eventId","_opts","_opts2","with_rel_types","RelationBasedRedactions","withRelTypesPropName","Stable","stable","unstable","RoomRedaction","sendMessage","RoomMessage","sendContent","sendTextMessage","_threadId","makeTextMessage","sendNotice","_threadId2","makeNotice","sendEmoteMessage","_threadId3","makeEmoteMessage","sendImageMessage","_threadId4","text","msgtype","Image","sendStickerMessage","_threadId5","Sticker","sendHtmlMessage","htmlBody","_threadId6","makeHtmlMessage","sendHtmlNotice","_threadId7","makeHtmlNotice","sendHtmlEmote","_threadId8","makeHtmlEmote","_unstable_sendDelayedEvent","_this16","doesServerSupportUnstableFeature","_unstable_sendStickyDelayedEvent","stickDuration","_this17","_unstable_sendDelayedStateEvent","_arguments3","_this18","stateKey","_unstable_sendStickyEvent","_this19","_unstable_getDelayedEvents","fromToken","_this20","_unstable_updateDelayedEvent","delayId","action","_arguments4","_this21","requestOptions","$delayId","sendReceipt","receiptType","_arguments5","_this22","unthreaded","$receiptType","$eventId","shouldAddThreadId","supportsThreads","fullBody","thread_id","threadIdForReceipt","addLocalEchoReceipt","sendReadReceipt","_arguments6","_this23","Read","hasPendingEvent","setRoomReadMarkers","rmEventId","rrEvent","rpEvent","_this24","rrEventId","rpEventId","ReadPrivate","setRoomReadMarkersHttpRequest","sendRtcDecline","notificationEventId","RTCDecline","Reference","getUrlPreview","ts","Math","floor","parsed","hash","toString","key","urlPreviewCache","resp","priority","sendTyping","isTyping","timeoutMs","typing","timeout","getRoomUpgradeHistory","verifyLinks","currentRoom","before","after","findSuccessorRooms","_room$findPredecessor","ret","seenRoomIDs","predecessorRoomId","findPredecessor","_room$findPredecessor2","has","predecessorRoom","tombstone","RoomTombstone","splice","tombstoneEvent","successorRoom","_successorRoom$findPr","roomIds","map","ref","size","invite","_arguments7","_this25","shareEncryptedHistory","_this25$cryptoBackend","shareRoomHistoryWithUser","membershipChange","inviteByEmail","email","inviteByThreePid","medium","address","_this26","_this26$identityServe","identityServerUrl","getIdentityServerUrl","params","id_server","getAccessToken","identityAccessToken","leave","Leave","leaveRoomChain","includeFuture","upgradeHistory","eligibleToLeave","populationResults","doLeave","ban","Ban","forget","_arguments8","_this27","deleteRoom","$room_id","response","removeRoom","DeleteRoom","unban","kick","$membership","getPushActionsForEvent","forceRecalculate","getPushActions","actions","rule","pushProcessor","actionsAndRuleForEvent","setPushDetails","getPushDetailsForEvent","getPushDetails","setProfileInfo","$info","setDisplayName","_this28","displayname","displayName","DisplayName","presence","setAvatarUrl","_this29","avatar_url","avatarUrl","AvatarUrl","mxcUrlToHttp","mxcUrl","width","height","resizeMethod","allowDirectLinks","allowRedirects","useAuthentication","setSyncPresence","_this30","_this30$syncApi","setPresence","_this31","validStates","indexOf","getPresence","scrollback","limit","timeToWaitMs","ongoingScrollbacks","errorTs","timeWaitedMs","now","max","oldState","paginationToken","numAdded","createMessagesRequest","Backward","_res$end","_res$end2","matrixEvents","chunk","getEventMapper","stateEvents","setUnknownStateEvents","timelineEvents","threadedEvents","unknownRelations","partitionThreadedEvents","processAggregatedTimelineEvents","addEventsToTimeline","getLiveTimeline","processThreadEvents","relations","aggregateChildEvent","end","storeEvents","getEventTimeline","timelineSet","_this32","_this32$clientOpts","_ref4","_timelineSet$getTimel","_timelineSet$room$fin","getTimelineForEvent","getThreadTimeline","lazyLoadMembers","LAZY_LOADING_MESSAGES_FILTER","mapper","events_after","reverse","events_before","timeline","getState","BACKWARDS","addTimeline","initialiseState","FORWARDS","findThreadForEvent","liveTimeline","_this33","_this33$clientOpts","canContain","recurse","RelationsRecursion","hasServerSideSupport","hasServerSideFwdPaginationSupport","_resOlder$next_batch","_resNewer$next_batch","_timelineSet$getTimel2","resOlder","fetchRelations","id","dir","resNewer","Forward","_timelineSet$thread","processEvent","next_batch","originalEvent","fetchRoomEvent","setPaginationToken","_resOlder$next_batch2","eventsNewer","nextBatch","_resNewer$next_batch2","_timelineSet$thread2","getLatestTimeline","_this34","threadListType","_res$chunk","createThreadListMessagesRequest","getFilter","_res$chunk2","_this34$clientOpts","_res2$chunk","messagesPath","_this$clientOpts","timelineFilter","_timelineFilter$getRo","getRoomTimelineFilterComponent","toJSON","_this$clientOpts2","All","include","_timelineFilter$getRo2","hasServerSideListSupport","_res$chunk3","prev_batch","paginateEventTimeline","eventTimeline","_this35","isNotifTimeline","getTimelineSet","backwards","token","getPaginationToken","pendingRequest","paginationRequests","_opts$limit","only","_ref5","next_token","notifications","i","notification","_x2","finally","roomState","processThreadRoots","_eventTimeline$getRoo","_eventTimeline$getRoo2","_ref6","getEventReadUpTo","newToken","_thread$rootEvent","_eventTimeline$getRoo3","rootEvent","_x3","it","getServerAggregatedRelation","atEnd","resetNotifTimelineSet","resetLiveTimeline","peekInRoom","_this$peekSync2","peek","setGuestAccess","writePromise","RoomGuestAccess","guest_access","allowJoin","CanJoin","Forbidden","readPromise","allowRead","RoomHistoryVisibility","history_visibility","WorldReadable","requestRegisterEmailToken","clientSecret","sendAttempt","nextLink","requestTokenFromEndpoint","client_secret","send_attempt","next_link","requestRegisterMsisdnToken","phoneCountry","phoneNumber","country","phone_number","requestAdd3pidEmailToken","requestAdd3pidMsisdnToken","requestPasswordEmailToken","requestPasswordMsisdnToken","endpoint","_this36","postParams","request","getRoomPushRule","scope","pushRules","_this$pushRules$scope","rule_id","setRoomMutePushRule","mute","hasDontNotifyRule","roomPushRule","DontNotify","deletePushRule","RoomSpecific","addPushRule","doneResolvers","getPushRules","err2","searchMessageText","roomEvents","search_term","query","search","search_categories","room_events","searchRoomEvents","term","order_by","Recent","event_context","before_limit","after_limit","include_profile","searchResults","_query","results","highlights","processRoomEventsSearch","backPaginateRoomEventsSearch","searchOpts","abortSignal","_roomEvents$results$l","_roomEvents$results","count","hl","resultsLength","sr","fromJson","context","getEvent","getTimeline","setMetadata","syncLeftRooms","syncedLeftRooms","syncLeftRoomsPromise","createFilter","filter_id","storeFilter","filterId","allowCached","$filterId","getOrCreateFilter","filterName","_this37","getFilterIdByName","existingId","existingFilter","oldDef","getDefinition","newDef","setFilterIdByName","createdFilter","getOpenIdToken","turnServer","getTurnServers","turnServers","getTurnServersExpiry","turnServersExpiry","pollingTurnServers","_this38","credentialsGood","remainingTime","uris","ttl","servers","urls","username","credential","password","TurnServers","httpStatus","TurnServersError","setFallbackICEServerAllowed","allow","isFallbackICEServerAllowed","isSynapseAdministrator","r","admin","whoisSynapseUser","deactivateSynapseUser","_this39","_this39$getDomain","clientWellKnownPromise","getRawClientConfig","clientWellKnown","ClientWellKnown","getClientWellKnown","waitForClientWellKnown","storeClientOptions","primTypes","serializableOpts","entries","_ref7","value","reduce","obj","_ref8","_unstable_getSharedRooms","_this40","sharedRoomsSupport","mutualRoomsSupport","queryMutualRoomsSupport","rooms","tokenQuery","joined","next_batch_token","_this41","serverVersionsPromise","serverVersions","isVersionSupported","_this42","versions","feature","_this43","unstableFeatures","doesServerForceEncryptionForPreset","presetName","_this44","versionsPresetName","_this45","threadUnstable","threadStable","listUnstable","listStable","fwdPaginationUnstable","fwdPaginationStable","_unused2","None","hasLazyLoadMembersEnabled","_this$clientOpts3","setCanResetTimelineCallback","cb","getCanResetTimelineCallback","relationType","_arguments9","_this46","_result$next_batch","_result$prev_batch","fetchedEventType","eventResult","allEvents","decryptEventIfNeeded","Replace","prevBatch","generateClientSecret","shouldAttemptDecryption","attemptDecryption","isBeingDecrypted","getDecryptionPromise","termsUrlForService","serviceType","IS","getUrl","V2","IM","getHomeserverUrl","_this$idBaseUrl","_this$idBaseUrl2","stripProto","setIdentityServerUrl","setIdBaseUrl","getRefreshToken","_this$http$opts$refre","setAccessToken","isLoggedIn","txnCtr","isUsernameAvailable","available","register","auth","bindThreepids","guestAccessToken","inhibitLogin","session","refresh_token","guest_access_token","inhibit_login","registerRequest","registerGuest","kind","performRefreshRequestWithPrefix","inhibitLogoutEmit","loginFlows","login","loginType","loginRequest","access_token","loginWithPassword","getCasLoginUrl","redirectUrl","getSsoLoginUrl","idpId","href","loginWithToken","_this47","logout","_arguments0","_this48","abort","deactivateAccount","erase","requestLoginToken","_this49","getFallbackAuthUrl","authSessionId","$loginType","_this50","_this50$identityServe","invitesNeedingToken","invite_3pid","id_access_token","Experimental","queryString","encodeParams","templatedUrl","$relationType","members","includeMembership","excludeMembership","atEventId","not_membership","at","upgradeRoom","newVersion","new_version","_arguments1","_this51","state_key","encryptStateEventIfNeeded","getWireStateKey","_this52","isStateEncryptionEnabledInRoom","roomInitialSync","_limit$toString","_this53","FullyRead","getJoinedRooms","getJoinedRoomMembers","publicRooms","_ref9","server","since","_objectWithoutProperties","_excluded","createAlias","alias","$alias","deleteAlias","getLocalAliases","getRoomIdForAlias","getRoomDirectoryVisibility","setRoomDirectoryVisibility","visibility","searchUserDirectory","_ref0","uploadContent","file","cancelUpload","upload","getCurrentUploads","getProfileInfo","doesServerSupportExtendedProfiles","_this54","getExtendedProfileRequestPrefix","_this55","getExtendedProfile","_this56","getExtendedProfileProperty","_this57","profile","$key","setExtendedProfileProperty","_this58","deleteExtendedProfileProperty","_this59","patchExtendedProfile","_this60","Patch","setExtendedProfile","_this61","getThreePids","addThreePidOnly","_this62","bindThreePid","_this63","unbindThreePid","_this64","deleteThreePid","setPassword","authDict","newPassword","logoutDevices","new_password","logout_devices","getDevices","getDevice","$device_id","setDeviceDetails","deleteDevice","deleteMultipleDevices","devices","getPushers","_this65","pushers","pusher","hasOwnProperty","setPusher","removePusher","pushKey","appId","pushkey","app_id","setLocalNotificationSettings","notificationSettings","rules","setPushRules","rewriteDefaultRules","updateCachedPushRuleKeys","ruleId","$kind","$ruleId","setPushRuleEnabled","enabled","setPushRuleActions","_ref1","uploadKeysRequest","uploadKeySignatures","downloadKeysForUsers","device_keys","claimOneTimeKeys","keyAlgorithm","queries","one_time_keys","getKeyChanges","oldToken","qps","to","uploadDeviceSigningKeys","registerWithIdentityServer","hsOpenIdToken","uri","requestEmailToken","idServerRequest","requestMsisdnToken","submitMsisdnToken","sid","msisdnToken","submitMsisdnTokenOtherUrl","getIdentityHashDetails","identityHashedLookup","addressPairs","_this66","hashes","localMapping","_ref10","p","addr","toLowerCase","med","hashBuffer","hashed","_x4","unhashed","foundAddresses","mxid","plainAddress","lookupThreePid","_this67","mapping","bulkLookupThreePids","_this68","v1results","_loop2","originalQuery","threepids","getIdentityAccount","sendToDevice","contentMap","messages","recursiveMapToObject","targets","deviceMessages","encryptAndSendToDevice","payload","_this69","batch","encryptToDeviceMessages","queueToDevice","queueBatch","getThirdpartyProtocols","getThirdpartyLocation","protocol","$protocol","getThirdpartyUser","getTerms","agreeToTerms","termsUrls","headers","Authorization","user_accepts","reportEvent","score","reportRoom","getRoomHierarchy","maxDepth","suggestedOnly","suggested_only","String","max_depth","unstableCreateFileTree","_this70","preset","PrivateChat","power_level_content_override","creation_content","Space","initial_state","RoomEncryption","algorithm","unstableGetFileTreeSpace","_purposeEvent$getCont","_createEvent$getConte","getMyMembership","createEvent","RoomCreate","purposeEvent","proxyBaseUrl","pos","clientTimeout","_this$clientOpts4","threadSupport","supportsIntentionalMentions","IntentionalMentions","getRoomSummary","_this71","paramOpts","toStartOfTimeline","processThreadedEvents","processBeaconEvents","processPollEvents","whoami","_this72","timestampToEvent","timestamp","_this73","getAuthMetadata","_this74","authMetadata","issuer","fromEntries","_ref11","k","v","cli","_actions$tweaks","ourUserId","findEventById","isThreadEvent","threadRootId","isThreadRoot","hasReadEvent","hasUserReadEvent","newHighlight","tweaks","highlight","newCount","getUnreadCountForEventContext","Highlight","setThreadUnreadNotificationCount","setUnreadNotificationCount","newNotify","notify","inMainTimelineForReceipt","isRelatedToRoot","relationEventId"],"sources":["../src/client.ts"],"sourcesContent":["/*\nCopyright 2015-2023 The Matrix.org Foundation C.I.C.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\n/**\n * This is an internal module. See {@link MatrixClient} for the public class.\n */\n\nimport { type Optional } from \"matrix-events-sdk\";\n\nimport type { IDeviceKeys, IOneTimeKey } from \"./@types/crypto.ts\";\nimport { type ISyncStateData, type SetPresence, SyncApi, type SyncApiOptions, SyncState } from \"./sync.ts\";\nimport {\n    EventStatus,\n    type IContent,\n    type IDecryptOptions,\n    type IEvent,\n    MatrixEvent,\n    MatrixEventEvent,\n    type MatrixEventHandlerMap,\n    type PushDetails,\n} from \"./models/event.ts\";\nimport { StubStore } from \"./store/stub.ts\";\nimport {\n    type CallEvent,\n    type CallEventHandlerMap,\n    createNewMatrixCall,\n    type MatrixCall,\n    supportsMatrixCall,\n} from \"./webrtc/call.ts\";\nimport { Filter, type IFilterDefinition, type IRoomEventFilter } from \"./filter.ts\";\nimport {\n    CallEventHandler,\n    type CallEventHandlerEvent,\n    type CallEventHandlerEventHandlerMap,\n} from \"./webrtc/callEventHandler.ts\";\nimport {\n    GroupCallEventHandler,\n    type GroupCallEventHandlerEvent,\n    type GroupCallEventHandlerEventHandlerMap,\n} from \"./webrtc/groupCallEventHandler.ts\";\nimport * as utils from \"./utils.ts\";\nimport { deepCompare, noUnsafeEventProps, type QueryDict, replaceParam, safeSet, sleep } from \"./utils.ts\";\nimport { Direction, EventTimeline } from \"./models/event-timeline.ts\";\nimport { type IActionsObject, PushProcessor } from \"./pushprocessor.ts\";\nimport { AutoDiscovery, type AutoDiscoveryAction } from \"./autodiscovery.ts\";\nimport { encodeUnpaddedBase64Url } from \"./base64.ts\";\nimport { TypedReEmitter } from \"./ReEmitter.ts\";\nimport { logger, type Logger } from \"./logger.ts\";\nimport { SERVICE_TYPES } from \"./service-types.ts\";\nimport {\n    type Body,\n    ClientPrefix,\n    type FileType,\n    type HttpApiEvent,\n    type HttpApiEventHandlerMap,\n    type HTTPError,\n    IdentityPrefix,\n    type IHttpOpts,\n    type IRequestOpts,\n    MatrixError,\n    MatrixHttpApi,\n    MediaPrefix,\n    Method,\n    retryNetworkOperation,\n    type TokenRefreshFunction,\n    type Upload,\n    type UploadOpts,\n    type UploadResponse,\n} from \"./http-api/index.ts\";\nimport { User, UserEvent, type UserEventHandlerMap } from \"./models/user.ts\";\nimport { getHttpUriForMxc } from \"./content-repo.ts\";\nimport { SearchResult } from \"./models/search-result.ts\";\nimport { type IIdentityServerProvider } from \"./@types/IIdentityServerProvider.ts\";\nimport { type MatrixScheduler } from \"./scheduler.ts\";\nimport { type BeaconEvent, type BeaconEventHandlerMap } from \"./models/beacon.ts\";\nimport { type AuthDict } from \"./interactive-auth.ts\";\nimport {\n    type IMinimalEvent,\n    type IRoomEvent,\n    type IStateEvent,\n    type ReceivedToDeviceMessage,\n} from \"./sync-accumulator.ts\";\nimport type { EventTimelineSet } from \"./models/event-timeline-set.ts\";\nimport * as ContentHelpers from \"./content-helpers.ts\";\nimport {\n    NotificationCountType,\n    type Room,\n    type RoomEvent,\n    type RoomEventHandlerMap,\n    type RoomNameState,\n} from \"./models/room.ts\";\nimport { RoomMemberEvent, type RoomMemberEventHandlerMap } from \"./models/room-member.ts\";\nimport { type IPowerLevelsContent, type RoomStateEvent, type RoomStateEventHandlerMap } from \"./models/room-state.ts\";\nimport {\n    isSendDelayedEventRequestOpts,\n    type DelayedEventInfo,\n    type IAddThreePidOnlyBody,\n    type IBindThreePidBody,\n    type IContextResponse,\n    type ICreateRoomOpts,\n    type IEventSearchOpts,\n    type IFilterResponse,\n    type IGuestAccessOpts,\n    type IJoinRoomOpts,\n    type INotificationsResponse,\n    type InviteOpts,\n    type IPaginateOpts,\n    type IPresenceOpts,\n    type IRedactOpts,\n    type IRelationsRequestOpts,\n    type IRelationsResponse,\n    type IRoomDirectoryOptions,\n    type ISearchOpts,\n    type ISendEventResponse,\n    type IStatusResponse,\n    type ITagsResponse,\n    type KnockRoomOpts,\n    type SendDelayedEventRequestOpts,\n    type SendDelayedEventResponse,\n    type UpdateDelayedEventAction,\n} from \"./@types/requests.ts\";\nimport {\n    type AccountDataEvents,\n    EventType,\n    LOCAL_NOTIFICATION_SETTINGS_PREFIX,\n    MSC3912_RELATION_BASED_REDACTIONS_PROP,\n    MsgType,\n    PUSHER_ENABLED,\n    RelationType,\n    RoomCreateTypeField,\n    RoomType,\n    type StateEvents,\n    type TimelineEvents,\n    UNSTABLE_MSC3088_ENABLED,\n    UNSTABLE_MSC3088_PURPOSE,\n    UNSTABLE_MSC3089_TREE_SUBTYPE,\n} from \"./@types/event.ts\";\nimport {\n    GuestAccess,\n    HistoryVisibility,\n    type IdServerUnbindResult,\n    type JoinRule,\n    Preset,\n    type Terms,\n    type Visibility,\n} from \"./@types/partials.ts\";\nimport { type EventMapper, eventMapperFor, type MapperOpts } from \"./event-mapper.ts\";\nimport { secureRandomString } from \"./randomstring.ts\";\nimport { DEFAULT_TREE_POWER_LEVELS_TEMPLATE, MSC3089TreeSpace } from \"./models/MSC3089TreeSpace.ts\";\nimport { type ISignatures } from \"./@types/signed.ts\";\nimport { type IStore } from \"./store/index.ts\";\nimport {\n    type IEventWithRoomId,\n    type ISearchRequestBody,\n    type ISearchResponse,\n    type ISearchResults,\n    type IStateEventWithRoomId,\n    SearchOrderBy,\n} from \"./@types/search.ts\";\nimport { type ISynapseAdminDeactivateResponse, type ISynapseAdminWhoisResponse } from \"./@types/synapse.ts\";\nimport { type IHierarchyRoom } from \"./@types/spaces.ts\";\nimport {\n    type IPusher,\n    type IPusherRequest,\n    type IPushRule,\n    type IPushRules,\n    type PushRuleAction,\n    PushRuleActionName,\n    PushRuleKind,\n    type RuleId,\n} from \"./@types/PushRules.ts\";\nimport { type IThreepid } from \"./@types/threepids.ts\";\nimport { type CryptoStore } from \"./crypto/store/base.ts\";\nimport {\n    GroupCall,\n    type GroupCallIntent,\n    type GroupCallType,\n    type IGroupCallDataChannelOptions,\n} from \"./webrtc/groupCall.ts\";\nimport { MediaHandler } from \"./webrtc/mediaHandler.ts\";\nimport {\n    type ILoginFlowsResponse,\n    type IRefreshTokenResponse,\n    type LoginRequest,\n    type LoginResponse,\n    type LoginTokenPostResponse,\n    type SSOAction,\n} from \"./@types/auth.ts\";\nimport { TypedEventEmitter } from \"./models/typed-event-emitter.ts\";\nimport { MAIN_ROOM_TIMELINE, ReceiptType } from \"./@types/read_receipts.ts\";\nimport { type MSC3575SlidingSyncRequest, type MSC3575SlidingSyncResponse, type SlidingSync } from \"./sliding-sync.ts\";\nimport { SlidingSyncSdk } from \"./sliding-sync-sdk.ts\";\nimport {\n    determineFeatureSupport,\n    FeatureSupport,\n    Thread,\n    THREAD_RELATION_TYPE,\n    ThreadFilterType,\n    threadFilterTypeToFilter,\n} from \"./models/thread.ts\";\nimport { M_BEACON_INFO, type MBeaconInfoEventContent } from \"./@types/beacon.ts\";\nimport { NamespacedValue, UnstableValue } from \"./NamespacedValue.ts\";\nimport { ToDeviceMessageQueue } from \"./ToDeviceMessageQueue.ts\";\nimport { type ToDeviceBatch, type ToDevicePayload } from \"./models/ToDeviceMessage.ts\";\nimport { IgnoredInvites } from \"./models/invites-ignorer.ts\";\nimport { type UIARequest } from \"./@types/uia.ts\";\nimport { type LocalNotificationSettings } from \"./@types/local_notifications.ts\";\nimport { buildFeatureSupportMap, Feature, ServerSupport } from \"./feature.ts\";\nimport { type CryptoBackend } from \"./common-crypto/CryptoBackend.ts\";\nimport { RUST_SDK_STORE_PREFIX } from \"./rust-crypto/constants.ts\";\nimport {\n    type CrossSigningKeyInfo,\n    type CryptoApi,\n    type CryptoCallbacks,\n    CryptoEvent,\n    type CryptoEventHandlerMap,\n} from \"./crypto-api/index.ts\";\nimport {\n    type SecretStorageKeyDescription,\n    type ServerSideSecretStorage,\n    ServerSideSecretStorageImpl,\n} from \"./secret-storage.ts\";\nimport { type RegisterRequest, type RegisterResponse } from \"./@types/registration.ts\";\nimport { MatrixRTCSessionManager } from \"./matrixrtc/MatrixRTCSessionManager.ts\";\nimport { getRelationsThreadFilter } from \"./thread-utils.ts\";\nimport { KnownMembership, type Membership } from \"./@types/membership.ts\";\nimport { type RoomMessageEventContent, type StickerEventContent } from \"./@types/events.ts\";\nimport { type ImageInfo } from \"./@types/media.ts\";\nimport { type Capabilities, ServerCapabilities } from \"./serverCapabilities.ts\";\nimport { sha256 } from \"./digest.ts\";\nimport {\n    discoverAndValidateOIDCIssuerWellKnown,\n    type OidcClientConfig,\n    validateAuthMetadataAndKeys,\n} from \"./oidc/index.ts\";\nimport { type EmptyObject } from \"./@types/common.ts\";\nimport { UnsupportedDelayedEventsEndpointError, UnsupportedStickyEventsEndpointError } from \"./errors.ts\";\n\nexport type Store = IStore;\n\nexport type ResetTimelineCallback = (roomId: string) => boolean;\n\nconst SCROLLBACK_DELAY_MS = 3000;\n\nconst TURN_CHECK_INTERVAL = 10 * 60 * 1000; // poll for turn credentials every 10 minutes\n\nexport const UNSTABLE_MSC3852_LAST_SEEN_UA = new UnstableValue(\n    \"last_seen_user_agent\",\n    \"org.matrix.msc3852.last_seen_user_agent\",\n);\n\nexport interface IKeysUploadResponse {\n    one_time_key_counts: {\n        // eslint-disable-line camelcase\n        [algorithm: string]: number;\n    };\n}\n\nexport interface ICreateClientOpts {\n    baseUrl: string;\n\n    idBaseUrl?: string;\n\n    /**\n     * The data store used for sync data from the homeserver. If not specified,\n     * this client will not store any HTTP responses. The `createClient` helper\n     * will create a default store if needed.\n     */\n    store?: Store;\n\n    /**\n     * A store to be used for end-to-end crypto session data.\n     * The `createClient` helper will create a default store if needed. Calls the factory supplied to\n     * {@link setCryptoStoreFactory} if unspecified; or if no factory has been\n     * specified, uses a default implementation (indexeddb in the browser,\n     * in-memory otherwise).\n     *\n     * This is only used for the legacy crypto implementation,\n     * but if you use the rust crypto implementation ({@link MatrixClient#initRustCrypto}) and the device\n     * previously used legacy crypto (so must be migrated), then this must still be provided, so that the\n     * data can be migrated from the legacy store.\n     */\n    cryptoStore?: CryptoStore;\n\n    /**\n     * The scheduler to use. If not\n     * specified, this client will not retry requests on failure. This client\n     * will supply its own processing function to\n     * {@link MatrixScheduler#setProcessFunction}.\n     */\n    scheduler?: MatrixScheduler;\n\n    /**\n     * The function to invoke for HTTP requests.\n     * Most supported environments have a global `fetch` registered to which this will fall back.\n     */\n    fetchFn?: typeof globalThis.fetch;\n\n    userId?: string;\n\n    /**\n     * A unique identifier for this device; used for tracking things like crypto\n     * keys and access tokens. If not specified, end-to-end encryption will be\n     * disabled.\n     */\n    deviceId?: string;\n\n    accessToken?: string;\n    refreshToken?: string;\n\n    /**\n     * Function used to attempt refreshing access and refresh tokens\n     * Called by http-api when a possibly expired token is encountered\n     * and a refreshToken is found\n     */\n    tokenRefreshFunction?: TokenRefreshFunction;\n\n    /**\n     * Identity server provider to retrieve the user's access token when accessing\n     * the identity server. See also https://github.com/vector-im/element-web/issues/10615\n     * which seeks to replace the previous approach of manual access tokens params\n     * with this callback throughout the SDK.\n     */\n    identityServer?: IIdentityServerProvider;\n\n    /**\n     * The default maximum amount of\n     * time to wait before timing out HTTP requests. If not specified, there is no timeout.\n     */\n    localTimeoutMs?: number;\n\n    /**\n     * Set to false to send the access token to the server via a query parameter rather\n     * than the Authorization HTTP header.\n     *\n     * Note that as of v1.11 of the Matrix spec, sending the access token via a query\n     * is deprecated.\n     *\n     * Default true.\n     */\n    useAuthorizationHeader?: boolean;\n\n    /**\n     * Set to true to enable\n     * improved timeline support, see {@link MatrixClient#getEventTimeline}.\n     * It is disabled by default for compatibility with older clients - in particular to\n     * maintain support for back-paginating the live timeline after a '/sync'\n     * result with a gap.\n     */\n    timelineSupport?: boolean;\n\n    /**\n     * Extra query parameters to append\n     * to all requests with this client. Useful for application services which require\n     * `?user_id=`.\n     */\n    queryParams?: QueryDict;\n\n    /**\n     * Encryption key used for encrypting sensitive data (such as e2ee keys) in {@link ICreateClientOpts#cryptoStore}.\n     *\n     * This must be set to the same value every time the client is initialised for the same device.\n     *\n     * This is only used for the legacy crypto implementation,\n     * but if you use the rust crypto implementation ({@link MatrixClient#initRustCrypto}) and the device\n     * previously used legacy crypto (so must be migrated), then this must still be provided, so that the\n     * data can be migrated from the legacy store.\n     */\n    pickleKey?: string;\n\n    /**\n     * Verification methods we should offer to the other side when performing an interactive verification.\n     * If unset, we will offer all known methods. Currently these are: showing a QR code, scanning a QR code, and SAS\n     * (aka \"emojis\").\n     *\n     * See {@link types.VerificationMethod} for a set of useful constants for this parameter.\n     */\n    verificationMethods?: Array<string>;\n\n    /**\n     * Whether relaying calls through a TURN server should be forced. Default false.\n     */\n    forceTURN?: boolean;\n\n    /**\n     * Up to this many ICE candidates will be gathered when an incoming call arrives.\n     * Gathering does not send data to the caller, but will communicate with the configured TURN\n     * server. Default 0.\n     */\n    iceCandidatePoolSize?: number;\n\n    /**\n     * True to advertise support for call transfers to other parties on Matrix calls. Default false.\n     */\n    supportsCallTransfer?: boolean;\n\n    /**\n     * Whether to allow a fallback ICE server should be used for negotiating a\n     * WebRTC connection if the homeserver doesn't provide any servers. Defaults to false.\n     */\n    fallbackICEServerAllowed?: boolean;\n\n    /**\n     * If true, to-device signalling for group calls will be encrypted\n     * with Olm. Default: true.\n     */\n    useE2eForGroupCall?: boolean;\n\n    livekitServiceURL?: string;\n\n    /**\n     * Crypto callbacks provided by the application\n     */\n    cryptoCallbacks?: CryptoCallbacks;\n\n    /**\n     * Enable encrypted state events.\n     */\n    enableEncryptedStateEvents?: boolean;\n\n    /**\n     * Method to generate room names for empty rooms and rooms names based on membership.\n     * Defaults to a built-in English handler with basic pluralisation.\n     */\n    roomNameGenerator?: (roomId: string, state: RoomNameState) => string | null;\n\n    /**\n     * If true, participant can join group call without video and audio this has to be allowed. By default, a local\n     * media stream is needed to establish a group call.\n     * Default: false.\n     */\n    isVoipWithNoMediaAllowed?: boolean;\n\n    /**\n     * Disable VoIP support (prevents fetching TURN servers, etc.)\n     * Default: false (VoIP enabled)\n     */\n    disableVoip?: boolean;\n\n    /**\n     * If true, group calls will not establish media connectivity and only create the signaling events,\n     * so that livekit media can be used in the application layer (js-sdk contains no livekit code).\n     */\n    useLivekitForGroupCalls?: boolean;\n\n    /**\n     * A logger to associate with this MatrixClient.\n     * Defaults to the built-in global logger; see {@link DebugLogger} for an alternative.\n     */\n    logger?: Logger;\n}\n\nexport interface IMatrixClientCreateOpts extends ICreateClientOpts {\n    /**\n     * Whether to allow sending messages to encrypted rooms when encryption\n     * is not available internally within this SDK. This is useful if you are using an external\n     * E2E proxy, for example. Defaults to false.\n     */\n    usingExternalCrypto?: boolean;\n}\n\nexport enum PendingEventOrdering {\n    Chronological = \"chronological\",\n    Detached = \"detached\",\n}\n\nexport interface IStartClientOpts {\n    /**\n     * The event `limit=` to apply to initial sync. Default: 8.\n     */\n    initialSyncLimit?: number;\n\n    /**\n     * True to put `archived=true</code> on the <code>/initialSync` request. Default: false.\n     */\n    includeArchivedRooms?: boolean;\n\n    /**\n     * True to do /profile requests on every invite event if the displayname/avatar_url is not known for this user ID. Default: false.\n     */\n    resolveInvitesToProfiles?: boolean;\n\n    /**\n     * Controls where pending messages appear in a room's timeline. If \"<b>chronological</b>\", messages will\n     * appear in the timeline when the call to `sendEvent` was made. If \"<b>detached</b>\",\n     * pending messages will appear in a separate list, accessible via {@link Room#getPendingEvents}.\n     * Default: \"chronological\".\n     */\n    pendingEventOrdering?: PendingEventOrdering;\n\n    /**\n     * The number of milliseconds to wait on /sync. Default: 30000 (30 seconds).\n     */\n    pollTimeout?: number;\n\n    /**\n     * The filter to apply to /sync calls.\n     */\n    filter?: Filter;\n\n    /**\n     * True to perform syncing without automatically updating presence.\n     */\n    disablePresence?: boolean;\n\n    /**\n     * True to not load all membership events during initial sync but fetch them when needed by calling\n     * `loadOutOfBandMembers` This will override the filter option at this moment.\n     */\n    lazyLoadMembers?: boolean;\n\n    /**\n     * The number of seconds between polls to /.well-known/matrix/client, undefined to disable.\n     * This should be in the order of hours. Default: undefined.\n     */\n    clientWellKnownPollPeriod?: number;\n\n    /**\n     * Will organises events in threaded conversations when\n     * a thread relation is encountered\n     */\n    threadSupport?: boolean;\n\n    /**\n     * @experimental\n     */\n    slidingSync?: SlidingSync;\n}\n\nexport interface IStoredClientOpts extends IStartClientOpts {}\n\nexport const GET_LOGIN_TOKEN_CAPABILITY = new NamespacedValue(\n    \"m.get_login_token\",\n    \"org.matrix.msc3882.get_login_token\",\n);\n\nexport const UNSTABLE_MSC2666_SHARED_ROOMS = \"uk.half-shot.msc2666\";\nexport const UNSTABLE_MSC2666_MUTUAL_ROOMS = \"uk.half-shot.msc2666.mutual_rooms\";\nexport const UNSTABLE_MSC2666_QUERY_MUTUAL_ROOMS = \"uk.half-shot.msc2666.query_mutual_rooms\";\n\nexport const UNSTABLE_MSC4140_DELAYED_EVENTS = \"org.matrix.msc4140\";\nexport const UNSTABLE_MSC4354_STICKY_EVENTS = \"org.matrix.msc4354\";\n\nexport const UNSTABLE_MSC4133_EXTENDED_PROFILES = \"uk.tcpip.msc4133\";\nexport const STABLE_MSC4133_EXTENDED_PROFILES = \"uk.tcpip.msc4133.stable\";\n\nenum CrossSigningKeyType {\n    MasterKey = \"master_key\",\n    SelfSigningKey = \"self_signing_key\",\n    UserSigningKey = \"user_signing_key\",\n}\n\nexport type CrossSigningKeys = Record<CrossSigningKeyType, CrossSigningKeyInfo>;\n\nexport type SendToDeviceContentMap = Map<string, Map<string, Record<string, any>>>;\n\nexport interface ISignedKey {\n    keys: Record<string, string>;\n    signatures: ISignatures;\n    user_id: string;\n    algorithms: string[];\n    device_id: string;\n}\n\nexport type KeySignatures = Record<string, Record<string, CrossSigningKeyInfo | ISignedKey>>;\nexport interface IUploadKeySignaturesResponse {\n    failures: Record<\n        string,\n        Record<\n            string,\n            {\n                errcode: string;\n                error: string;\n            }\n        >\n    >;\n}\n\nexport interface IPreviewUrlResponse {\n    [key: string]: undefined | string | number;\n    \"og:title\": string;\n    \"og:type\": string;\n    \"og:url\": string;\n    \"og:image\"?: string;\n    \"og:image:type\"?: string;\n    \"og:image:height\"?: number;\n    \"og:image:width\"?: number;\n    \"og:description\"?: string;\n    \"matrix:image:size\"?: number;\n}\n\nexport interface ITurnServerResponse {\n    uris: string[];\n    username: string;\n    password: string;\n    ttl: number;\n}\n\nexport interface ITurnServer {\n    urls: string[];\n    username: string;\n    credential: string;\n}\n\nexport interface IServerVersions {\n    versions: string[];\n    unstable_features: Record<string, boolean>;\n}\n\nexport interface IClientWellKnown {\n    [key: string]: any;\n    \"m.homeserver\"?: IWellKnownConfig;\n    \"m.identity_server\"?: IWellKnownConfig;\n}\n\nexport interface IWellKnownConfig<T = IClientWellKnown> {\n    raw?: T;\n    action?: AutoDiscoveryAction;\n    reason?: string;\n    error?: Error | string;\n    // eslint-disable-next-line\n    base_url?: string | null;\n    // XXX: this is undocumented\n    server_name?: string;\n}\n\ninterface IKeyBackupPath {\n    path: string;\n    queryData?: {\n        version: string;\n    };\n}\n\ninterface IMediaConfig {\n    [key: string]: any; // extensible\n    \"m.upload.size\"?: number;\n}\n\ninterface IThirdPartySigned {\n    sender: string;\n    mxid: string;\n    token: string;\n    signatures: ISignatures;\n}\n\ninterface IJoinRequestBody {\n    third_party_signed?: IThirdPartySigned;\n}\n\ninterface ITagMetadata {\n    [key: string]: any;\n    order?: number;\n}\n\ninterface IMessagesResponse {\n    start?: string;\n    end?: string;\n    chunk: IRoomEvent[];\n    state?: IStateEvent[];\n}\n\ninterface IThreadedMessagesResponse {\n    prev_batch: string;\n    next_batch: string;\n    chunk: IRoomEvent[];\n    state: IStateEvent[];\n}\n\nexport interface IRequestTokenResponse {\n    sid: string;\n    submit_url?: string;\n}\n\nexport interface IRequestMsisdnTokenResponse extends IRequestTokenResponse {\n    msisdn: string;\n    success: boolean;\n    intl_fmt: string;\n}\n\nexport interface IUploadKeysRequest {\n    \"device_keys\"?: Required<IDeviceKeys>;\n    \"one_time_keys\"?: Record<string, IOneTimeKey>;\n    \"org.matrix.msc2732.fallback_keys\"?: Record<string, IOneTimeKey>;\n}\n\nexport interface IQueryKeysRequest {\n    device_keys: { [userId: string]: string[] };\n    timeout?: number;\n    token?: string;\n}\n\nexport interface IClaimKeysRequest {\n    one_time_keys: { [userId: string]: { [deviceId: string]: string } };\n    timeout?: number;\n}\n\nexport interface IOpenIDToken {\n    access_token: string;\n    token_type: \"Bearer\" | string;\n    matrix_server_name: string;\n    expires_in: number;\n}\n\ninterface IRoomInitialSyncResponse {\n    room_id: string;\n    membership: Membership;\n    messages?: {\n        start?: string;\n        end?: string;\n        chunk: IEventWithRoomId[];\n    };\n    state?: IStateEventWithRoomId[];\n    visibility: Visibility;\n    account_data?: IMinimalEvent[];\n    presence: Partial<IEvent>; // legacy and undocumented, api is deprecated so this won't get attention\n}\n\ninterface IJoinedRoomsResponse {\n    joined_rooms: string[];\n}\n\ninterface IJoinedMembersResponse {\n    joined: {\n        [userId: string]: {\n            display_name: string;\n            avatar_url: string;\n        };\n    };\n}\n\n// Re-export for backwards compatibility\nexport type IRegisterRequestParams = RegisterRequest;\n\nexport interface IPublicRoomsChunkRoom {\n    room_id: string;\n    name?: string;\n    avatar_url?: string;\n    topic?: string;\n    canonical_alias?: string;\n    aliases?: string[];\n    world_readable: boolean;\n    guest_can_join: boolean;\n    num_joined_members: number;\n    room_type?: RoomType | string; // Added by MSC3827\n    join_rule?: JoinRule.Knock | JoinRule.Public; // Added by MSC2403\n}\n\ninterface IPublicRoomsResponse {\n    chunk: IPublicRoomsChunkRoom[];\n    next_batch?: string;\n    prev_batch?: string;\n    total_room_count_estimate?: number;\n}\n\ninterface IUserDirectoryResponse {\n    results: {\n        user_id: string;\n        display_name?: string;\n        avatar_url?: string;\n    }[];\n    limited: boolean;\n}\n\nexport interface IMyDevice {\n    \"device_id\": string;\n    \"display_name\"?: string;\n    \"last_seen_ip\"?: string;\n    \"last_seen_ts\"?: number;\n    // UNSTABLE_MSC3852_LAST_SEEN_UA\n    \"last_seen_user_agent\"?: string;\n    \"org.matrix.msc3852.last_seen_user_agent\"?: string;\n}\n\nexport interface Keys {\n    keys: { [keyId: string]: string };\n    usage: string[];\n    user_id: string;\n}\n\nexport interface SigningKeys extends Keys {\n    signatures: ISignatures;\n}\n\nexport interface DeviceKeys {\n    [deviceId: string]: IDeviceKeys & {\n        unsigned?: {\n            device_display_name: string;\n        };\n    };\n}\n\nexport interface IDownloadKeyResult {\n    failures: { [serverName: string]: object };\n    device_keys: { [userId: string]: DeviceKeys };\n    // the following three fields were added in 1.1\n    master_keys?: { [userId: string]: Keys };\n    self_signing_keys?: { [userId: string]: SigningKeys };\n    user_signing_keys?: { [userId: string]: SigningKeys };\n}\n\nexport interface IClaimOTKsResult {\n    failures: { [serverName: string]: object };\n    one_time_keys: {\n        [userId: string]: {\n            [deviceId: string]: {\n                [keyId: string]: {\n                    key: string;\n                    signatures: ISignatures;\n                };\n            };\n        };\n    };\n}\n\nexport interface IFieldType {\n    regexp: string;\n    placeholder: string;\n}\n\nexport interface IInstance {\n    desc: string;\n    icon?: string;\n    fields: object;\n    network_id: string;\n    // XXX: this is undocumented but we rely on it: https://github.com/matrix-org/matrix-doc/issues/3203\n    instance_id: string;\n}\n\nexport interface IProtocol {\n    user_fields: string[];\n    location_fields: string[];\n    icon: string;\n    field_types: Record<string, IFieldType>;\n    instances: IInstance[];\n}\n\ninterface IThirdPartyLocation {\n    alias: string;\n    protocol: string;\n    fields: object;\n}\n\ninterface IThirdPartyUser {\n    userid: string;\n    protocol: string;\n    fields: object;\n}\n\n/**\n * The summary of a room as defined by an initial version of MSC3266 and implemented in Synapse\n * Proposed at https://github.com/matrix-org/matrix-doc/pull/3266\n */\nexport interface RoomSummary extends Omit<IPublicRoomsChunkRoom, \"canonical_alias\" | \"aliases\"> {\n    /**\n     * The current membership of this user in the room.\n     * Usually \"leave\" if the room is fetched over federation.\n     */\n    \"membership\"?: Membership;\n    /**\n     * Version of the room.\n     */\n    \"im.nheko.summary.room_version\"?: string;\n    /**\n     * The encryption algorithm used for this room, if the room is encrypted.\n     */\n    \"im.nheko.summary.encryption\"?: string;\n}\n\ninterface IRoomHierarchy {\n    rooms: IHierarchyRoom[];\n    next_batch?: string;\n}\n\nexport interface TimestampToEventResponse {\n    event_id: string;\n    origin_server_ts: number;\n}\n\ninterface IWhoamiResponse {\n    user_id: string;\n    device_id?: string;\n    is_guest?: boolean;\n}\n/* eslint-enable camelcase */\n\n// We're using this constant for methods overloading and inspect whether a variable\n// contains an eventId or not. This was required to ensure backwards compatibility\n// of methods for threads\n// Probably not the most graceful solution but does a good enough job for now\nconst EVENT_ID_PREFIX = \"$\";\n\nexport enum ClientEvent {\n    /**\n     * Fires whenever the SDK's syncing state is updated. The state can be one of:\n     * <ul>\n     *\n     * <li>PREPARED: The client has synced with the server at least once and is\n     * ready for methods to be called on it. This will be immediately followed by\n     * a state of SYNCING. <i>This is the equivalent of \"syncComplete\" in the\n     * previous API.</i></li>\n     *\n     * <li>CATCHUP: The client has detected the connection to the server might be\n     * available again and will now try to do a sync again. As this sync might take\n     * a long time (depending how long ago was last synced, and general server\n     * performance) the client is put in this mode so the UI can reflect trying\n     * to catch up with the server after losing connection.</li>\n     *\n     * <li>SYNCING : The client is currently polling for new events from the server.\n     * This will be called <i>after</i> processing latest events from a sync.</li>\n     *\n     * <li>ERROR : The client has had a problem syncing with the server. If this is\n     * called <i>before</i> PREPARED then there was a problem performing the initial\n     * sync. If this is called <i>after</i> PREPARED then there was a problem polling\n     * the server for updates. This may be called multiple times even if the state is\n     * already ERROR. <i>This is the equivalent of \"syncError\" in the previous\n     * API.</i></li>\n     *\n     * <li>RECONNECTING: The sync connection has dropped, but not (yet) in a way that\n     * should be considered erroneous.\n     * </li>\n     *\n     * <li>STOPPED: The client has stopped syncing with server due to stopClient\n     * being called.\n     * </li>\n     * </ul>\n     * State transition diagram:\n     * ```\n     *                                          +---->STOPPED\n     *                                          |\n     *              +----->PREPARED -------> SYNCING <--+\n     *              |                        ^  |  ^    |\n     *              |      CATCHUP ----------+  |  |    |\n     *              |        ^                  V  |    |\n     *   null ------+        |  +------- RECONNECTING   |\n     *              |        V  V                       |\n     *              +------->ERROR ---------------------+\n     *\n     * NB: 'null' will never be emitted by this event.\n     *\n     * ```\n     * Transitions:\n     * <ul>\n     *\n     * <li>`null -> PREPARED` : Occurs when the initial sync is completed\n     * first time. This involves setting up filters and obtaining push rules.\n     *\n     * <li>`null -> ERROR` : Occurs when the initial sync failed first time.\n     *\n     * <li>`ERROR -> PREPARED` : Occurs when the initial sync succeeds\n     * after previously failing.\n     *\n     * <li>`PREPARED -> SYNCING` : Occurs immediately after transitioning\n     * to PREPARED. Starts listening for live updates rather than catching up.\n     *\n     * <li>`SYNCING -> RECONNECTING` : Occurs when the live update fails.\n     *\n     * <li>`RECONNECTING -> RECONNECTING` : Can occur if the update calls\n     * continue to fail, but the keepalive calls (to /versions) succeed.\n     *\n     * <li>`RECONNECTING -> ERROR` : Occurs when the keepalive call also fails\n     *\n     * <li>`ERROR -> SYNCING` : Occurs when the client has performed a\n     * live update after having previously failed.\n     *\n     * <li>`ERROR -> ERROR` : Occurs when the client has failed to keepalive\n     * for a second time or more.</li>\n     *\n     * <li>`SYNCING -> SYNCING` : Occurs when the client has performed a live\n     * update. This is called <i>after</i> processing.</li>\n     *\n     * <li>`* -> STOPPED` : Occurs once the client has stopped syncing or\n     * trying to sync after stopClient has been called.</li>\n     * </ul>\n     *\n     * The payloads consits of the following 3 parameters:\n     *\n     * - state - An enum representing the syncing state. One of \"PREPARED\",\n     * \"SYNCING\", \"ERROR\", \"STOPPED\".\n     *\n     * - prevState - An enum representing the previous syncing state.\n     * One of \"PREPARED\", \"SYNCING\", \"ERROR\", \"STOPPED\" <b>or null</b>.\n     *\n     * - data - Data about this transition.\n     *\n     * @example\n     * ```\n     * matrixClient.on(\"sync\", function(state, prevState, data) {\n     *   switch (state) {\n     *     case \"ERROR\":\n     *       // update UI to say \"Connection Lost\"\n     *       break;\n     *     case \"SYNCING\":\n     *       // update UI to remove any \"Connection Lost\" message\n     *       break;\n     *     case \"PREPARED\":\n     *       // the client instance is ready to be queried.\n     *       var rooms = matrixClient.getRooms();\n     *       break;\n     *   }\n     * });\n     * ```\n     */\n    Sync = \"sync\",\n    /**\n     * Fires whenever the SDK receives a new event.\n     * <p>\n     * This is only fired for live events received via /sync - it is not fired for\n     * events received over context, search, or pagination APIs.\n     *\n     * The payload is the matrix event which caused this event to fire.\n     * @example\n     * ```\n     * matrixClient.on(\"event\", function(event){\n     *   var sender = event.getSender();\n     * });\n     * ```\n     */\n    Event = \"event\",\n    /** @deprecated Use {@link ReceivedToDeviceMessage}.\n     * Fires whenever the SDK receives a new to-device event.\n     * The payload is the matrix event ({@link MatrixEvent}) which caused this event to fire.\n     * @example\n     * ```\n     * matrixClient.on(\"toDeviceEvent\", function(event){\n     *   var sender = event.getSender();\n     * });\n     * ```\n     */\n    ToDeviceEvent = \"toDeviceEvent\",\n    /**\n     * Fires whenever the SDK receives a new (potentially decrypted) to-device message.\n     * The payload is the to-device message and the encryption info for that message ({@link ReceivedToDeviceMessage}).\n     * @example\n     * ```\n     * matrixClient.on(\"receivedToDeviceMessage\", function(payload){\n     *   const { message, encryptionInfo } = payload;\n     *   var claimed_sender = encryptionInfo ? encryptionInfo.sender : message.sender;\n     *   var isVerified = encryptionInfo ? encryptionInfo.verified : false;\n     *   var type = message.type;\n     * });\n     */\n    ReceivedToDeviceMessage = \"receivedToDeviceMessage\",\n    /**\n     * Fires whenever new user-scoped account_data is added.\n     * The payload is a pair of event ({@link MatrixEvent}) describing the account_data just added, and the previous event, if known:\n     *  - event: The event describing the account_data just added\n     *  - oldEvent: The previous account data, if known.\n     * @example\n     * ```\n     * matrixClient.on(\"accountData\", function(event, oldEvent){\n     *   myAccountData[event.type] = event.content;\n     * });\n     * ```\n     */\n    AccountData = \"accountData\",\n    /**\n     * Fires whenever a new Room is added. This will fire when you are invited to a\n     * room, as well as when you join a room. <strong>This event is experimental and\n     * may change.</strong>\n     *\n     * The payload is the newly created room, fully populated.\n     * @example\n     * ```\n     * matrixClient.on(\"Room\", function(room){\n     *   var roomId = room.roomId;\n     * });\n     * ```\n     */\n    Room = \"Room\",\n    /**\n     * Fires whenever a Room is removed. This will fire when you forget a room.\n     * <strong>This event is experimental and may change.</strong>\n     * The payload is the roomId of the deleted room.\n     * @example\n     * ```\n     * matrixClient.on(\"deleteRoom\", function(roomId){\n     *   // update UI from getRooms()\n     * });\n     * ```\n     */\n    DeleteRoom = \"deleteRoom\",\n    SyncUnexpectedError = \"sync.unexpectedError\",\n    /**\n     * Fires when the client .well-known info is fetched.\n     * The payload is the JSON object (see {@link IClientWellKnown}) returned by the server\n     */\n    ClientWellKnown = \"WellKnown.client\",\n    ReceivedVoipEvent = \"received_voip_event\",\n    TurnServers = \"turnServers\",\n    TurnServersError = \"turnServers.error\",\n}\n\ntype RoomEvents =\n    | RoomEvent.Name\n    | RoomEvent.Redaction\n    | RoomEvent.RedactionCancelled\n    | RoomEvent.Receipt\n    | RoomEvent.Tags\n    | RoomEvent.LocalEchoUpdated\n    | RoomEvent.HistoryImportedWithinTimeline\n    | RoomEvent.AccountData\n    | RoomEvent.MyMembership\n    | RoomEvent.Timeline\n    | RoomEvent.TimelineReset;\n\ntype RoomStateEvents =\n    | RoomStateEvent.Events\n    | RoomStateEvent.Members\n    | RoomStateEvent.NewMember\n    | RoomStateEvent.Update\n    | RoomStateEvent.Marker;\n\ntype CryptoEvents = (typeof CryptoEvent)[keyof typeof CryptoEvent];\n\ntype MatrixEventEvents = MatrixEventEvent.Decrypted | MatrixEventEvent.Replaced | MatrixEventEvent.VisibilityChange;\n\ntype RoomMemberEvents =\n    | RoomMemberEvent.Name\n    | RoomMemberEvent.Typing\n    | RoomMemberEvent.PowerLevel\n    | RoomMemberEvent.Membership;\n\ntype UserEvents =\n    | UserEvent.AvatarUrl\n    | UserEvent.DisplayName\n    | UserEvent.Presence\n    | UserEvent.CurrentlyActive\n    | UserEvent.LastPresenceTs;\n\nexport type EmittedEvents =\n    | ClientEvent\n    | RoomEvents\n    | RoomStateEvents\n    | CryptoEvents\n    | MatrixEventEvents\n    | RoomMemberEvents\n    | UserEvents\n    | CallEvent // re-emitted by call.ts using Object.values\n    | CallEventHandlerEvent.Incoming\n    | GroupCallEventHandlerEvent.Incoming\n    | GroupCallEventHandlerEvent.Outgoing\n    | GroupCallEventHandlerEvent.Ended\n    | GroupCallEventHandlerEvent.Participants\n    | HttpApiEvent.SessionLoggedOut\n    | HttpApiEvent.NoConsent\n    | BeaconEvent;\n\nexport type ClientEventHandlerMap = {\n    [ClientEvent.Sync]: (state: SyncState, prevState: SyncState | null, data?: ISyncStateData) => void;\n    [ClientEvent.Event]: (event: MatrixEvent) => void;\n    [ClientEvent.ToDeviceEvent]: (event: MatrixEvent) => void;\n    [ClientEvent.ReceivedToDeviceMessage]: (payload: ReceivedToDeviceMessage) => void;\n    [ClientEvent.AccountData]: (event: MatrixEvent, lastEvent?: MatrixEvent) => void;\n    [ClientEvent.Room]: (room: Room) => void;\n    [ClientEvent.DeleteRoom]: (roomId: string) => void;\n    [ClientEvent.SyncUnexpectedError]: (error: Error) => void;\n    [ClientEvent.ClientWellKnown]: (data: IClientWellKnown) => void;\n    [ClientEvent.ReceivedVoipEvent]: (event: MatrixEvent) => void;\n    [ClientEvent.TurnServers]: (servers: ITurnServer[]) => void;\n    [ClientEvent.TurnServersError]: (error: Error, fatal: boolean) => void;\n} & RoomEventHandlerMap &\n    RoomStateEventHandlerMap &\n    CryptoEventHandlerMap &\n    MatrixEventHandlerMap &\n    RoomMemberEventHandlerMap &\n    UserEventHandlerMap &\n    CallEventHandlerEventHandlerMap &\n    GroupCallEventHandlerEventHandlerMap &\n    CallEventHandlerMap &\n    HttpApiEventHandlerMap &\n    BeaconEventHandlerMap;\n\nconst SSO_ACTION_PARAM = new UnstableValue(\"action\", \"org.matrix.msc3824.action\");\n\n/**\n * Represents a Matrix Client. Only directly construct this if you want to use\n * custom modules. Normally, {@link createClient} should be used\n * as it specifies 'sensible' defaults for these modules.\n */\nexport class MatrixClient extends TypedEventEmitter<EmittedEvents, ClientEventHandlerMap> {\n    public static readonly RESTORE_BACKUP_ERROR_BAD_KEY = \"RESTORE_BACKUP_ERROR_BAD_KEY\";\n\n    private readonly logger: Logger;\n\n    public reEmitter = new TypedReEmitter<EmittedEvents, ClientEventHandlerMap>(this);\n    public olmVersion: [number, number, number] | null = null; // populated after initLegacyCrypto\n    public usingExternalCrypto = false;\n    private _store!: Store;\n    public deviceId: string | null;\n    public credentials: { userId: string | null };\n\n    /**\n     * Encryption key used for encrypting sensitive data (such as e2ee keys) in storage.\n     *\n     * As supplied in the constructor via {@link IMatrixClientCreateOpts#pickleKey}.\n     * Used for migration from the legacy crypto to the rust crypto\n     */\n    private readonly legacyPickleKey?: string;\n\n    public scheduler?: MatrixScheduler;\n    public clientRunning = false;\n    public timelineSupport = false;\n    public urlPreviewCache: { [key: string]: Promise<IPreviewUrlResponse> } = {};\n    public identityServer?: IIdentityServerProvider;\n    public http: MatrixHttpApi<IHttpOpts & { onlyData: true }>; // XXX: Intended private, used in code.\n\n    private cryptoBackend?: CryptoBackend; // one of crypto or rustCrypto\n    private readonly enableEncryptedStateEvents: boolean;\n    public cryptoCallbacks: CryptoCallbacks; // XXX: Intended private, used in code.\n    public callEventHandler?: CallEventHandler; // XXX: Intended private, used in code.\n    public groupCallEventHandler?: GroupCallEventHandler;\n    public supportsCallTransfer = false; // XXX: Intended private, used in code.\n    public forceTURN = false; // XXX: Intended private, used in code.\n    public iceCandidatePoolSize = 0; // XXX: Intended private, used in code.\n    public idBaseUrl?: string;\n    public baseUrl: string;\n    public readonly isVoipWithNoMediaAllowed;\n    public disableVoip: boolean;\n\n    public useLivekitForGroupCalls: boolean;\n\n    // Note: these are all `protected` to let downstream consumers make mistakes if they want to.\n    // We don't technically support this usage, but have reasons to do this.\n\n    protected canSupportVoip = false;\n    protected peekSync: SyncApi | null = null;\n    protected isGuestAccount = false;\n    protected ongoingScrollbacks: { [roomId: string]: { promise?: Promise<Room>; errorTs?: number } } = {};\n    protected notifTimelineSet: EventTimelineSet | null = null;\n\n    /**\n     * Legacy crypto store used for migration from the legacy crypto to the rust crypto\n     * @private\n     */\n    private readonly legacyCryptoStore?: CryptoStore;\n    protected verificationMethods?: string[];\n    protected fallbackICEServerAllowed = false;\n    protected syncApi?: SlidingSyncSdk | SyncApi;\n    public roomNameGenerator?: ICreateClientOpts[\"roomNameGenerator\"];\n    public pushRules?: IPushRules;\n    protected syncLeftRoomsPromise?: Promise<Room[]>;\n    protected syncedLeftRooms = false;\n    protected clientOpts?: IStoredClientOpts;\n    protected clientWellKnownIntervalID?: ReturnType<typeof setInterval>;\n    protected canResetTimelineCallback?: ResetTimelineCallback;\n\n    public canSupport = new Map<Feature, ServerSupport>();\n\n    // The pushprocessor caches useful things, so keep one and re-use it\n    public readonly pushProcessor = new PushProcessor(this);\n\n    // Promise to a response of the server's /versions response\n    // TODO: This should expire: https://github.com/matrix-org/matrix-js-sdk/issues/1020\n    protected serverVersionsPromise?: Promise<IServerVersions>;\n\n    protected clientWellKnown?: IClientWellKnown;\n    protected clientWellKnownPromise?: Promise<IClientWellKnown>;\n    protected turnServers: ITurnServer[] = [];\n    protected turnServersExpiry = 0;\n    protected checkTurnServersIntervalID?: ReturnType<typeof setInterval>;\n    protected txnCtr = 0;\n    protected mediaHandler = new MediaHandler(this);\n    protected sessionId: string;\n\n    /** IDs of events which are currently being encrypted.\n     *\n     * This is part of the cancellation mechanism: if the event is no longer listed here when encryption completes,\n     * that tells us that it has been cancelled, and we should not send it.\n     */\n    private eventsBeingEncrypted = new Set<string>();\n\n    private useE2eForGroupCall = true;\n    private toDeviceMessageQueue: ToDeviceMessageQueue;\n    public livekitServiceURL?: string;\n\n    private _secretStorage: ServerSideSecretStorageImpl;\n\n    // A manager for determining which invites should be ignored.\n    public readonly ignoredInvites: IgnoredInvites;\n\n    public readonly matrixRTC: MatrixRTCSessionManager;\n\n    private serverCapabilitiesService: ServerCapabilities;\n\n    public constructor(opts: IMatrixClientCreateOpts) {\n        super();\n\n        // If a custom logger is provided, use it. Otherwise, default to the global\n        // one in logger.ts.\n        this.logger = opts.logger ?? logger;\n\n        opts.baseUrl = utils.ensureNoTrailingSlash(opts.baseUrl);\n        opts.idBaseUrl = utils.ensureNoTrailingSlash(opts.idBaseUrl);\n\n        this.baseUrl = opts.baseUrl;\n        this.idBaseUrl = opts.idBaseUrl;\n        this.identityServer = opts.identityServer;\n\n        this.usingExternalCrypto = opts.usingExternalCrypto ?? false;\n        this.store = opts.store || new StubStore();\n        this.deviceId = opts.deviceId || null;\n        this.sessionId = secureRandomString(10);\n\n        const userId = opts.userId || null;\n        this.credentials = { userId };\n\n        this.http = new MatrixHttpApi(this as ConstructorParameters<typeof MatrixHttpApi>[0], {\n            fetchFn: opts.fetchFn,\n            baseUrl: opts.baseUrl,\n            idBaseUrl: opts.idBaseUrl,\n            accessToken: opts.accessToken,\n            refreshToken: opts.refreshToken,\n            tokenRefreshFunction: opts.tokenRefreshFunction,\n            prefix: ClientPrefix.V3,\n            onlyData: true,\n            extraParams: opts.queryParams,\n            localTimeoutMs: opts.localTimeoutMs,\n            useAuthorizationHeader: opts.useAuthorizationHeader,\n            logger: this.logger,\n        });\n\n        if (opts.pickleKey) {\n            this.legacyPickleKey = opts.pickleKey;\n        }\n\n        this.useLivekitForGroupCalls = Boolean(opts.useLivekitForGroupCalls);\n\n        this.scheduler = opts.scheduler;\n        if (this.scheduler) {\n            this.scheduler.setProcessFunction(async (eventToSend: MatrixEvent) => {\n                const room = this.getRoom(eventToSend.getRoomId());\n                if (eventToSend.status !== EventStatus.SENDING) {\n                    this.updatePendingEventStatus(room, eventToSend, EventStatus.SENDING);\n                }\n                const res = await this.sendEventHttpRequest(eventToSend);\n                if (room) {\n                    // ensure we update pending event before the next scheduler run so that any listeners to event id\n                    // updates on the synchronous event emitter get a chance to run first.\n                    room.updatePendingEvent(eventToSend, EventStatus.SENT, res.event_id);\n                }\n                return res;\n            });\n        }\n\n        this.disableVoip = opts.disableVoip ?? false;\n\n        if (!this.disableVoip && supportsMatrixCall()) {\n            this.callEventHandler = new CallEventHandler(this);\n            this.groupCallEventHandler = new GroupCallEventHandler(this);\n            this.canSupportVoip = true;\n            // Start listening for calls after the initial sync is done\n            // We do not need to backfill the call event buffer\n            // with encrypted events that might never get decrypted\n            this.on(ClientEvent.Sync, this.startCallEventHandler);\n        }\n\n        // NB. We initialise MatrixRTC whether we have call support or not: this is just\n        // the underlying session management and doesn't use any actual media capabilities\n        this.matrixRTC = new MatrixRTCSessionManager(this.logger, this);\n\n        this.serverCapabilitiesService = new ServerCapabilities(this.logger, this.http);\n\n        this.on(ClientEvent.Sync, this.fixupRoomNotifications);\n\n        this.timelineSupport = Boolean(opts.timelineSupport);\n\n        this.legacyCryptoStore = opts.cryptoStore;\n        this.verificationMethods = opts.verificationMethods;\n        this.cryptoCallbacks = opts.cryptoCallbacks || {};\n        this.enableEncryptedStateEvents = opts.enableEncryptedStateEvents ?? false;\n\n        this.forceTURN = opts.forceTURN || false;\n        this.iceCandidatePoolSize = opts.iceCandidatePoolSize === undefined ? 0 : opts.iceCandidatePoolSize;\n        this.supportsCallTransfer = opts.supportsCallTransfer || false;\n        this.fallbackICEServerAllowed = opts.fallbackICEServerAllowed || false;\n        this.isVoipWithNoMediaAllowed = opts.isVoipWithNoMediaAllowed || false;\n\n        if (opts.useE2eForGroupCall !== undefined) this.useE2eForGroupCall = opts.useE2eForGroupCall;\n\n        this.livekitServiceURL = opts.livekitServiceURL;\n\n        this.roomNameGenerator = opts.roomNameGenerator;\n\n        this.toDeviceMessageQueue = new ToDeviceMessageQueue(this, this.logger);\n\n        // The SDK doesn't really provide a clean way for events to recalculate the push\n        // actions for themselves, so we have to kinda help them out when they are encrypted.\n        // We do this so that push rules are correctly executed on events in their decrypted\n        // state, such as highlights when the user's name is mentioned.\n        this.on(MatrixEventEvent.Decrypted, (event) => {\n            fixNotificationCountOnDecryption(this, event);\n        });\n\n        this.ignoredInvites = new IgnoredInvites(this);\n        this._secretStorage = new ServerSideSecretStorageImpl(this, opts.cryptoCallbacks ?? {});\n\n        // having lots of event listeners is not unusual. 0 means \"unlimited\".\n        this.setMaxListeners(0);\n    }\n\n    public set store(newStore: Store) {\n        this._store = newStore;\n        this._store.setUserCreator((userId) => User.createUser(userId, this));\n    }\n\n    public get store(): Store {\n        return this._store;\n    }\n\n    /**\n     * High level helper method to begin syncing and poll for new events. To listen for these\n     * events, add a listener for {@link ClientEvent.Event}\n     * via {@link MatrixClient#on}. Alternatively, listen for specific\n     * state change events.\n     * @param opts - Options to apply when syncing.\n     */\n    public async startClient(opts?: IStartClientOpts): Promise<void> {\n        if (this.clientRunning) {\n            // client is already running.\n            return;\n        }\n        this.clientRunning = true;\n\n        this.on(ClientEvent.Sync, this.startMatrixRTC);\n\n        // Create our own user object artificially (instead of waiting for sync)\n        // so it's always available, even if the user is not in any rooms etc.\n        const userId = this.getUserId();\n        if (userId) {\n            this.store.storeUser(new User(userId));\n        }\n\n        // periodically poll for turn servers if we support voip\n        if (this.supportsVoip()) {\n            this.checkTurnServersIntervalID = setInterval(() => {\n                this.checkTurnServers();\n            }, TURN_CHECK_INTERVAL);\n            // noinspection ES6MissingAwait\n            this.checkTurnServers();\n        }\n\n        if (this.syncApi) {\n            // This shouldn't happen since we thought the client was not running\n            this.logger.error(\"Still have sync object whilst not running: stopping old one\");\n            this.syncApi.stop();\n        }\n\n        try {\n            await this.getVersions();\n\n            // This should be done with `canSupport`\n            // TODO: https://github.com/vector-im/element-web/issues/23643\n            const { threads, list, fwdPagination } = await this.doesServerSupportThread();\n            Thread.setServerSideSupport(threads);\n            Thread.setServerSideListSupport(list);\n            Thread.setServerSideFwdPaginationSupport(fwdPagination);\n        } catch (e) {\n            this.logger.error(\n                \"Can't fetch server versions, continuing to initialise sync, this will be retried later\",\n                e,\n            );\n        }\n\n        this.clientOpts = opts ?? {};\n        if (this.clientOpts.slidingSync) {\n            this.syncApi = new SlidingSyncSdk(\n                this.clientOpts.slidingSync,\n                this,\n                this.clientOpts,\n                this.buildSyncApiOptions(),\n            );\n        } else {\n            this.syncApi = new SyncApi(this, this.clientOpts, this.buildSyncApiOptions());\n        }\n\n        this.syncApi.sync().catch((e) => this.logger.info(\"Sync startup aborted with an error:\", e));\n\n        if (this.clientOpts.clientWellKnownPollPeriod !== undefined) {\n            this.clientWellKnownIntervalID = setInterval(() => {\n                this.fetchClientWellKnown();\n            }, 1000 * this.clientOpts.clientWellKnownPollPeriod);\n            this.fetchClientWellKnown();\n        }\n\n        this.toDeviceMessageQueue.start();\n        this.serverCapabilitiesService.start();\n    }\n\n    /**\n     * Construct a SyncApiOptions for this client, suitable for passing into the SyncApi constructor\n     */\n    protected buildSyncApiOptions(): SyncApiOptions {\n        return {\n            cryptoCallbacks: this.cryptoBackend,\n            canResetEntireTimeline: (roomId: string): boolean => {\n                if (!this.canResetTimelineCallback) {\n                    return false;\n                }\n                return this.canResetTimelineCallback(roomId);\n            },\n            logger: this.logger.getChild(\"sync\"),\n        };\n    }\n\n    /**\n     * High level helper method to stop the client from polling and allow a\n     * clean shutdown.\n     */\n    public stopClient(): void {\n        this.cryptoBackend?.stop(); // crypto might have been initialised even if the client wasn't fully started\n\n        this.off(ClientEvent.Sync, this.startMatrixRTC);\n\n        if (!this.clientRunning) return; // already stopped\n\n        this.logger.debug(\"stopping MatrixClient\");\n\n        this.clientRunning = false;\n\n        this.syncApi?.stop();\n        this.syncApi = undefined;\n\n        this.peekSync?.stopPeeking();\n\n        this.callEventHandler?.stop();\n        this.groupCallEventHandler?.stop();\n        this.callEventHandler = undefined;\n        this.groupCallEventHandler = undefined;\n\n        globalThis.clearInterval(this.checkTurnServersIntervalID);\n        this.checkTurnServersIntervalID = undefined;\n\n        if (this.clientWellKnownIntervalID !== undefined) {\n            globalThis.clearInterval(this.clientWellKnownIntervalID);\n        }\n\n        this.toDeviceMessageQueue.stop();\n\n        this.matrixRTC.stop();\n\n        this.serverCapabilitiesService.stop();\n    }\n\n    /**\n     * Clear any data out of the persistent stores used by the client.\n     *\n     * @param args.cryptoDatabasePrefix - The database name to use for indexeddb, defaults to 'matrix-js-sdk'.\n     * @returns Promise which resolves when the stores have been cleared.\n     */\n    public clearStores(\n        args: {\n            cryptoDatabasePrefix?: string;\n        } = {},\n    ): Promise<void> {\n        if (this.clientRunning) {\n            throw new Error(\"Cannot clear stores while client is running\");\n        }\n\n        const promises: Promise<void>[] = [];\n\n        promises.push(this.store.deleteAllData());\n        if (this.legacyCryptoStore) {\n            promises.push(this.legacyCryptoStore.deleteAllData());\n        }\n\n        // delete the stores used by the rust matrix-sdk-crypto, in case they were used\n        const deleteRustSdkStore = async (): Promise<void> => {\n            let indexedDB: IDBFactory;\n            try {\n                indexedDB = globalThis.indexedDB;\n                if (!indexedDB) return; // No indexedDB support\n            } catch {\n                // No indexedDB support\n                return;\n            }\n            for (const dbname of [\n                `${args.cryptoDatabasePrefix ?? RUST_SDK_STORE_PREFIX}::matrix-sdk-crypto`,\n                `${args.cryptoDatabasePrefix ?? RUST_SDK_STORE_PREFIX}::matrix-sdk-crypto-meta`,\n            ]) {\n                const prom = new Promise((resolve, reject) => {\n                    this.logger.info(`Removing IndexedDB instance ${dbname}`);\n                    const req = indexedDB.deleteDatabase(dbname);\n                    req.onsuccess = (_): void => {\n                        this.logger.info(`Removed IndexedDB instance ${dbname}`);\n                        resolve(0);\n                    };\n                    req.onerror = (e): void => {\n                        // In private browsing, Firefox has a globalThis.indexedDB, but attempts to delete an indexeddb\n                        // (even a non-existent one) fail with \"DOMException: A mutation operation was attempted on a\n                        // database that did not allow mutations.\"\n                        //\n                        // it seems like the only thing we can really do is ignore the error.\n                        this.logger.warn(`Failed to remove IndexedDB instance ${dbname}:`, e);\n                        resolve(0);\n                    };\n                    req.onblocked = (e): void => {\n                        this.logger.info(`cannot yet remove IndexedDB instance ${dbname}`);\n                    };\n                });\n                await prom;\n            }\n        };\n        promises.push(deleteRustSdkStore());\n\n        return Promise.all(promises).then(); // .then to fix types\n    }\n\n    /**\n     * Get the user-id of the logged-in user\n     *\n     * @returns MXID for the logged-in user, or null if not logged in\n     */\n    public getUserId(): string | null {\n        return this.credentials?.userId ?? null;\n    }\n\n    /**\n     * Get the user-id of the logged-in user\n     *\n     * @returns MXID for the logged-in user\n     * @throws Error if not logged in\n     */\n    public getSafeUserId(): string {\n        const userId = this.getUserId();\n        if (!userId) {\n            throw new Error(\"Expected logged in user but found none.\");\n        }\n        return userId;\n    }\n\n    /**\n     * Get the domain for this client's MXID\n     * @returns Domain of this MXID\n     */\n    public getDomain(): string | null {\n        if (this.credentials?.userId) {\n            return this.credentials.userId.replace(/^.*?:/, \"\");\n        }\n        return null;\n    }\n\n    /**\n     * Get the local part of the current user ID e.g. \"foo\" in \"\\@foo:bar\".\n     * @returns The user ID localpart or null.\n     */\n    public getUserIdLocalpart(): string | null {\n        return this.credentials?.userId?.split(\":\")[0].substring(1) ?? null;\n    }\n\n    /**\n     * Get the device ID of this client\n     * @returns device ID\n     */\n    public getDeviceId(): string | null {\n        return this.deviceId;\n    }\n\n    /**\n     * Get the session ID of this client\n     * @returns session ID\n     */\n    public getSessionId(): string {\n        return this.sessionId;\n    }\n\n    /**\n     * Check if the runtime environment supports VoIP calling.\n     * @returns True if VoIP is supported.\n     */\n    public supportsVoip(): boolean {\n        return !this.disableVoip && this.canSupportVoip;\n    }\n\n    /**\n     * @returns\n     */\n    public getMediaHandler(): MediaHandler {\n        return this.mediaHandler;\n    }\n\n    /**\n     * Set whether VoIP calls are forced to use only TURN\n     * candidates. This is the same as the forceTURN option\n     * when creating the client.\n     * @param force - True to force use of TURN servers\n     */\n    public setForceTURN(force: boolean): void {\n        this.forceTURN = force;\n    }\n\n    /**\n     * Set whether to advertise transfer support to other parties on Matrix calls.\n     * @param support - True to advertise the 'm.call.transferee' capability\n     */\n    public setSupportsCallTransfer(support: boolean): void {\n        this.supportsCallTransfer = support;\n    }\n\n    /**\n     * Returns true if to-device signalling for group calls will be encrypted with Olm.\n     * If false, it will be sent unencrypted.\n     * @returns boolean Whether group call signalling will be encrypted\n     */\n    public getUseE2eForGroupCall(): boolean {\n        return this.useE2eForGroupCall;\n    }\n\n    /**\n     * Creates a new call.\n     * The place*Call methods on the returned call can be used to actually place a call\n     *\n     * @param roomId - The room the call is to be placed in.\n     * @returns the call or null if the browser doesn't support calling.\n     */\n    public createCall(roomId: string): MatrixCall | null {\n        return createNewMatrixCall(this, roomId);\n    }\n\n    /**\n     * Creates a new group call and sends the associated state event\n     * to alert other members that the room now has a group call.\n     *\n     * @param roomId - The room the call is to be placed in.\n     */\n    public async createGroupCall(\n        roomId: string,\n        type: GroupCallType,\n        isPtt: boolean,\n        intent: GroupCallIntent,\n        dataChannelsEnabled?: boolean,\n        dataChannelOptions?: IGroupCallDataChannelOptions,\n    ): Promise<GroupCall> {\n        if (this.getGroupCallForRoom(roomId)) {\n            throw new Error(`${roomId} already has an existing group call`);\n        }\n\n        const room = this.getRoom(roomId);\n\n        if (!room) {\n            throw new Error(`Cannot find room ${roomId}`);\n        }\n\n        // Because without Media section a WebRTC connection is not possible, so need a RTCDataChannel to set up a\n        // no media WebRTC connection anyway.\n        return new GroupCall(\n            this,\n            room,\n            type,\n            isPtt,\n            intent,\n            undefined,\n            dataChannelsEnabled || this.isVoipWithNoMediaAllowed,\n            dataChannelOptions,\n            this.isVoipWithNoMediaAllowed,\n            this.useLivekitForGroupCalls,\n            this.livekitServiceURL,\n        ).create();\n    }\n\n    public getLivekitServiceURL(): string | undefined {\n        return this.livekitServiceURL;\n    }\n\n    // This shouldn't need to exist, but the widget API has startup ordering problems that\n    // mean it doesn't know the livekit URL fast enough: remove this once this is fixed.\n    public setLivekitServiceURL(newURL: string): void {\n        this.livekitServiceURL = newURL;\n    }\n\n    /**\n     * Wait until an initial state for the given room has been processed by the\n     * client and the client is aware of any ongoing group calls. Awaiting on\n     * the promise returned by this method before calling getGroupCallForRoom()\n     * avoids races where getGroupCallForRoom is called before the state for that\n     * room has been processed. It does not, however, fix other races, eg. two\n     * clients both creating a group call at the same time.\n     * @param roomId - The room ID to wait for\n     * @returns A promise that resolves once existing group calls in the room\n     *          have been processed.\n     */\n    public waitUntilRoomReadyForGroupCalls(roomId: string): Promise<void> {\n        return this.groupCallEventHandler!.waitUntilRoomReadyForGroupCalls(roomId);\n    }\n\n    /**\n     * Get an existing group call for the provided room.\n     * @returns The group call or null if it doesn't already exist.\n     */\n    public getGroupCallForRoom(roomId: string): GroupCall | null {\n        return this.groupCallEventHandler!.groupCalls.get(roomId) || null;\n    }\n\n    /**\n     * Get the current sync state.\n     * @returns the sync state, which may be null.\n     * @see MatrixClient#event:\"sync\"\n     */\n    public getSyncState(): SyncState | null {\n        return this.syncApi?.getSyncState() ?? null;\n    }\n\n    /**\n     * Returns the additional data object associated with\n     * the current sync state, or null if there is no\n     * such data.\n     * Sync errors, if available, are put in the 'error' key of\n     * this object.\n     */\n    public getSyncStateData(): ISyncStateData | null {\n        if (!this.syncApi) {\n            return null;\n        }\n        return this.syncApi.getSyncStateData();\n    }\n\n    /**\n     * Whether the initial sync has completed.\n     * @returns True if at least one sync has happened.\n     */\n    public isInitialSyncComplete(): boolean {\n        const state = this.getSyncState();\n        if (!state) {\n            return false;\n        }\n        return state === SyncState.Prepared || state === SyncState.Syncing;\n    }\n\n    /**\n     * Return whether the client is configured for a guest account.\n     * @returns True if this is a guest access_token (or no token is supplied).\n     */\n    public isGuest(): boolean {\n        return this.isGuestAccount;\n    }\n\n    /**\n     * Set whether this client is a guest account. <b>This method is experimental\n     * and may change without warning.</b>\n     * @param guest - True if this is a guest account.\n     * @experimental if the token is a macaroon, it should be encoded in it that it is a 'guest'\n     * access token, which means that the SDK can determine this entirely without\n     * the dev manually flipping this flag.\n     */\n    public setGuest(guest: boolean): void {\n        this.isGuestAccount = guest;\n    }\n\n    /**\n     * Return the provided scheduler, if any.\n     * @returns The scheduler or undefined\n     */\n    public getScheduler(): MatrixScheduler | undefined {\n        return this.scheduler;\n    }\n\n    /**\n     * Retry a backed off syncing request immediately. This should only be used when\n     * the user <b>explicitly</b> attempts to retry their lost connection.\n     * Will also retry any outbound to-device messages currently in the queue to be sent\n     * (retries of regular outgoing events are handled separately, per-event).\n     * @returns True if this resulted in a request being retried.\n     */\n    public retryImmediately(): boolean {\n        // don't await for this promise: we just want to kick it off\n        this.toDeviceMessageQueue.sendQueue();\n        return this.syncApi?.retryImmediately() ?? false;\n    }\n\n    /**\n     * Return the global notification EventTimelineSet, if any\n     *\n     * @returns the globl notification EventTimelineSet\n     */\n    public getNotifTimelineSet(): EventTimelineSet | null {\n        return this.notifTimelineSet;\n    }\n\n    /**\n     * Set the global notification EventTimelineSet\n     *\n     */\n    public setNotifTimelineSet(set: EventTimelineSet): void {\n        this.notifTimelineSet = set;\n    }\n\n    /**\n     * Gets the cached capabilities of the homeserver, returning cached ones if available.\n     * If there are no cached capabilities and none can be fetched, throw an exception.\n     *\n     * @returns Promise resolving with The capabilities of the homeserver\n     */\n    public async getCapabilities(): Promise<Capabilities> {\n        const caps = this.serverCapabilitiesService.getCachedCapabilities();\n        if (caps) return caps;\n        return this.serverCapabilitiesService.fetchCapabilities();\n    }\n\n    /**\n     * Gets the cached capabilities of the homeserver. If none have been fetched yet,\n     * return undefined.\n     *\n     * @returns The capabilities of the homeserver\n     */\n    public getCachedCapabilities(): Capabilities | undefined {\n        return this.serverCapabilitiesService.getCachedCapabilities();\n    }\n\n    /**\n     * Fetches the latest capabilities from the homeserver, ignoring any cached\n     * versions. The newly returned version is cached.\n     *\n     * @returns A promise which resolves to the capabilities of the homeserver\n     */\n    public fetchCapabilities(): Promise<Capabilities> {\n        return this.serverCapabilitiesService.fetchCapabilities();\n    }\n\n    /**\n     * Initialise support for end-to-end encryption in this client, using the rust matrix-sdk-crypto.\n     *\n     * **WARNING**: the cryptography stack is not thread-safe. Having multiple `MatrixClient` instances connected to\n     * the same Indexed DB will cause data corruption and decryption failures. The application layer is responsible for\n     * ensuring that only one `MatrixClient` issue is instantiated at a time.\n     *\n     * @param args.useIndexedDB - True to use an indexeddb store, false to use an in-memory store. Defaults to 'true'.\n     * @param args.cryptoDatabasePrefix - The database name to use for indexeddb, defaults to 'matrix-js-sdk'.\n     *    Unused if useIndexedDB is 'false'.\n     * @param args.storageKey - A key with which to encrypt the indexeddb store. If provided, it must be exactly\n     *    32 bytes of data, and must be the same each time the client is initialised for a given device.\n     *    If both this and `storagePassword` are unspecified, the store will be unencrypted.\n     * @param args.storagePassword - An alternative to `storageKey`. A password which will be used to derive a key to\n     *    encrypt the store with. Deriving a key from a password is (deliberately) a slow operation, so prefer\n     *    to pass a `storageKey` directly where possible.\n     *\n     * @returns a Promise which will resolve when the crypto layer has been\n     *    successfully initialised.\n     */\n    public async initRustCrypto(\n        args: {\n            useIndexedDB?: boolean;\n            cryptoDatabasePrefix?: string;\n            storageKey?: Uint8Array;\n            storagePassword?: string;\n        } = {},\n    ): Promise<void> {\n        if (this.cryptoBackend) {\n            this.logger.warn(\"Attempt to re-initialise e2e encryption on MatrixClient\");\n            return;\n        }\n\n        const userId = this.getUserId();\n        if (userId === null) {\n            throw new Error(\n                `Cannot enable encryption on MatrixClient with unknown userId: ` +\n                    `ensure userId is passed in createClient().`,\n            );\n        }\n        const deviceId = this.getDeviceId();\n        if (deviceId === null) {\n            throw new Error(\n                `Cannot enable encryption on MatrixClient with unknown deviceId: ` +\n                    `ensure deviceId is passed in createClient().`,\n            );\n        }\n\n        // importing rust-crypto will download the webassembly, so we delay it until we know it will be\n        // needed.\n        this.logger.debug(\"Downloading Rust crypto library\");\n        const RustCrypto = await import(\"./rust-crypto/index.ts\");\n\n        const rustCrypto = await RustCrypto.initRustCrypto({\n            logger: this.logger,\n            http: this.http,\n            userId: userId,\n            deviceId: deviceId,\n            secretStorage: this.secretStorage,\n            cryptoCallbacks: this.cryptoCallbacks,\n            storePrefix: args.useIndexedDB === false ? null : (args.cryptoDatabasePrefix ?? RUST_SDK_STORE_PREFIX),\n            storeKey: args.storageKey,\n            storePassphrase: args.storagePassword,\n\n            legacyCryptoStore: this.legacyCryptoStore,\n            legacyPickleKey: this.legacyPickleKey ?? \"DEFAULT_KEY\",\n            legacyMigrationProgressListener: (progress: number, total: number): void => {\n                this.emit(CryptoEvent.LegacyCryptoStoreMigrationProgress, progress, total);\n            },\n\n            enableEncryptedStateEvents: this.enableEncryptedStateEvents,\n        });\n\n        rustCrypto.setSupportedVerificationMethods(this.verificationMethods);\n\n        this.cryptoBackend = rustCrypto;\n\n        // attach the event listeners needed by RustCrypto\n        this.on(RoomMemberEvent.Membership, rustCrypto.onRoomMembership.bind(rustCrypto));\n        this.on(ClientEvent.Event, (event) => {\n            rustCrypto.onLiveEventFromSync(event);\n        });\n\n        // re-emit the events emitted by the crypto impl\n        this.reEmitter.reEmit(rustCrypto, [\n            CryptoEvent.VerificationRequestReceived,\n            CryptoEvent.UserTrustStatusChanged,\n            CryptoEvent.KeyBackupStatus,\n            CryptoEvent.KeyBackupSessionsRemaining,\n            CryptoEvent.KeyBackupFailed,\n            CryptoEvent.KeyBackupDecryptionKeyCached,\n            CryptoEvent.KeysChanged,\n            CryptoEvent.DevicesUpdated,\n            CryptoEvent.WillUpdateDevices,\n            CryptoEvent.DehydratedDeviceCreated,\n            CryptoEvent.DehydratedDeviceUploaded,\n            CryptoEvent.RehydrationStarted,\n            CryptoEvent.RehydrationProgress,\n            CryptoEvent.RehydrationCompleted,\n            CryptoEvent.RehydrationError,\n            CryptoEvent.DehydrationKeyCached,\n            CryptoEvent.DehydratedDeviceRotationError,\n        ]);\n    }\n\n    /**\n     * Access the server-side secret storage API for this client.\n     */\n    public get secretStorage(): ServerSideSecretStorage {\n        return this._secretStorage;\n    }\n\n    /**\n     * Access the crypto API for this client.\n     *\n     * If end-to-end encryption has been enabled for this client (via {@link initRustCrypto}),\n     * returns an object giving access to the crypto API. Otherwise, returns `undefined`.\n     */\n    public getCrypto(): CryptoApi | undefined {\n        return this.cryptoBackend;\n    }\n\n    /**\n     * Whether encryption is enabled for a room.\n     * @param roomId - the room id to query.\n     * @returns whether encryption is enabled.\n     *\n     * @deprecated Not correctly supported for Rust Cryptography. Use {@link CryptoApi.isEncryptionEnabledInRoom} and/or\n     *    {@link Room.hasEncryptionStateEvent}.\n     */\n    public isRoomEncrypted(roomId: string): boolean {\n        const room = this.getRoom(roomId);\n        if (!room) {\n            // we don't know about this room, so can't determine if it should be\n            // encrypted. Let's assume not.\n            return false;\n        }\n\n        // if there is an 'm.room.encryption' event in this room, it should be\n        // encrypted (independently of whether we actually support encryption)\n        return room.hasEncryptionStateEvent();\n    }\n\n    /**\n     * Check whether the key backup private key is stored in secret storage.\n     * @returns map of key name to key info the secret is\n     *     encrypted with, or null if it is not present or not encrypted with a\n     *     trusted key\n     */\n    public isKeyBackupKeyStored(): Promise<Record<string, SecretStorageKeyDescription> | null> {\n        return Promise.resolve(this.secretStorage.isStored(\"m.megolm_backup.v1\"));\n    }\n\n    private makeKeyBackupPath(roomId?: string, sessionId?: string, version?: string): IKeyBackupPath {\n        let path: string;\n        if (sessionId !== undefined) {\n            path = utils.encodeUri(\"/room_keys/keys/$roomId/$sessionId\", {\n                $roomId: roomId!,\n                $sessionId: sessionId,\n            });\n        } else if (roomId !== undefined) {\n            path = utils.encodeUri(\"/room_keys/keys/$roomId\", {\n                $roomId: roomId,\n            });\n        } else {\n            path = \"/room_keys/keys\";\n        }\n        const queryData = version === undefined ? undefined : { version };\n        return { path, queryData };\n    }\n\n    public deleteKeysFromBackup(roomId: undefined, sessionId: undefined, version?: string): Promise<void>;\n    public deleteKeysFromBackup(roomId: string, sessionId: undefined, version?: string): Promise<void>;\n    public deleteKeysFromBackup(roomId: string, sessionId: string, version?: string): Promise<void>;\n    public async deleteKeysFromBackup(roomId?: string, sessionId?: string, version?: string): Promise<void> {\n        const path = this.makeKeyBackupPath(roomId!, sessionId!, version);\n        await this.http.authedRequest(Method.Delete, path.path, path.queryData, undefined, { prefix: ClientPrefix.V3 });\n    }\n\n    /**\n     * Get the config for the media repository.\n     *\n     * @param useAuthenticatedMedia - If true, the caller supports authenticated\n     * media and wants an authentication-required URL. Note that server support\n     * for authenticated media will *not* be checked - it is the caller's responsibility\n     * to do so before calling this function.\n     *\n     * @returns Promise which resolves with an object containing the config.\n     */\n    public getMediaConfig(useAuthenticatedMedia: boolean = false): Promise<IMediaConfig> {\n        const path = useAuthenticatedMedia ? \"/media/config\" : \"/config\";\n        return this.http.authedRequest(Method.Get, path, undefined, undefined, {\n            prefix: useAuthenticatedMedia ? ClientPrefix.V1 : MediaPrefix.V3,\n        });\n    }\n\n    /**\n     * Get the room for the given room ID.\n     * This function will return a valid room for any room for which a Room event\n     * has been emitted. Note in particular that other events, eg. RoomState.members\n     * will be emitted for a room before this function will return the given room.\n     * @param roomId - The room ID\n     * @returns The Room or null if it doesn't exist or there is no data store.\n     */\n    public getRoom(roomId: string | undefined): Room | null {\n        if (!roomId) {\n            return null;\n        }\n        return this.store.getRoom(roomId);\n    }\n\n    /**\n     * Retrieve all known rooms.\n     * @returns A list of rooms, or an empty list if there is no data store.\n     */\n    public getRooms(): Room[] {\n        return this.store.getRooms();\n    }\n\n    /**\n     * Retrieve all rooms that should be displayed to the user\n     * This is essentially getRooms() with some rooms filtered out, eg. old versions\n     * of rooms that have been replaced or (in future) other rooms that have been\n     * marked at the protocol level as not to be displayed to the user.\n     *\n     * @param msc3946ProcessDynamicPredecessor - if true, look for an\n     *                                           m.room.predecessor state event and\n     *                                           use it if found (MSC3946).\n     * @returns A list of rooms, or an empty list if there is no data store.\n     */\n    public getVisibleRooms(msc3946ProcessDynamicPredecessor = false): Room[] {\n        const allRooms = this.store.getRooms();\n\n        const visibleRooms = new Set(allRooms);\n        for (const room of visibleRooms) {\n            const predecessors = this.findPredecessorRooms(room, true, msc3946ProcessDynamicPredecessor);\n            for (const predecessor of predecessors) {\n                visibleRooms.delete(predecessor);\n            }\n        }\n        return Array.from(visibleRooms);\n    }\n\n    /**\n     * Retrieve a user.\n     * @param userId - The user ID to retrieve.\n     * @returns A user or null if there is no data store or the user does\n     * not exist.\n     */\n    public getUser(userId: string): User | null {\n        return this.store.getUser(userId);\n    }\n\n    /**\n     * Retrieve all known users.\n     * @returns A list of users, or an empty list if there is no data store.\n     */\n    public getUsers(): User[] {\n        return this.store.getUsers();\n    }\n\n    /**\n     * Set account data event for the current user, and wait for the result to be echoed over `/sync`.\n     *\n     * Waiting for the remote echo ensures that a subsequent call to {@link getAccountData} will return the updated\n     * value.\n     *\n     * If called before the client is started with {@link startClient}, logs a warning and falls back to\n     * {@link setAccountDataRaw}.\n     *\n     * Retries the request up to 5 times in the case of an {@link ConnectionError}.\n     *\n     * @param eventType - The event type\n     * @param content - the contents object for the event\n     */\n    public async setAccountData<K extends keyof AccountDataEvents>(\n        eventType: K,\n        content: AccountDataEvents[K] | Record<string, never>,\n    ): Promise<EmptyObject> {\n        // If the sync loop is not running, fall back to setAccountDataRaw.\n        if (!this.clientRunning) {\n            this.logger.warn(\n                \"Calling `setAccountData` before the client is started: `getAccountData` may return inconsistent results.\",\n            );\n            return await retryNetworkOperation(5, () => this.setAccountDataRaw(eventType, content));\n        }\n\n        // If the account data is already correct, then we cannot expect an update over sync, and the operation\n        // is, in any case, a no-op.\n        //\n        // NB that we rely on this operation being synchronous to avoid a race condition: there must be no `await`\n        // between here and `this.addListener` below, in case we miss an update.\n        const existingData = this.store.getAccountData(eventType);\n        if (existingData && deepCompare(existingData.event.content, content)) return {};\n\n        // Create a promise which will resolve when the update is received\n        const updatedResolvers = Promise.withResolvers<void>();\n        function accountDataListener(event: MatrixEvent): void {\n            // Note that we cannot safely check that the content matches what we expected, because there is a race:\n            //   * We set the new content\n            //   * Another client sets alternative content\n            //   * Then /sync returns, but only reflects the latest content.\n            //\n            // Of course there is room for debate over what we should actually do in that case -- a subsequent\n            // `getAccountData` isn't going to return the expected value, but whose fault is that? Databases are hard.\n            //\n            // Anyway, what we *shouldn't* do is get stuck in a loop. I think the best we can do is check that the event\n            // type matches.\n            if (event.getType() === eventType) updatedResolvers.resolve();\n        }\n        this.addListener(ClientEvent.AccountData, accountDataListener);\n\n        try {\n            const result = await retryNetworkOperation(5, () => this.setAccountDataRaw(eventType, content));\n            await updatedResolvers.promise;\n            return result;\n        } finally {\n            this.removeListener(ClientEvent.AccountData, accountDataListener);\n        }\n    }\n\n    /**\n     * Set account data event for the current user, without waiting for the remote echo.\n     *\n     * @param eventType - The event type\n     * @param content - the contents object for the event\n     */\n    public setAccountDataRaw<K extends keyof AccountDataEvents>(\n        eventType: K,\n        content: AccountDataEvents[K] | Record<string, never>,\n    ): Promise<EmptyObject> {\n        const path = utils.encodeUri(\"/user/$userId/account_data/$type\", {\n            $userId: this.credentials.userId!,\n            $type: eventType,\n        });\n\n        return this.http.authedRequest(Method.Put, path, undefined, content);\n    }\n\n    /**\n     * Get account data event of given type for the current user.\n     * @param eventType - The event type\n     * @returns The contents of the given account data event\n     */\n    public getAccountData<K extends keyof AccountDataEvents>(eventType: K): MatrixEvent | undefined {\n        return this.store.getAccountData(eventType);\n    }\n\n    /**\n     * Get account data event of given type for the current user. This variant\n     * gets account data directly from the homeserver if the local store is not\n     * ready, which can be useful very early in startup before the initial sync.\n     * @param eventType - The event type\n     * @returns Promise which resolves: The contents of the given account data event.\n     * @returns Rejects: with an error response.\n     */\n    public async getAccountDataFromServer<K extends keyof AccountDataEvents>(\n        eventType: K,\n    ): Promise<AccountDataEvents[K] | null> {\n        if (this.isInitialSyncComplete()) {\n            const event = this.store.getAccountData(eventType);\n            if (!event) {\n                return null;\n            }\n            // The network version below returns just the content, so this branch\n            // does the same to match.\n            return event.getContent<AccountDataEvents[K]>();\n        }\n        const path = utils.encodeUri(\"/user/$userId/account_data/$type\", {\n            $userId: this.credentials.userId!,\n            $type: eventType,\n        });\n        try {\n            return await this.http.authedRequest(Method.Get, path);\n        } catch (e) {\n            if ((<MatrixError>e).data?.errcode === \"M_NOT_FOUND\") {\n                return null;\n            }\n            throw e;\n        }\n    }\n\n    public async deleteAccountData(eventType: keyof AccountDataEvents): Promise<void> {\n        const msc3391DeleteAccountDataServerSupport = this.canSupport.get(Feature.AccountDataDeletion);\n        // if deletion is not supported overwrite with empty content\n        if (msc3391DeleteAccountDataServerSupport === ServerSupport.Unsupported) {\n            await this.setAccountData(eventType, {});\n            return;\n        }\n        const path = utils.encodeUri(\"/user/$userId/account_data/$type\", {\n            $userId: this.getSafeUserId(),\n            $type: eventType,\n        });\n        const options =\n            msc3391DeleteAccountDataServerSupport === ServerSupport.Unstable\n                ? { prefix: \"/_matrix/client/unstable/org.matrix.msc3391\" }\n                : undefined;\n        return await this.http.authedRequest(Method.Delete, path, undefined, undefined, options);\n    }\n\n    /**\n     * Gets the users that are ignored by this client\n     * @returns The array of users that are ignored (empty if none)\n     */\n    public getIgnoredUsers(): string[] {\n        const event = this.getAccountData(EventType.IgnoredUserList);\n        if (!event?.getContent()[\"ignored_users\"]) return [];\n        return Object.keys(event.getContent()[\"ignored_users\"]);\n    }\n\n    /**\n     * Sets the users that the current user should ignore.\n     * @param userIds - the user IDs to ignore\n     * @returns Promise which resolves: an empty object\n     * @returns Rejects: with an error response.\n     */\n    public setIgnoredUsers(userIds: string[]): Promise<EmptyObject> {\n        const content = { ignored_users: {} as Record<string, EmptyObject> };\n        userIds.forEach((u) => {\n            content.ignored_users[u] = {};\n        });\n        return this.setAccountData(EventType.IgnoredUserList, content);\n    }\n\n    /**\n     * Gets whether or not a specific user is being ignored by this client.\n     * @param userId - the user ID to check\n     * @returns true if the user is ignored, false otherwise\n     */\n    public isUserIgnored(userId: string): boolean {\n        return this.getIgnoredUsers().includes(userId);\n    }\n\n    /**\n     * Join a room. If you have already joined the room, this will no-op.\n     * @param roomIdOrAlias - The room ID or room alias to join.\n     * @param opts - Options when joining the room.\n     * @returns Promise which resolves: Room object.\n     * @returns Rejects: with an error response.\n     */\n    public async joinRoom(roomIdOrAlias: string, opts: IJoinRoomOpts = {}): Promise<Room> {\n        const room = this.getRoom(roomIdOrAlias);\n        const roomMember = room?.getMember(this.getSafeUserId());\n        const preJoinMembership = roomMember?.membership;\n\n        // If we were invited to the room, the ID of the user that sent the invite. Otherwise, `null`.\n        const inviter =\n            preJoinMembership == KnownMembership.Invite ? (roomMember?.events.member?.getSender() ?? null) : null;\n\n        this.logger.debug(\n            `joinRoom[${roomIdOrAlias}]: preJoinMembership=${preJoinMembership}, inviter=${inviter}, opts=${JSON.stringify(opts)}`,\n        );\n        if (preJoinMembership == KnownMembership.Join) return room!;\n\n        let signPromise: Promise<IThirdPartySigned | void> = Promise.resolve();\n\n        if (opts.inviteSignUrl) {\n            const url = new URL(opts.inviteSignUrl);\n            url.searchParams.set(\"mxid\", this.credentials.userId!);\n            signPromise = this.http.requestOtherUrl<IThirdPartySigned>(Method.Post, url);\n        }\n\n        const queryParams: QueryDict = {};\n        if (opts.viaServers) {\n            // server_name has been deprecated in favour of via with Matrix >1.11 (MSC4156)\n            // We only use the first 3 servers, to avoid URI length issues.\n            queryParams.via = queryParams.server_name = opts.viaServers.slice(0, 3);\n        }\n\n        const data: IJoinRequestBody = {};\n        const signedInviteObj = await signPromise;\n        if (signedInviteObj) {\n            data.third_party_signed = signedInviteObj;\n        }\n\n        const path = utils.encodeUri(\"/join/$roomid\", { $roomid: roomIdOrAlias });\n        const res = await this.http.authedRequest<{ room_id: string }>(Method.Post, path, queryParams, data);\n\n        const roomId = res.room_id;\n        if (opts.acceptSharedHistory && inviter && this.cryptoBackend) {\n            await this.cryptoBackend.maybeAcceptKeyBundle(roomId, inviter);\n        }\n\n        // In case we were originally given an alias, check the room cache again\n        // with the resolved ID - this method is supposed to no-op if we already\n        // were in the room, after all.\n        const resolvedRoom = this.getRoom(roomId);\n        if (resolvedRoom?.hasMembershipState(this.credentials.userId!, KnownMembership.Join)) return resolvedRoom;\n\n        const syncApi = new SyncApi(this, this.clientOpts, this.buildSyncApiOptions());\n        return syncApi.createRoom(roomId);\n    }\n\n    /**\n     * Knock a room. If you have already knocked the room, this will no-op.\n     * @param roomIdOrAlias - The room ID or room alias to knock.\n     * @param opts - Options when knocking the room.\n     * @returns Promise which resolves: `{room_id: {string}}`\n     * @returns Rejects: with an error response.\n     */\n    public knockRoom(roomIdOrAlias: string, opts: KnockRoomOpts = {}): Promise<{ room_id: string }> {\n        const room = this.getRoom(roomIdOrAlias);\n        if (room?.hasMembershipState(this.credentials.userId!, KnownMembership.Knock)) {\n            return Promise.resolve({ room_id: room.roomId });\n        }\n\n        const path = utils.encodeUri(\"/knock/$roomIdOrAlias\", { $roomIdOrAlias: roomIdOrAlias });\n\n        const queryParams: QueryDict = {};\n        if (opts.viaServers) {\n            // We only use the first 3 servers, to avoid URI length issues.\n            const viaServers = Array.isArray(opts.viaServers) ? opts.viaServers.slice(0, 3) : [opts.viaServers];\n            // server_name has been deprecated in favour of via with Matrix >1.11 (MSC4156)\n            queryParams.server_name = viaServers;\n            queryParams.via = viaServers;\n        }\n\n        const body: Record<string, string> = {};\n        if (opts.reason) {\n            body.reason = opts.reason;\n        }\n\n        return this.http.authedRequest(Method.Post, path, queryParams, body);\n    }\n\n    /**\n     * Resend an event. Will also retry any to-device messages waiting to be sent.\n     * @param event - The event to resend.\n     * @param room - Optional. The room the event is in. Will update the\n     * timeline entry if provided.\n     * @returns Promise which resolves: to an ISendEventResponse object\n     * @returns Rejects: with an error response.\n     */\n    public resendEvent(event: MatrixEvent, room: Room): Promise<ISendEventResponse> {\n        // also kick the to-device queue to retry\n        this.toDeviceMessageQueue.sendQueue();\n\n        this.updatePendingEventStatus(room, event, EventStatus.SENDING);\n        return this.encryptAndSendEvent(room, event);\n    }\n\n    /**\n     * Cancel a queued or unsent event.\n     *\n     * @param event -   Event to cancel\n     * @throws Error if the event is not in QUEUED, NOT_SENT or ENCRYPTING state\n     */\n    public cancelPendingEvent(event: MatrixEvent): void {\n        if (![EventStatus.QUEUED, EventStatus.NOT_SENT, EventStatus.ENCRYPTING].includes(event.status!)) {\n            throw new Error(\"cannot cancel an event with status \" + event.status);\n        }\n\n        // If the event is currently being encrypted then remove it from the pending list, to indicate that it should\n        // not be sent.\n        if (event.status === EventStatus.ENCRYPTING) {\n            this.eventsBeingEncrypted.delete(event.getId()!);\n        } else if (this.scheduler && event.status === EventStatus.QUEUED) {\n            // tell the scheduler to forget about it, if it's queued\n            this.scheduler.removeEventFromQueue(event);\n        }\n\n        // then tell the room about the change of state, which will remove it\n        // from the room's list of pending events.\n        const room = this.getRoom(event.getRoomId());\n        this.updatePendingEventStatus(room, event, EventStatus.CANCELLED);\n    }\n\n    /**\n     * @returns Promise which resolves: TODO\n     * @returns Rejects: with an error response.\n     */\n    public setRoomName(roomId: string, name: string): Promise<ISendEventResponse> {\n        return this.sendStateEvent(roomId, EventType.RoomName, { name: name });\n    }\n\n    /**\n     * @param roomId - The room to update the topic in.\n     * @param topic - The plaintext topic. May be empty to remove the topic.\n     * @param htmlTopic - Optional.\n     * @returns Promise which resolves: TODO\n     * @returns Rejects: with an error response.\n     */\n    public setRoomTopic(roomId: string, topic?: string, htmlTopic?: string): Promise<ISendEventResponse> {\n        const content = ContentHelpers.makeTopicContent(topic, htmlTopic);\n        return this.sendStateEvent(roomId, EventType.RoomTopic, content);\n    }\n\n    /**\n     * @returns Promise which resolves: to an object keyed by tagId with objects containing a numeric order field.\n     * @returns Rejects: with an error response.\n     */\n    public getRoomTags(roomId: string): Promise<ITagsResponse> {\n        const path = utils.encodeUri(\"/user/$userId/rooms/$roomId/tags\", {\n            $userId: this.credentials.userId!,\n            $roomId: roomId,\n        });\n        return this.http.authedRequest(Method.Get, path);\n    }\n\n    /**\n     * @param tagName - name of room tag to be set\n     * @param metadata - associated with that tag to be stored\n     * @returns Promise which resolves: to an empty object\n     * @returns Rejects: with an error response.\n     */\n    public setRoomTag(roomId: string, tagName: string, metadata: ITagMetadata = {}): Promise<EmptyObject> {\n        const path = utils.encodeUri(\"/user/$userId/rooms/$roomId/tags/$tag\", {\n            $userId: this.credentials.userId!,\n            $roomId: roomId,\n            $tag: tagName,\n        });\n        return this.http.authedRequest(Method.Put, path, undefined, metadata);\n    }\n\n    /**\n     * @param tagName - name of room tag to be removed\n     * @returns Promise which resolves: to an empty object\n     * @returns Rejects: with an error response.\n     */\n    public deleteRoomTag(roomId: string, tagName: string): Promise<EmptyObject> {\n        const path = utils.encodeUri(\"/user/$userId/rooms/$roomId/tags/$tag\", {\n            $userId: this.credentials.userId!,\n            $roomId: roomId,\n            $tag: tagName,\n        });\n        return this.http.authedRequest(Method.Delete, path);\n    }\n\n    /**\n     * @param eventType - event type to be set\n     * @param content - event content\n     * @returns Promise which resolves: to an empty object `{}`\n     * @returns Rejects: with an error response.\n     */\n    public setRoomAccountData(roomId: string, eventType: string, content: Record<string, any>): Promise<EmptyObject> {\n        const path = utils.encodeUri(\"/user/$userId/rooms/$roomId/account_data/$type\", {\n            $userId: this.credentials.userId!,\n            $roomId: roomId,\n            $type: eventType,\n        });\n        return this.http.authedRequest(Method.Put, path, undefined, content);\n    }\n\n    /**\n     * Set a power level to one or multiple users.\n     * Will apply changes atop of current power level event from local state if running & synced, falling back\n     * to fetching latest from the `/state/` API.\n     * @param roomId - the room to update power levels in\n     * @param userId - the ID of the user or users to update power levels of\n     * @param powerLevel - the numeric power level to update given users to\n     * @returns Promise which resolves: to an ISendEventResponse object\n     * @returns Rejects: with an error response.\n     */\n    public async setPowerLevel(\n        roomId: string,\n        userId: string | string[],\n        powerLevel: number | undefined,\n    ): Promise<ISendEventResponse> {\n        let content: IPowerLevelsContent | undefined;\n        if (this.clientRunning && this.isInitialSyncComplete()) {\n            content = this.getRoom(roomId)?.currentState?.getStateEvents(EventType.RoomPowerLevels, \"\")?.getContent();\n        }\n        if (!content) {\n            try {\n                content = await this.getStateEvent(roomId, EventType.RoomPowerLevels, \"\");\n            } catch (e) {\n                // It is possible for a Matrix room to not have a power levels event\n                if (e instanceof MatrixError && e.errcode === \"M_NOT_FOUND\") {\n                    content = {};\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        // take a copy of the content to ensure we don't corrupt\n        // existing client state with a failed power level change\n        content = utils.deepCopy(content);\n\n        if (!content?.users) {\n            content.users = {};\n        }\n        const users = Array.isArray(userId) ? userId : [userId];\n        for (const user of users) {\n            if (powerLevel == null) {\n                delete content.users[user];\n            } else {\n                content.users[user] = powerLevel;\n            }\n        }\n\n        return this.sendStateEvent(roomId, EventType.RoomPowerLevels, content, \"\");\n    }\n\n    /**\n     * Create an m.beacon_info event\n     * @returns\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    public async unstable_createLiveBeacon(\n        roomId: Room[\"roomId\"],\n        beaconInfoContent: MBeaconInfoEventContent,\n    ): Promise<ISendEventResponse> {\n        return this.unstable_setLiveBeacon(roomId, beaconInfoContent);\n    }\n\n    /**\n     * Upsert a live beacon event\n     * using a specific m.beacon_info.* event variable type\n     * @param roomId - string\n     * @returns\n     */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    public async unstable_setLiveBeacon(\n        roomId: string,\n        beaconInfoContent: MBeaconInfoEventContent,\n    ): Promise<ISendEventResponse> {\n        return this.sendStateEvent(roomId, M_BEACON_INFO.name, beaconInfoContent, this.getUserId()!);\n    }\n\n    public sendEvent<K extends keyof TimelineEvents>(\n        roomId: string,\n        eventType: K,\n        content: TimelineEvents[K],\n        txnId?: string,\n    ): Promise<ISendEventResponse>;\n    public sendEvent<K extends keyof TimelineEvents>(\n        roomId: string,\n        threadId: string | null,\n        eventType: K,\n        content: TimelineEvents[K],\n        txnId?: string,\n    ): Promise<ISendEventResponse>;\n    public sendEvent(\n        roomId: string,\n        threadIdOrEventType: string | null,\n        eventTypeOrContent: string | IContent,\n        contentOrTxnId?: IContent | string,\n        txnIdOrVoid?: string,\n    ): Promise<ISendEventResponse> {\n        let threadId: string | null;\n        let eventType: string;\n        let content: IContent;\n        let txnId: string | undefined;\n        if (!threadIdOrEventType?.startsWith(EVENT_ID_PREFIX) && threadIdOrEventType !== null) {\n            txnId = contentOrTxnId as string;\n            content = eventTypeOrContent as IContent;\n            eventType = threadIdOrEventType;\n            threadId = null;\n        } else {\n            txnId = txnIdOrVoid;\n            content = contentOrTxnId as IContent;\n            eventType = eventTypeOrContent as string;\n            threadId = threadIdOrEventType;\n        }\n\n        this.addThreadRelationIfNeeded(content, threadId, roomId);\n        return this.sendCompleteEvent({ roomId, threadId, eventObject: { type: eventType, content }, txnId });\n    }\n\n    /**\n     * If we expect that an event is part of a thread but is missing the relation\n     * we need to add it manually, as well as the reply fallback\n     */\n    private addThreadRelationIfNeeded(content: IContent, threadId: string | null, roomId: string): void {\n        if (threadId && !content[\"m.relates_to\"]?.rel_type) {\n            const isReply = !!content[\"m.relates_to\"]?.[\"m.in_reply_to\"];\n            content[\"m.relates_to\"] = {\n                ...content[\"m.relates_to\"],\n                rel_type: THREAD_RELATION_TYPE.name,\n                event_id: threadId,\n                // Set is_falling_back to true unless this is actually intended to be a reply\n                is_falling_back: !isReply,\n            };\n            const thread = this.getRoom(roomId)?.getThread(threadId);\n            if (thread && !isReply) {\n                content[\"m.relates_to\"][\"m.in_reply_to\"] = {\n                    event_id:\n                        thread\n                            .lastReply((ev: MatrixEvent) => {\n                                return ev.isRelation(THREAD_RELATION_TYPE.name) && !ev.status;\n                            })\n                            ?.getId() ?? threadId,\n                };\n            }\n        }\n    }\n\n    /**\n     * @param eventObject - An object with the partial structure of an event, to which event_id, user_id, room_id and origin_server_ts will be added.\n     * @param txnId - Optional.\n     * @returns Promise which resolves: to an empty object `{}`\n     * @returns Rejects: with an error response.\n     */\n    private sendCompleteEvent(params: {\n        roomId: string;\n        threadId: string | null;\n        eventObject: Partial<IEvent>;\n        queryDict?: QueryDict;\n        txnId?: string;\n    }): Promise<ISendEventResponse>;\n    /**\n     * Sends a delayed event (MSC4140).\n     * @param eventObject - An object with the partial structure of an event, to which event_id, user_id, room_id and origin_server_ts will be added.\n     * @param delayOpts - Properties of the delay for this event.\n     * @param txnId - Optional.\n     * @returns Promise which resolves: to an empty object `{}`\n     * @returns Rejects: with an error response.\n     */\n    private sendCompleteEvent(params: {\n        roomId: string;\n        threadId: string | null;\n        eventObject: Partial<IEvent>;\n        delayOpts: SendDelayedEventRequestOpts;\n        queryDict?: QueryDict;\n        txnId?: string;\n    }): Promise<SendDelayedEventResponse>;\n    private sendCompleteEvent({\n        roomId,\n        threadId,\n        eventObject,\n        delayOpts,\n        queryDict,\n        txnId,\n    }: {\n        roomId: string;\n        threadId: string | null;\n        eventObject: Partial<IEvent>;\n        delayOpts?: SendDelayedEventRequestOpts;\n        queryDict?: QueryDict;\n        txnId?: string;\n    }): Promise<SendDelayedEventResponse | ISendEventResponse> {\n        if (!txnId) {\n            txnId = this.makeTxnId();\n        }\n\n        // We always construct a MatrixEvent when sending because the store and scheduler use them.\n        // We'll extract the params back out if it turns out the client has no scheduler or store.\n        const localEvent = new MatrixEvent(\n            Object.assign(eventObject, {\n                event_id: \"~\" + roomId + \":\" + txnId,\n                user_id: this.credentials.userId,\n                sender: this.credentials.userId,\n                room_id: roomId,\n                origin_server_ts: new Date().getTime(),\n            }),\n        );\n\n        const room = this.getRoom(roomId);\n        const thread = threadId ? room?.getThread(threadId) : undefined;\n        if (thread) {\n            localEvent.setThread(thread);\n        }\n\n        if (!delayOpts) {\n            // set up re-emitter for this new event - this is normally the job of EventMapper but we don't use it here\n            this.reEmitter.reEmit(localEvent, [MatrixEventEvent.Replaced, MatrixEventEvent.VisibilityChange]);\n            room?.reEmitter.reEmit(localEvent, [MatrixEventEvent.BeforeRedaction]);\n        }\n\n        // if this is a relation or redaction of an event\n        // that hasn't been sent yet (e.g. with a local id starting with a ~)\n        // then listen for the remote echo of that event so that by the time\n        // this event does get sent, we have the correct event_id\n        const targetId = localEvent.getAssociatedId();\n        if (targetId?.startsWith(\"~\")) {\n            const target = room?.getPendingEvents().find((e) => e.getId() === targetId);\n            target?.once(MatrixEventEvent.LocalEventIdReplaced, () => {\n                localEvent.updateAssociatedId(target.getId()!);\n            });\n        }\n\n        const type = localEvent.getType();\n        this.logger.debug(\n            `sendEvent of type ${type} in ${roomId} with txnId ${txnId}${delayOpts ? \" (delayed event)\" : \"\"}${queryDict ? \" query params: \" + JSON.stringify(queryDict) : \"\"}`,\n        );\n\n        localEvent.setTxnId(txnId);\n        localEvent.setStatus(EventStatus.SENDING);\n\n        // TODO: separate store for delayed events?\n        if (!delayOpts) {\n            // add this event immediately to the local store as 'sending'.\n            room?.addPendingEvent(localEvent, txnId);\n\n            // addPendingEvent can change the state to NOT_SENT if it believes\n            // that there's other events that have failed. We won't bother to\n            // try sending the event if the state has changed as such.\n            if (localEvent.status === EventStatus.NOT_SENT) {\n                return Promise.reject(new Error(\"Event blocked by other events not yet sent\"));\n            }\n\n            return this.encryptAndSendEvent(room, localEvent, queryDict);\n        } else {\n            return this.encryptAndSendEvent(room, localEvent, delayOpts, queryDict);\n        }\n    }\n\n    /**\n     * encrypts the event if necessary; adds the event to the queue, or sends it; marks the event as sent/unsent\n     * @returns returns a promise which resolves with the result of the send request\n     */\n    protected async encryptAndSendEvent(\n        room: Room | null,\n        event: MatrixEvent,\n        queryDict?: QueryDict,\n    ): Promise<ISendEventResponse>;\n    /**\n     * Simply sends a delayed event without encrypting it.\n     * TODO: Allow encrypted delayed events, and encrypt them properly\n     * @param delayOpts - Properties of the delay for this event.\n     * @returns returns a promise which resolves with the result of the delayed send request\n     */\n    protected async encryptAndSendEvent(\n        room: Room | null,\n        event: MatrixEvent,\n        delayOpts: SendDelayedEventRequestOpts,\n        queryDict?: QueryDict,\n    ): Promise<ISendEventResponse>;\n    protected async encryptAndSendEvent(\n        room: Room | null,\n        event: MatrixEvent,\n        delayOptsOrQuery?: SendDelayedEventRequestOpts | QueryDict,\n        queryDict?: QueryDict,\n    ): Promise<ISendEventResponse | SendDelayedEventResponse> {\n        let queryOpts = queryDict;\n        if (delayOptsOrQuery && isSendDelayedEventRequestOpts(delayOptsOrQuery)) {\n            return this.sendEventHttpRequest(event, delayOptsOrQuery, queryOpts);\n        } else if (!queryOpts) {\n            queryOpts = delayOptsOrQuery;\n        }\n        try {\n            let cancelled: boolean;\n            this.eventsBeingEncrypted.add(event.getId()!);\n            try {\n                await this.encryptEventIfNeeded(event, room ?? undefined);\n            } finally {\n                cancelled = !this.eventsBeingEncrypted.delete(event.getId()!);\n            }\n\n            if (cancelled) {\n                // cancelled via MatrixClient::cancelPendingEvent\n                return {} as ISendEventResponse;\n            }\n\n            // encryptEventIfNeeded may have updated the status from SENDING to ENCRYPTING. If so, we need\n            // to put it back.\n            if (event.status === EventStatus.ENCRYPTING) {\n                this.updatePendingEventStatus(room, event, EventStatus.SENDING);\n            }\n\n            let promise: Promise<ISendEventResponse> | null = null;\n            if (this.scheduler) {\n                // if this returns a promise then the scheduler has control now and will\n                // resolve/reject when it is done. Internally, the scheduler will invoke\n                // processFn which is set to this._sendEventHttpRequest so the same code\n                // path is executed regardless.\n                promise = this.scheduler.queueEvent(event);\n                if (promise && this.scheduler.getQueueForEvent(event)!.length > 1) {\n                    // event is processed FIFO so if the length is 2 or more we know\n                    // this event is stuck behind an earlier event.\n                    this.updatePendingEventStatus(room, event, EventStatus.QUEUED);\n                }\n            }\n\n            if (!promise) {\n                promise = this.sendEventHttpRequest(event, queryOpts);\n                if (room) {\n                    promise = promise.then((res) => {\n                        room.updatePendingEvent(event, EventStatus.SENT, res[\"event_id\"]);\n                        return res;\n                    });\n                }\n            }\n\n            return await promise;\n        } catch (err) {\n            this.logger.error(\"Error sending event\", err);\n            try {\n                // set the error on the event before we update the status:\n                // updating the status emits the event, so the state should be\n                // consistent at that point.\n                event.error = <MatrixError>err;\n                this.updatePendingEventStatus(room, event, EventStatus.NOT_SENT);\n            } catch (e) {\n                this.logger.error(\"Exception in error handler!\", e);\n            }\n            if (err instanceof MatrixError) {\n                err.event = event;\n            }\n            throw err;\n        }\n    }\n\n    private async encryptEventIfNeeded(event: MatrixEvent, room?: Room): Promise<void> {\n        // If the room is unknown, we cannot encrypt for it\n        if (!room) return;\n\n        if (!(await this.shouldEncryptEventForRoom(event, room))) return;\n\n        if (!this.cryptoBackend && this.usingExternalCrypto) {\n            // The client has opted to allow sending messages to encrypted\n            // rooms even if the room is encrypted, and we haven't set up\n            // crypto. This is useful for users of matrix-org/pantalaimon\n            return;\n        }\n\n        if (!this.cryptoBackend) {\n            throw new Error(\"This room is configured to use encryption, but your client does not support encryption.\");\n        }\n\n        this.updatePendingEventStatus(room, event, EventStatus.ENCRYPTING);\n        await this.cryptoBackend.encryptEvent(event, room);\n    }\n\n    /**\n     * Determine whether a given event should be encrypted when we send it to the given room.\n     *\n     * This takes into account event type and room configuration.\n     */\n    private async shouldEncryptEventForRoom(event: MatrixEvent, room: Room): Promise<boolean> {\n        if (event.isEncrypted()) {\n            // this event has already been encrypted; this happens if the\n            // encryption step succeeded, but the send step failed on the first\n            // attempt.\n            return false;\n        }\n\n        if (event.getType() === EventType.Reaction) {\n            // For reactions, there is a very little gained by encrypting the entire\n            // event, as relation data is already kept in the clear. Event\n            // encryption for a reaction effectively only obscures the event type,\n            // but the purpose is still obvious from the relation data, so nothing\n            // is really gained. It also causes quite a few problems, such as:\n            //   * triggers notifications via default push rules\n            //   * prevents server-side bundling for reactions\n            // The reaction key / content / emoji value does warrant encrypting, but\n            // this will be handled separately by encrypting just this value.\n            // See https://github.com/matrix-org/matrix-doc/pull/1849#pullrequestreview-248763642\n            return false;\n        }\n\n        if (event.isRedaction()) {\n            // Redactions do not support encryption in the spec at this time.\n            // Whilst it mostly worked in some clients, it wasn't compliant.\n            return false;\n        }\n\n        // If the room has an m.room.encryption event, we should encrypt.\n        if (room.hasEncryptionStateEvent()) return true;\n\n        // If we have a crypto impl, and *it* thinks we should encrypt, then we should.\n        if (await this.cryptoBackend?.isEncryptionEnabledInRoom(room.roomId)) return true;\n\n        // Otherwise, no need to encrypt.\n        return false;\n    }\n\n    /**\n     * Returns the eventType that should be used taking encryption into account\n     * for a given eventType.\n     * @param roomId - the room for the events `eventType` relates to\n     * @param eventType - the event type\n     * @returns the event type taking encryption into account\n     */\n    private getEncryptedIfNeededEventType(\n        roomId: string,\n        eventType?: EventType | string | null,\n    ): EventType | string | null | undefined {\n        if (eventType === EventType.Reaction) return eventType;\n        return this.getRoom(roomId)?.hasEncryptionStateEvent() ? EventType.RoomMessageEncrypted : eventType;\n    }\n\n    protected updatePendingEventStatus(room: Room | null, event: MatrixEvent, newStatus: EventStatus): void {\n        if (room) {\n            room.updatePendingEvent(event, newStatus);\n        } else {\n            event.setStatus(newStatus);\n        }\n    }\n\n    private sendEventHttpRequest(event: MatrixEvent, queryDict?: QueryDict): Promise<ISendEventResponse>;\n    private sendEventHttpRequest(\n        event: MatrixEvent,\n        delayOpts: SendDelayedEventRequestOpts,\n        queryDict?: QueryDict,\n    ): Promise<SendDelayedEventResponse>;\n    private sendEventHttpRequest(\n        event: MatrixEvent,\n        queryOrDelayOpts?: SendDelayedEventRequestOpts | QueryDict,\n        queryDict?: QueryDict,\n    ): Promise<ISendEventResponse | SendDelayedEventResponse> {\n        let txnId = event.getTxnId();\n        if (!txnId) {\n            txnId = this.makeTxnId();\n            event.setTxnId(txnId);\n        }\n\n        const pathParams = {\n            $roomId: event.getRoomId()!,\n            $eventType: event.getWireType(),\n            $stateKey: event.getStateKey()!,\n            $txnId: txnId,\n        };\n\n        let path: string;\n\n        if (event.isState()) {\n            let pathTemplate = \"/rooms/$roomId/state/$eventType\";\n            if (event.getStateKey() && event.getStateKey()!.length > 0) {\n                pathTemplate = \"/rooms/$roomId/state/$eventType/$stateKey\";\n            }\n            path = utils.encodeUri(pathTemplate, pathParams);\n        } else if (event.isRedaction() && event.event.redacts) {\n            const pathTemplate = `/rooms/$roomId/redact/$redactsEventId/$txnId`;\n            path = utils.encodeUri(pathTemplate, {\n                $redactsEventId: event.event.redacts,\n                ...pathParams,\n            });\n        } else {\n            path = utils.encodeUri(\"/rooms/$roomId/send/$eventType/$txnId\", pathParams);\n        }\n\n        const delayOpts =\n            queryOrDelayOpts && isSendDelayedEventRequestOpts(queryOrDelayOpts) ? queryOrDelayOpts : undefined;\n        const queryOpts = !delayOpts ? queryOrDelayOpts : queryDict;\n        const content = event.getWireContent();\n        if (delayOpts) {\n            return this.http.authedRequest<SendDelayedEventResponse>(\n                Method.Put,\n                path,\n                { ...getUnstableDelayQueryOpts(delayOpts), ...queryOpts },\n                content,\n            );\n        } else {\n            return this.http.authedRequest<ISendEventResponse>(Method.Put, path, queryOpts, content).then((res) => {\n                this.logger.debug(`Event sent to ${event.getRoomId()} with event id ${res.event_id}`);\n                return res;\n            });\n        }\n    }\n\n    /**\n     * @param txnId -  transaction id. One will be made up if not supplied.\n     * @param opts - Redact options\n     * @returns Promise which resolves: TODO\n     * @returns Rejects: with an error response.\n     * @throws Error if called with `with_rel_types` (MSC3912) but the server does not support it.\n     *         Callers should check whether the server supports MSC3912 via `MatrixClient.canSupport`.\n     */\n    public redactEvent(\n        roomId: string,\n        eventId: string,\n        txnId?: string | undefined,\n        opts?: IRedactOpts,\n    ): Promise<ISendEventResponse>;\n    public redactEvent(\n        roomId: string,\n        threadId: string | null,\n        eventId: string,\n        txnId?: string | undefined,\n        opts?: IRedactOpts,\n    ): Promise<ISendEventResponse>;\n    public redactEvent(\n        roomId: string,\n        threadId: string | null,\n        eventId?: string,\n        txnId?: string | IRedactOpts,\n        opts?: IRedactOpts,\n    ): Promise<ISendEventResponse> {\n        if (!eventId?.startsWith(EVENT_ID_PREFIX)) {\n            opts = txnId as IRedactOpts;\n            txnId = eventId;\n            eventId = threadId!;\n            threadId = null;\n        }\n        const reason = opts?.reason;\n        const content: IContent = { reason };\n\n        if (opts?.with_rel_types !== undefined) {\n            if (this.canSupport.get(Feature.RelationBasedRedactions) === ServerSupport.Unsupported) {\n                throw new Error(\n                    \"Server does not support relation based redactions \" +\n                        `roomId ${roomId} eventId ${eventId} txnId: ${txnId as string} threadId ${threadId}`,\n                );\n            }\n\n            const withRelTypesPropName =\n                this.canSupport.get(Feature.RelationBasedRedactions) === ServerSupport.Stable\n                    ? MSC3912_RELATION_BASED_REDACTIONS_PROP.stable!\n                    : MSC3912_RELATION_BASED_REDACTIONS_PROP.unstable!;\n\n            content[withRelTypesPropName] = opts.with_rel_types;\n        }\n\n        return this.sendCompleteEvent({\n            roomId,\n            threadId,\n            eventObject: {\n                type: EventType.RoomRedaction,\n                content,\n                redacts: eventId,\n            },\n            txnId: txnId as string,\n        });\n    }\n\n    /**\n     * @param txnId - Optional.\n     * @returns Promise which resolves: to an ISendEventResponse object\n     * @returns Rejects: with an error response.\n     */\n    public sendMessage(roomId: string, content: RoomMessageEventContent, txnId?: string): Promise<ISendEventResponse>;\n    public sendMessage(\n        roomId: string,\n        threadId: string | null,\n        content: RoomMessageEventContent,\n        txnId?: string,\n    ): Promise<ISendEventResponse>;\n    public sendMessage(\n        roomId: string,\n        threadId: string | null | RoomMessageEventContent,\n        content?: RoomMessageEventContent | string,\n        txnId?: string,\n    ): Promise<ISendEventResponse> {\n        if (typeof threadId !== \"string\" && threadId !== null) {\n            txnId = content as string;\n            content = threadId as RoomMessageEventContent;\n            threadId = null;\n        }\n\n        const eventType = EventType.RoomMessage;\n        const sendContent = content as RoomMessageEventContent;\n\n        return this.sendEvent(roomId, threadId as string | null, eventType, sendContent, txnId);\n    }\n\n    /**\n     * @param txnId - Optional.\n     * @returns\n     * @returns Rejects: with an error response.\n     */\n    public sendTextMessage(roomId: string, body: string, txnId?: string): Promise<ISendEventResponse>;\n    public sendTextMessage(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        txnId?: string,\n    ): Promise<ISendEventResponse>;\n    public sendTextMessage(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        txnId?: string,\n    ): Promise<ISendEventResponse> {\n        if (!threadId?.startsWith(EVENT_ID_PREFIX) && threadId !== null) {\n            txnId = body;\n            body = threadId;\n            threadId = null;\n        }\n        const content = ContentHelpers.makeTextMessage(body);\n        return this.sendMessage(roomId, threadId, content, txnId);\n    }\n\n    /**\n     * @param txnId - Optional.\n     * @returns Promise which resolves: to a ISendEventResponse object\n     * @returns Rejects: with an error response.\n     */\n    public sendNotice(roomId: string, body: string, txnId?: string): Promise<ISendEventResponse>;\n    public sendNotice(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        txnId?: string,\n    ): Promise<ISendEventResponse>;\n    public sendNotice(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        txnId?: string,\n    ): Promise<ISendEventResponse> {\n        if (!threadId?.startsWith(EVENT_ID_PREFIX) && threadId !== null) {\n            txnId = body;\n            body = threadId;\n            threadId = null;\n        }\n        const content = ContentHelpers.makeNotice(body);\n        return this.sendMessage(roomId, threadId, content, txnId);\n    }\n\n    /**\n     * @param txnId - Optional.\n     * @returns Promise which resolves: to a ISendEventResponse object\n     * @returns Rejects: with an error response.\n     */\n    public sendEmoteMessage(roomId: string, body: string, txnId?: string): Promise<ISendEventResponse>;\n    public sendEmoteMessage(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        txnId?: string,\n    ): Promise<ISendEventResponse>;\n    public sendEmoteMessage(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        txnId?: string,\n    ): Promise<ISendEventResponse> {\n        if (!threadId?.startsWith(EVENT_ID_PREFIX) && threadId !== null) {\n            txnId = body;\n            body = threadId;\n            threadId = null;\n        }\n        const content = ContentHelpers.makeEmoteMessage(body);\n        return this.sendMessage(roomId, threadId, content, txnId);\n    }\n\n    /**\n     * @returns Promise which resolves: to a ISendEventResponse object\n     * @returns Rejects: with an error response.\n     */\n    public sendImageMessage(roomId: string, url: string, info?: ImageInfo, text?: string): Promise<ISendEventResponse>;\n    public sendImageMessage(\n        roomId: string,\n        threadId: string | null,\n        url: string,\n        info?: ImageInfo,\n        text?: string,\n    ): Promise<ISendEventResponse>;\n    public sendImageMessage(\n        roomId: string,\n        threadId: string | null,\n        url?: string | ImageInfo,\n        info?: ImageInfo | string,\n        text = \"Image\",\n    ): Promise<ISendEventResponse> {\n        if (!threadId?.startsWith(EVENT_ID_PREFIX) && threadId !== null) {\n            text = (info as string) || \"Image\";\n            info = url as ImageInfo;\n            url = threadId as string;\n            threadId = null;\n        }\n        const content = {\n            msgtype: MsgType.Image,\n            url: url as string,\n            info: info as ImageInfo,\n            body: text,\n        } satisfies RoomMessageEventContent;\n        return this.sendMessage(roomId, threadId, content);\n    }\n\n    /**\n     * @returns Promise which resolves: to a ISendEventResponse object\n     * @returns Rejects: with an error response.\n     */\n    public sendStickerMessage(\n        roomId: string,\n        url: string,\n        info?: ImageInfo,\n        text?: string,\n    ): Promise<ISendEventResponse>;\n    public sendStickerMessage(\n        roomId: string,\n        threadId: string | null,\n        url: string,\n        info?: ImageInfo,\n        text?: string,\n    ): Promise<ISendEventResponse>;\n    public sendStickerMessage(\n        roomId: string,\n        threadId: string | null,\n        url?: string | ImageInfo,\n        info?: ImageInfo | string,\n        text = \"Sticker\",\n    ): Promise<ISendEventResponse> {\n        if (!threadId?.startsWith(EVENT_ID_PREFIX) && threadId !== null) {\n            text = (info as string) || \"Sticker\";\n            info = url as ImageInfo;\n            url = threadId as string;\n            threadId = null;\n        }\n        const content = {\n            url: url as string,\n            info: info as ImageInfo,\n            body: text,\n        } satisfies StickerEventContent;\n\n        return this.sendEvent(roomId, threadId, EventType.Sticker, content);\n    }\n\n    /**\n     * @returns Promise which resolves: to a ISendEventResponse object\n     * @returns Rejects: with an error response.\n     */\n    public sendHtmlMessage(roomId: string, body: string, htmlBody: string): Promise<ISendEventResponse>;\n    public sendHtmlMessage(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        htmlBody: string,\n    ): Promise<ISendEventResponse>;\n    public sendHtmlMessage(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        htmlBody?: string,\n    ): Promise<ISendEventResponse> {\n        if (!threadId?.startsWith(EVENT_ID_PREFIX) && threadId !== null) {\n            htmlBody = body as string;\n            body = threadId;\n            threadId = null;\n        }\n        const content = ContentHelpers.makeHtmlMessage(body, htmlBody!);\n        return this.sendMessage(roomId, threadId, content);\n    }\n\n    /**\n     * @returns Promise which resolves: to a ISendEventResponse object\n     * @returns Rejects: with an error response.\n     */\n    public sendHtmlNotice(roomId: string, body: string, htmlBody: string): Promise<ISendEventResponse>;\n    public sendHtmlNotice(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        htmlBody: string,\n    ): Promise<ISendEventResponse>;\n    public sendHtmlNotice(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        htmlBody?: string,\n    ): Promise<ISendEventResponse> {\n        if (!threadId?.startsWith(EVENT_ID_PREFIX) && threadId !== null) {\n            htmlBody = body as string;\n            body = threadId;\n            threadId = null;\n        }\n        const content = ContentHelpers.makeHtmlNotice(body, htmlBody!);\n        return this.sendMessage(roomId, threadId, content);\n    }\n\n    /**\n     * @returns Promise which resolves: to a ISendEventResponse object\n     * @returns Rejects: with an error response.\n     */\n    public sendHtmlEmote(roomId: string, body: string, htmlBody: string): Promise<ISendEventResponse>;\n    public sendHtmlEmote(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        htmlBody: string,\n    ): Promise<ISendEventResponse>;\n    public sendHtmlEmote(\n        roomId: string,\n        threadId: string | null,\n        body: string,\n        htmlBody?: string,\n    ): Promise<ISendEventResponse> {\n        if (!threadId?.startsWith(EVENT_ID_PREFIX) && threadId !== null) {\n            htmlBody = body as string;\n            body = threadId;\n            threadId = null;\n        }\n        const content = ContentHelpers.makeHtmlEmote(body, htmlBody!);\n        return this.sendMessage(roomId, threadId, content);\n    }\n\n    /**\n     * Send a delayed timeline event.\n     *\n     * Note: This endpoint is unstable, and can throw an `Error`.\n     *   Check progress on [MSC4140](https://github.com/matrix-org/matrix-spec-proposals/pull/4140) for more details.\n     */\n    // eslint-disable-next-line\n    public async _unstable_sendDelayedEvent<K extends keyof TimelineEvents>(\n        roomId: string,\n        delayOpts: SendDelayedEventRequestOpts,\n        threadId: string | null,\n        eventType: K,\n        content: TimelineEvents[K],\n        txnId?: string,\n    ): Promise<SendDelayedEventResponse> {\n        if (!(await this.doesServerSupportUnstableFeature(UNSTABLE_MSC4140_DELAYED_EVENTS))) {\n            throw new UnsupportedDelayedEventsEndpointError(\n                \"Server does not support the delayed events API\",\n                \"sendDelayedEvent\",\n            );\n        }\n\n        this.addThreadRelationIfNeeded(content, threadId, roomId);\n        return this.sendCompleteEvent({\n            roomId,\n            threadId,\n            eventObject: { type: eventType, content },\n            delayOpts,\n            txnId,\n        });\n    }\n\n    /**\n     * Send a delayed sticky timeline event.\n     *\n     * Note: This endpoint is unstable, and can throw an `Error`.\n     *   Check progress on [MSC4140](https://github.com/matrix-org/matrix-spec-proposals/pull/4140) and\n     *   [MSC4354](https://github.com/matrix-org/matrix-spec-proposals/pull/4354) for more details.\n     */\n    // eslint-disable-next-line\n    public async _unstable_sendStickyDelayedEvent<K extends keyof TimelineEvents>(\n        roomId: string,\n        stickDuration: number,\n        delayOpts: SendDelayedEventRequestOpts,\n        threadId: string | null,\n        eventType: K,\n        content: TimelineEvents[K] & { msc4354_sticky_key: string },\n        txnId?: string,\n    ): Promise<SendDelayedEventResponse> {\n        if (!(await this.doesServerSupportUnstableFeature(UNSTABLE_MSC4140_DELAYED_EVENTS))) {\n            throw new UnsupportedDelayedEventsEndpointError(\n                \"Server does not support the delayed events API\",\n                \"getDelayedEvents\",\n            );\n        }\n        if (!(await this.doesServerSupportUnstableFeature(UNSTABLE_MSC4354_STICKY_EVENTS))) {\n            throw new UnsupportedStickyEventsEndpointError(\n                \"Server does not support the sticky events\",\n                \"sendStickyEvent\",\n            );\n        }\n\n        this.addThreadRelationIfNeeded(content, threadId, roomId);\n        return this.sendCompleteEvent({\n            roomId,\n            threadId,\n            eventObject: { type: eventType, content },\n            queryDict: { \"org.matrix.msc4354.sticky_duration_ms\": stickDuration },\n            delayOpts,\n            txnId,\n        });\n    }\n\n    /**\n     * Send a delayed state event.\n     *\n     * Note: This endpoint is unstable, and can throw an `Error`.\n     *   Check progress on [MSC4140](https://github.com/matrix-org/matrix-spec-proposals/pull/4140) for more details.\n     */\n    // eslint-disable-next-line\n    public async _unstable_sendDelayedStateEvent<K extends keyof StateEvents>(\n        roomId: string,\n        delayOpts: SendDelayedEventRequestOpts,\n        eventType: K,\n        content: StateEvents[K],\n        stateKey = \"\",\n        opts: IRequestOpts = {},\n    ): Promise<SendDelayedEventResponse> {\n        if (!(await this.doesServerSupportUnstableFeature(UNSTABLE_MSC4140_DELAYED_EVENTS))) {\n            throw new UnsupportedDelayedEventsEndpointError(\n                \"Server does not support the delayed events API\",\n                \"sendDelayedStateEvent\",\n            );\n        }\n\n        const pathParams = {\n            $roomId: roomId,\n            $eventType: eventType,\n            $stateKey: stateKey,\n        };\n        let path = utils.encodeUri(\"/rooms/$roomId/state/$eventType\", pathParams);\n        if (stateKey !== undefined) {\n            path = utils.encodeUri(path + \"/$stateKey\", pathParams);\n        }\n        return this.http.authedRequest(Method.Put, path, getUnstableDelayQueryOpts(delayOpts), content as Body, opts);\n    }\n\n    /**\n     * Send a sticky timeline event.\n     *\n     * Note: This endpoint is unstable, and can throw an `Error`.\n     *   Check progress on [MSC4354](https://github.com/matrix-org/matrix-spec-proposals/pull/4354) for more details.\n     */\n    // eslint-disable-next-line\n    public async _unstable_sendStickyEvent<K extends keyof TimelineEvents>(\n        roomId: string,\n        stickDuration: number,\n        threadId: string | null,\n        eventType: K,\n        content: TimelineEvents[K] & { msc4354_sticky_key: string },\n        txnId?: string,\n    ): Promise<ISendEventResponse> {\n        if (!(await this.doesServerSupportUnstableFeature(UNSTABLE_MSC4354_STICKY_EVENTS))) {\n            throw new UnsupportedStickyEventsEndpointError(\n                \"Server does not support the sticky events\",\n                \"sendStickyEvent\",\n            );\n        }\n\n        this.addThreadRelationIfNeeded(content, threadId, roomId);\n        return this.sendCompleteEvent({\n            roomId,\n            threadId,\n            eventObject: { type: eventType, content },\n            queryDict: { \"org.matrix.msc4354.sticky_duration_ms\": stickDuration },\n            txnId,\n        });\n    }\n\n    /**\n     * Get all pending delayed events for the calling user.\n     *\n     * Note: This endpoint is unstable, and can throw an `Error`.\n     *   Check progress on [MSC4140](https://github.com/matrix-org/matrix-spec-proposals/pull/4140) for more details.\n     */\n    // eslint-disable-next-line\n    public async _unstable_getDelayedEvents(fromToken?: string): Promise<DelayedEventInfo> {\n        if (!(await this.doesServerSupportUnstableFeature(UNSTABLE_MSC4140_DELAYED_EVENTS))) {\n            throw new UnsupportedDelayedEventsEndpointError(\n                \"Server does not support the delayed events API\",\n                \"getDelayedEvents\",\n            );\n        }\n\n        const queryDict = fromToken ? { from: fromToken } : undefined;\n        return await this.http.authedRequest(Method.Get, \"/delayed_events\", queryDict, undefined, {\n            prefix: `${ClientPrefix.Unstable}/${UNSTABLE_MSC4140_DELAYED_EVENTS}`,\n        });\n    }\n\n    /**\n     * Manage a delayed event associated with the given delay_id.\n     *\n     * Note: This endpoint is unstable, and can throw an `Error`.\n     *   Check progress on [MSC4140](https://github.com/matrix-org/matrix-spec-proposals/pull/4140) for more details.\n     */\n    // eslint-disable-next-line\n    public async _unstable_updateDelayedEvent(\n        delayId: string,\n        action: UpdateDelayedEventAction,\n        requestOptions: IRequestOpts = {},\n    ): Promise<EmptyObject> {\n        if (!(await this.doesServerSupportUnstableFeature(UNSTABLE_MSC4140_DELAYED_EVENTS))) {\n            throw new UnsupportedDelayedEventsEndpointError(\n                \"Server does not support the delayed events API\",\n                \"updateDelayedEvent\",\n            );\n        }\n\n        const path = utils.encodeUri(\"/delayed_events/$delayId\", {\n            $delayId: delayId,\n        });\n        const data = {\n            action,\n        };\n        return await this.http.authedRequest(Method.Post, path, undefined, data, {\n            ...requestOptions,\n            prefix: `${ClientPrefix.Unstable}/${UNSTABLE_MSC4140_DELAYED_EVENTS}`,\n        });\n    }\n\n    /**\n     * Send a receipt.\n     * @param event - The event being acknowledged\n     * @param receiptType - The kind of receipt e.g. \"m.read\". Other than\n     * ReceiptType.Read are experimental!\n     * @param body - Additional content to send alongside the receipt.\n     * @param unthreaded - An unthreaded receipt will clear room+thread notifications\n     * @returns Promise which resolves: to an empty object `{}`\n     * @returns Rejects: with an error response.\n     */\n    public async sendReceipt(\n        event: MatrixEvent,\n        receiptType: ReceiptType,\n        body?: Record<string, any>,\n        unthreaded = false,\n    ): Promise<EmptyObject> {\n        if (this.isGuest()) {\n            return Promise.resolve({}); // guests cannot send receipts so don't bother.\n        }\n\n        const path = utils.encodeUri(\"/rooms/$roomId/receipt/$receiptType/$eventId\", {\n            $roomId: event.getRoomId()!,\n            $receiptType: receiptType,\n            $eventId: event.getId()!,\n        });\n\n        // Unless we're explicitly making an unthreaded receipt or we don't\n        // support threads, include the `thread_id` property in the body.\n        const shouldAddThreadId = !unthreaded && this.supportsThreads();\n        const fullBody = shouldAddThreadId ? { ...body, thread_id: threadIdForReceipt(event) } : body;\n\n        const promise = this.http.authedRequest<EmptyObject>(Method.Post, path, undefined, fullBody || {});\n\n        const room = this.getRoom(event.getRoomId());\n        if (room && this.credentials.userId) {\n            room.addLocalEchoReceipt(this.credentials.userId, event, receiptType, unthreaded);\n        }\n        return promise;\n    }\n\n    /**\n     * Send a read receipt.\n     * @param event - The event that has been read.\n     * @param receiptType - other than ReceiptType.Read are experimental! Optional.\n     * @returns Promise which resolves: to an empty object `{}`\n     * @returns Rejects: with an error response.\n     */\n    public async sendReadReceipt(\n        event: MatrixEvent | null,\n        receiptType = ReceiptType.Read,\n        unthreaded = false,\n    ): Promise<EmptyObject | undefined> {\n        if (!event) return;\n        const eventId = event.getId()!;\n        const room = this.getRoom(event.getRoomId());\n        if (room?.hasPendingEvent(eventId)) {\n            throw new Error(`Cannot set read receipt to a pending event (${eventId})`);\n        }\n\n        return this.sendReceipt(event, receiptType, {}, unthreaded);\n    }\n\n    /**\n     * Set a marker to indicate the point in a room before which the user has read every\n     * event. This can be retrieved from room account data (the event type is `m.fully_read`)\n     * and displayed as a horizontal line in the timeline that is visually distinct to the\n     * position of the user's own read receipt.\n     * @param roomId - ID of the room that has been read\n     * @param rmEventId - ID of the event that has been read\n     * @param rrEvent - the event tracked by the read receipt. This is here for\n     * convenience because the RR and the RM are commonly updated at the same time as each\n     * other. The local echo of this receipt will be done if set. Optional.\n     * @param rpEvent - the m.read.private read receipt event for when we don't\n     * want other users to see the read receipts. This is experimental. Optional.\n     * @returns Promise which resolves: the empty object, `{}`.\n     */\n    public async setRoomReadMarkers(\n        roomId: string,\n        rmEventId: string,\n        rrEvent?: MatrixEvent,\n        rpEvent?: MatrixEvent,\n    ): Promise<EmptyObject> {\n        const room = this.getRoom(roomId);\n        if (room?.hasPendingEvent(rmEventId)) {\n            throw new Error(`Cannot set read marker to a pending event (${rmEventId})`);\n        }\n\n        // Add the optional RR update, do local echo like `sendReceipt`\n        let rrEventId: string | undefined;\n        if (rrEvent) {\n            rrEventId = rrEvent.getId()!;\n            if (room?.hasPendingEvent(rrEventId)) {\n                throw new Error(`Cannot set read receipt to a pending event (${rrEventId})`);\n            }\n            room?.addLocalEchoReceipt(this.credentials.userId!, rrEvent, ReceiptType.Read);\n        }\n\n        // Add the optional private RR update, do local echo like `sendReceipt`\n        let rpEventId: string | undefined;\n        if (rpEvent) {\n            rpEventId = rpEvent.getId()!;\n            if (room?.hasPendingEvent(rpEventId)) {\n                throw new Error(`Cannot set read receipt to a pending event (${rpEventId})`);\n            }\n            room?.addLocalEchoReceipt(this.credentials.userId!, rpEvent, ReceiptType.ReadPrivate);\n        }\n\n        return await this.setRoomReadMarkersHttpRequest(roomId, rmEventId, rrEventId, rpEventId);\n    }\n\n    public sendRtcDecline(roomId: string, notificationEventId: string): Promise<ISendEventResponse> {\n        return this.sendEvent(roomId, EventType.RTCDecline, {\n            \"m.relates_to\": { event_id: notificationEventId, rel_type: RelationType.Reference },\n        });\n    }\n\n    /**\n     * Get a preview of the given URL as of (roughly) the given point in time,\n     * described as an object with OpenGraph keys and associated values.\n     * Attributes may be synthesized where actual OG metadata is lacking.\n     * Caches results to prevent hammering the server.\n     * @param url - The URL to get preview data for\n     * @param ts - The preferred point in time that the preview should\n     * describe (ms since epoch).  The preview returned will either be the most\n     * recent one preceding this timestamp if available, or failing that the next\n     * most recent available preview.\n     * @returns Promise which resolves: Object of OG metadata.\n     * @returns Rejects: with an error response.\n     * May return synthesized attributes if the URL lacked OG meta.\n     */\n    public getUrlPreview(url: string, ts: number): Promise<IPreviewUrlResponse> {\n        // bucket the timestamp to the nearest minute to prevent excessive spam to the server\n        // Surely 60-second accuracy is enough for anyone.\n        ts = Math.floor(ts / 60000) * 60000;\n\n        const parsed = new URL(url);\n        parsed.hash = \"\"; // strip the hash as it won't affect the preview\n        url = parsed.toString();\n\n        const key = ts + \"_\" + url;\n\n        // If there's already a request in flight (or we've handled it), return that instead.\n        if (key in this.urlPreviewCache) {\n            return this.urlPreviewCache[key];\n        }\n\n        const resp = this.http.authedRequest<IPreviewUrlResponse>(\n            Method.Get,\n            \"/preview_url\",\n            {\n                url,\n                ts: ts.toString(),\n            },\n            undefined,\n            {\n                prefix: MediaPrefix.V3,\n                priority: \"low\",\n            },\n        );\n        // TODO: Expire the URL preview cache sometimes\n        this.urlPreviewCache[key] = resp;\n        return resp;\n    }\n\n    /**\n     * @returns Promise which resolves: to an empty object `{}`\n     * @returns Rejects: with an error response.\n     */\n    public sendTyping(roomId: string, isTyping: boolean, timeoutMs: number): Promise<EmptyObject> {\n        if (this.isGuest()) {\n            return Promise.resolve({}); // guests cannot send typing notifications so don't bother.\n        }\n\n        const path = utils.encodeUri(\"/rooms/$roomId/typing/$userId\", {\n            $roomId: roomId,\n            $userId: this.getUserId()!,\n        });\n        const data: QueryDict = {\n            typing: isTyping,\n        };\n        if (isTyping) {\n            data.timeout = timeoutMs ? timeoutMs : 20000;\n        }\n        return this.http.authedRequest(Method.Put, path, undefined, data);\n    }\n\n    /**\n     * Determines the history of room upgrades for a given room, as far as the\n     * client can see. Returns an array of Rooms where the first entry is the\n     * oldest and the last entry is the newest (likely current) room. If the\n     * provided room is not found, this returns an empty list. This works in\n     * both directions, looking for older and newer rooms of the given room.\n     * @param roomId - The room ID to search from\n     * @param verifyLinks - If true, the function will only return rooms\n     * which can be proven to be linked. For example, rooms which have a create\n     * event pointing to an old room which the client is not aware of or doesn't\n     * have a matching tombstone would not be returned.\n     * @param msc3946ProcessDynamicPredecessor - if true, look for\n     * m.room.predecessor state events as well as create events, and prefer\n     * predecessor events where they exist (MSC3946).\n     * @returns An array of rooms representing the upgrade\n     * history.\n     */\n    public getRoomUpgradeHistory(\n        roomId: string,\n        verifyLinks = false,\n        msc3946ProcessDynamicPredecessor = false,\n    ): Room[] {\n        const currentRoom = this.getRoom(roomId);\n        if (!currentRoom) return [];\n\n        const before = this.findPredecessorRooms(currentRoom, verifyLinks, msc3946ProcessDynamicPredecessor);\n        const after = this.findSuccessorRooms(currentRoom, verifyLinks, msc3946ProcessDynamicPredecessor);\n\n        return [...before, currentRoom, ...after];\n    }\n\n    private findPredecessorRooms(room: Room, verifyLinks: boolean, msc3946ProcessDynamicPredecessor: boolean): Room[] {\n        const ret: Room[] = [];\n        const seenRoomIDs = new Set<string>([room.roomId]);\n\n        // Work backwards from newer to older rooms\n        let predecessorRoomId = room.findPredecessor(msc3946ProcessDynamicPredecessor)?.roomId;\n        while (predecessorRoomId !== null) {\n            if (predecessorRoomId) {\n                if (seenRoomIDs.has(predecessorRoomId)) break;\n                seenRoomIDs.add(predecessorRoomId);\n            }\n            const predecessorRoom = this.getRoom(predecessorRoomId);\n            if (predecessorRoom === null) {\n                break;\n            }\n            if (verifyLinks) {\n                const tombstone = predecessorRoom.currentState.getStateEvents(EventType.RoomTombstone, \"\");\n                if (!tombstone || tombstone.getContent()[\"replacement_room\"] !== room.roomId) {\n                    break;\n                }\n            }\n\n            // Insert at the front because we're working backwards from the currentRoom\n            ret.splice(0, 0, predecessorRoom);\n\n            room = predecessorRoom;\n            predecessorRoomId = room.findPredecessor(msc3946ProcessDynamicPredecessor)?.roomId;\n        }\n        return ret;\n    }\n\n    private findSuccessorRooms(room: Room, verifyLinks: boolean, msc3946ProcessDynamicPredecessor: boolean): Room[] {\n        const ret: Room[] = [];\n\n        // Work forwards, looking at tombstone events\n        let tombstoneEvent = room.currentState.getStateEvents(EventType.RoomTombstone, \"\");\n        while (tombstoneEvent) {\n            const successorRoom = this.getRoom(tombstoneEvent.getContent()[\"replacement_room\"]);\n            if (!successorRoom) break; // end of the chain\n            if (successorRoom.roomId === room.roomId) break; // Tombstone is referencing its own room\n\n            if (verifyLinks) {\n                const predecessorRoomId = successorRoom.findPredecessor(msc3946ProcessDynamicPredecessor)?.roomId;\n                if (!predecessorRoomId || predecessorRoomId !== room.roomId) {\n                    break;\n                }\n            }\n\n            // Push to the end because we're looking forwards\n            ret.push(successorRoom);\n            const roomIds = new Set(ret.map((ref) => ref.roomId));\n            if (roomIds.size < ret.length) {\n                // The last room added to the list introduced a previous roomId\n                // To avoid recursion, return the last rooms - 1\n                return ret.slice(0, ret.length - 1);\n            }\n\n            // Set the current room to the reference room so we know where we're at\n            room = successorRoom;\n            tombstoneEvent = room.currentState.getStateEvents(EventType.RoomTombstone, \"\");\n        }\n        return ret;\n    }\n\n    /**\n     * Send an invite to the given user to join the given room.\n     *\n     * @param roomId - The ID of the room to which the user should be invited.\n     * @param userId - The ID of the user that should be invited.\n     * @param opts - Optional reason object. For backwards compatibility, a string is also accepted, and will be interpreted as a reason.\n     *\n     * @returns An empty object.\n     */\n    public async invite(roomId: string, userId: string, opts: InviteOpts | string = {}): Promise<EmptyObject> {\n        if (typeof opts != \"object\") {\n            opts = { reason: opts };\n        }\n\n        if (opts.shareEncryptedHistory) {\n            await this.cryptoBackend?.shareRoomHistoryWithUser(roomId, userId);\n        }\n\n        return await this.membershipChange(roomId, userId, KnownMembership.Invite, opts.reason);\n    }\n\n    /**\n     * Invite a user to a room based on their email address.\n     * @param roomId - The room to invite the user to.\n     * @param email - The email address to invite.\n     * @returns Promise which resolves: `{}` an empty object.\n     * @returns Rejects: with an error response.\n     */\n    public inviteByEmail(roomId: string, email: string): Promise<EmptyObject> {\n        return this.inviteByThreePid(roomId, \"email\", email);\n    }\n\n    /**\n     * Invite a user to a room based on a third-party identifier.\n     * @param roomId - The room to invite the user to.\n     * @param medium - The medium to invite the user e.g. \"email\".\n     * @param address - The address for the specified medium.\n     * @returns Promise which resolves: `{}` an empty object.\n     * @returns Rejects: with an error response.\n     */\n    public async inviteByThreePid(roomId: string, medium: string, address: string): Promise<EmptyObject> {\n        const path = utils.encodeUri(\"/rooms/$roomId/invite\", { $roomId: roomId });\n\n        const identityServerUrl = this.getIdentityServerUrl(true);\n        if (!identityServerUrl) {\n            return Promise.reject(\n                new MatrixError({\n                    error: \"No supplied identity server URL\",\n                    errcode: \"ORG.MATRIX.JSSDK_MISSING_PARAM\",\n                }),\n            );\n        }\n        const params: Record<string, string> = {\n            id_server: identityServerUrl,\n            medium: medium,\n            address: address,\n        };\n\n        if (this.identityServer?.getAccessToken) {\n            const identityAccessToken = await this.identityServer.getAccessToken();\n            if (identityAccessToken) {\n                params[\"id_access_token\"] = identityAccessToken;\n            }\n        }\n\n        return this.http.authedRequest(Method.Post, path, undefined, params);\n    }\n\n    /**\n     * @returns Promise which resolves: `{}` an empty object.\n     * @returns Rejects: with an error response.\n     */\n    public leave(roomId: string): Promise<EmptyObject> {\n        return this.membershipChange(roomId, undefined, KnownMembership.Leave);\n    }\n\n    /**\n     * Leaves all rooms in the chain of room upgrades based on the given room. By\n     * default, this will leave all the previous and upgraded rooms, including the\n     * given room. To only leave the given room and any previous rooms, keeping the\n     * upgraded (modern) rooms untouched supply `false` to `includeFuture`.\n     * @param roomId - The room ID to start leaving at\n     * @param includeFuture - If true, the whole chain (past and future) of\n     * upgraded rooms will be left.\n     * @returns Promise which resolves when completed with an object keyed\n     * by room ID and value of the error encountered when leaving or null.\n     */\n    public leaveRoomChain(\n        roomId: string,\n        includeFuture = true,\n    ): Promise<{ [roomId: string]: Error | MatrixError | null }> {\n        const upgradeHistory = this.getRoomUpgradeHistory(roomId, true);\n\n        let eligibleToLeave = upgradeHistory;\n        if (!includeFuture) {\n            eligibleToLeave = [];\n            for (const room of upgradeHistory) {\n                eligibleToLeave.push(room);\n                if (room.roomId === roomId) {\n                    break;\n                }\n            }\n        }\n\n        const populationResults: { [roomId: string]: Error } = {};\n        const promises: Promise<unknown>[] = [];\n\n        const doLeave = (roomId: string): Promise<void> => {\n            return this.leave(roomId)\n                .then(() => {\n                    delete populationResults[roomId];\n                })\n                .catch((err) => {\n                    // suppress error\n                    populationResults[roomId] = err;\n                });\n        };\n\n        for (const room of eligibleToLeave) {\n            promises.push(doLeave(room.roomId));\n        }\n\n        return Promise.all(promises).then(() => populationResults);\n    }\n\n    /**\n     * @param reason - Optional.\n     * @returns Promise which resolves: TODO\n     * @returns Rejects: with an error response.\n     */\n    public ban(roomId: string, userId: string, reason?: string): Promise<EmptyObject> {\n        return this.membershipChange(roomId, userId, KnownMembership.Ban, reason);\n    }\n\n    /**\n     * @param deleteRoom - True to delete the room from the store on success.\n     * Default: true.\n     * @returns Promise which resolves: `{}` an empty object.\n     * @returns Rejects: with an error response.\n     */\n    public async forget(roomId: string, deleteRoom = true): Promise<EmptyObject> {\n        // API returns an empty object\n        const path = utils.encodeUri(\"/rooms/$room_id/forget\", {\n            $room_id: roomId,\n        });\n        const response = await this.http.authedRequest<EmptyObject>(Method.Post, path);\n        if (deleteRoom) {\n            this.store.removeRoom(roomId);\n            this.emit(ClientEvent.DeleteRoom, roomId);\n        }\n        return response;\n    }\n\n    /**\n     * @returns Promise which resolves: Object (currently empty)\n     * @returns Rejects: with an error response.\n     */\n    public unban(roomId: string, userId: string): Promise<EmptyObject> {\n        // unbanning != set their state to leave: this used to be\n        // the case, but was then changed so that leaving was always\n        // a revoking of privilege, otherwise two people racing to\n        // kick / ban someone could end up banning and then un-banning\n        // them.\n        const path = utils.encodeUri(\"/rooms/$roomId/unban\", {\n            $roomId: roomId,\n        });\n        const data = {\n            user_id: userId,\n        };\n        return this.http.authedRequest(Method.Post, path, undefined, data);\n    }\n\n    /**\n     * @param reason - Optional.\n     * @returns Promise which resolves: `{}` an empty object.\n     * @returns Rejects: with an error response.\n     */\n    public kick(roomId: string, userId: string, reason?: string): Promise<EmptyObject> {\n        const path = utils.encodeUri(\"/rooms/$roomId/kick\", {\n            $roomId: roomId,\n        });\n        const data = {\n            user_id: userId,\n            reason: reason,\n        };\n        return this.http.authedRequest(Method.Post, path, undefined, data);\n    }\n\n    private membershipChange(\n        roomId: string,\n        userId: string | undefined,\n        membership: Membership,\n        reason?: string,\n    ): Promise<EmptyObject> {\n        // API returns an empty object\n        const path = utils.encodeUri(\"/rooms/$room_id/$membership\", {\n            $room_id: roomId,\n            $membership: membership,\n        });\n        return this.http.authedRequest(Method.Post, path, undefined, {\n            user_id: userId, // may be undefined e.g. on leave\n            reason: reason,\n        });\n    }\n\n    /**\n     * Obtain a dict of actions which should be performed for this event according\n     * to the push rules for this user.  Caches the dict on the event.\n     * @param event - The event to get push actions for.\n     * @param forceRecalculate - forces to recalculate actions for an event\n     * Useful when an event just got decrypted\n     * @returns A dict of actions to perform.\n     */\n    public getPushActionsForEvent(event: MatrixEvent, forceRecalculate = false): IActionsObject | null {\n        if (!event.getPushActions() || forceRecalculate) {\n            const { actions, rule } = this.pushProcessor.actionsAndRuleForEvent(event);\n            event.setPushDetails(actions, rule);\n        }\n        return event.getPushActions();\n    }\n\n    /**\n     * Obtain a dict of actions which should be performed for this event according\n     * to the push rules for this user.  Caches the dict on the event.\n     * @param event - The event to get push actions for.\n     * @param forceRecalculate - forces to recalculate actions for an event\n     * Useful when an event just got decrypted\n     * @returns A dict of actions to perform.\n     */\n    public getPushDetailsForEvent(event: MatrixEvent, forceRecalculate = false): PushDetails | null {\n        if (!event.getPushDetails() || forceRecalculate) {\n            const { actions, rule } = this.pushProcessor.actionsAndRuleForEvent(event);\n            event.setPushDetails(actions, rule);\n        }\n        return event.getPushDetails();\n    }\n\n    /**\n     * @param info - The kind of info to set (e.g. 'avatar_url')\n     * @param data - The JSON object to set.\n     * @returns\n     * @returns Rejects: with an error response.\n     */\n    // eslint-disable-next-line camelcase\n    public setProfileInfo(info: \"avatar_url\", data: { avatar_url: string }): Promise<EmptyObject>;\n    public setProfileInfo(info: \"displayname\", data: { displayname: string }): Promise<EmptyObject>;\n    public setProfileInfo(info: \"avatar_url\" | \"displayname\", data: object): Promise<EmptyObject> {\n        const path = utils.encodeUri(\"/profile/$userId/$info\", {\n            $userId: this.credentials.userId!,\n            $info: info,\n        });\n        return this.http.authedRequest(Method.Put, path, undefined, data);\n    }\n\n    /**\n     * @returns Promise which resolves: `{}` an empty object.\n     * @returns Rejects: with an error response.\n     */\n    public async setDisplayName(name: string): Promise<EmptyObject> {\n        const prom = await this.setProfileInfo(\"displayname\", { displayname: name });\n        // XXX: synthesise a profile update for ourselves because Synapse is broken and won't\n        const user = this.getUser(this.getUserId()!);\n        if (user) {\n            user.displayName = name;\n            user.emit(UserEvent.DisplayName, user.events.presence, user);\n        }\n        return prom;\n    }\n\n    /**\n     * @returns Promise which resolves: `{}` an empty object.\n     * @returns Rejects: with an error response.\n     */\n    public async setAvatarUrl(url: string): Promise<EmptyObject> {\n        const prom = await this.setProfileInfo(\"avatar_url\", { avatar_url: url });\n        // XXX: synthesise a profile update for ourselves because Synapse is broken and won't\n        const user = this.getUser(this.getUserId()!);\n        if (user) {\n            user.avatarUrl = url;\n            user.emit(UserEvent.AvatarUrl, user.events.presence, user);\n        }\n        return prom;\n    }\n\n    /**\n     * Turn an MXC URL into an HTTP one. <strong>This method is experimental and\n     * may change.</strong>\n     * @param mxcUrl - The MXC URL\n     * @param width - The desired width of the thumbnail.\n     * @param height - The desired height of the thumbnail.\n     * @param resizeMethod - The thumbnail resize method to use, either\n     * \"crop\" or \"scale\".\n     * @param allowDirectLinks - If true, return any non-mxc URLs\n     * directly. Fetching such URLs will leak information about the user to\n     * anyone they share a room with. If false, will return null for such URLs.\n     * @param allowRedirects - If true, the caller supports the URL being 307 or\n     * 308 redirected to another resource upon request. If false, redirects\n     * are not expected. Implied `true` when `useAuthentication` is `true`.\n     * @param useAuthentication - If true, the caller supports authenticated\n     * media and wants an authentication-required URL. Note that server support\n     * for authenticated media will *not* be checked - it is the caller's responsibility\n     * to do so before calling this function. Note also that `useAuthentication`\n     * implies `allowRedirects`. Defaults to false (unauthenticated endpoints).\n     * @returns the avatar URL or null.\n     */\n    public mxcUrlToHttp(\n        mxcUrl: string,\n        width?: number,\n        height?: number,\n        resizeMethod?: string,\n        allowDirectLinks?: boolean,\n        allowRedirects?: boolean,\n        useAuthentication?: boolean,\n    ): string | null {\n        return getHttpUriForMxc(\n            this.baseUrl,\n            mxcUrl,\n            width,\n            height,\n            resizeMethod,\n            allowDirectLinks,\n            allowRedirects,\n            useAuthentication,\n        );\n    }\n\n    /**\n     * Specify the set_presence value to be used for subsequent calls to the Sync API.\n     * This has an advantage over calls to the PUT /presence API in that it\n     * doesn't clobber status_msg set by other devices.\n     * @param presence - the presence to specify to set_presence of sync calls\n     */\n    public async setSyncPresence(presence?: SetPresence): Promise<void> {\n        this.syncApi?.setPresence(presence);\n    }\n\n    /**\n     * @param opts - Options to apply\n     * @returns Promise which resolves\n     * @returns Rejects: with an error response.\n     * @throws If 'presence' isn't a valid presence enum value.\n     */\n    public async setPresence(opts: IPresenceOpts): Promise<void> {\n        const path = utils.encodeUri(\"/presence/$userId/status\", {\n            $userId: this.credentials.userId!,\n        });\n\n        const validStates = [\"offline\", \"online\", \"unavailable\"];\n        if (validStates.indexOf(opts.presence) === -1) {\n            throw new Error(\"Bad presence value: \" + opts.presence);\n        }\n        await this.http.authedRequest(Method.Put, path, undefined, opts);\n    }\n\n    /**\n     * @param userId - The user to get presence for\n     * @returns Promise which resolves: The presence state for this user.\n     * @returns Rejects: with an error response.\n     */\n    public getPresence(userId: string): Promise<IStatusResponse> {\n        const path = utils.encodeUri(\"/presence/$userId/status\", {\n            $userId: userId,\n        });\n\n        return this.http.authedRequest(Method.Get, path);\n    }\n\n    /**\n     * Retrieve older messages from the given room and put them in the timeline.\n     *\n     * If this is called multiple times whilst a request is ongoing, the <i>same</i>\n     * Promise will be returned. If there was a problem requesting scrollback, there\n     * will be a small delay before another request can be made (to prevent tight-looping\n     * when there is no connection).\n     *\n     * @param room - The room to get older messages in.\n     * @param limit - Optional. The maximum number of previous events to\n     * pull in. Default: 30.\n     * @returns Promise which resolves: Room. If you are at the beginning\n     * of the timeline, `Room.oldState.paginationToken` will be\n     * `null`.\n     * @returns Rejects: with an error response.\n     */\n    public scrollback(room: Room, limit = 30): Promise<Room> {\n        let timeToWaitMs = 0;\n\n        let info = this.ongoingScrollbacks[room.roomId] || {};\n        if (info.promise) {\n            return info.promise;\n        } else if (info.errorTs) {\n            const timeWaitedMs = Date.now() - info.errorTs;\n            timeToWaitMs = Math.max(SCROLLBACK_DELAY_MS - timeWaitedMs, 0);\n        }\n\n        if (room.oldState.paginationToken === null) {\n            return Promise.resolve(room); // already at the start.\n        }\n        // attempt to grab more events from the store first\n        const numAdded = this.store.scrollback(room, limit).length;\n        if (numAdded === limit) {\n            // store contained everything we needed.\n            return Promise.resolve(room);\n        }\n        // reduce the required number of events appropriately\n        limit = limit - numAdded;\n\n        const promise = new Promise<Room>((resolve, reject) => {\n            // wait for a time before doing this request\n            // (which may be 0 in order not to special case the code paths)\n            sleep(timeToWaitMs)\n                .then(() => {\n                    return this.createMessagesRequest(\n                        room.roomId,\n                        room.oldState.paginationToken,\n                        limit,\n                        Direction.Backward,\n                    );\n                })\n                .then((res: IMessagesResponse) => {\n                    const matrixEvents = res.chunk.map(this.getEventMapper());\n                    if (res.state) {\n                        const stateEvents = res.state.map(this.getEventMapper());\n                        room.currentState.setUnknownStateEvents(stateEvents);\n                    }\n\n                    const [timelineEvents, threadedEvents, unknownRelations] =\n                        room.partitionThreadedEvents(matrixEvents);\n\n                    this.processAggregatedTimelineEvents(room, timelineEvents);\n                    room.addEventsToTimeline(timelineEvents, true, true, room.getLiveTimeline());\n                    this.processThreadEvents(room, threadedEvents, true);\n                    unknownRelations.forEach((event) => room.relations.aggregateChildEvent(event));\n\n                    room.oldState.paginationToken = res.end ?? null;\n                    if (res.chunk.length === 0) {\n                        room.oldState.paginationToken = null;\n                    }\n                    this.store.storeEvents(room, matrixEvents, res.end ?? null, true);\n                    delete this.ongoingScrollbacks[room.roomId];\n                    resolve(room);\n                })\n                .catch((err) => {\n                    this.ongoingScrollbacks[room.roomId] = {\n                        errorTs: Date.now(),\n                    };\n                    reject(err);\n                });\n        });\n\n        info = { promise };\n\n        this.ongoingScrollbacks[room.roomId] = info;\n        return promise;\n    }\n\n    public getEventMapper(options?: MapperOpts): EventMapper {\n        return eventMapperFor(this, options || {});\n    }\n\n    /**\n     * Get an EventTimeline for the given event\n     *\n     * <p>If the EventTimelineSet object already has the given event in its store, the\n     * corresponding timeline will be returned. Otherwise, a /context request is\n     * made, and used to construct an EventTimeline.\n     * If the event does not belong to this EventTimelineSet then undefined will be returned.\n     *\n     * @param timelineSet -  The timelineSet to look for the event in, must be bound to a room\n     * @param eventId -  The ID of the event to look for\n     *\n     * @returns Promise which resolves:\n     *    {@link EventTimeline} including the given event\n     */\n    public async getEventTimeline(timelineSet: EventTimelineSet, eventId: string): Promise<Optional<EventTimeline>> {\n        // don't allow any timeline support unless it's been enabled.\n        if (!this.timelineSupport) {\n            throw new Error(\n                \"timeline support is disabled. Set the 'timelineSupport'\" +\n                    \" parameter to true when creating MatrixClient to enable it.\",\n            );\n        }\n\n        if (!timelineSet?.room) {\n            throw new Error(\"getEventTimeline only supports room timelines\");\n        }\n\n        if (timelineSet.getTimelineForEvent(eventId)) {\n            return timelineSet.getTimelineForEvent(eventId);\n        }\n\n        if (timelineSet.thread && this.supportsThreads()) {\n            return this.getThreadTimeline(timelineSet, eventId);\n        }\n\n        const path = utils.encodeUri(\"/rooms/$roomId/context/$eventId\", {\n            $roomId: timelineSet.room.roomId,\n            $eventId: eventId,\n        });\n\n        let params: Record<string, string | string[]> | undefined = undefined;\n        if (this.clientOpts?.lazyLoadMembers) {\n            params = { filter: JSON.stringify(Filter.LAZY_LOADING_MESSAGES_FILTER) };\n        }\n\n        // TODO: we should implement a backoff (as per scrollback()) to deal more nicely with HTTP errors.\n        const res = await this.http.authedRequest<IContextResponse>(Method.Get, path, params);\n        if (!res.event) {\n            throw new Error(\"'event' not in '/context' result - homeserver too old?\");\n        }\n\n        // by the time the request completes, the event might have ended up in the timeline.\n        if (timelineSet.getTimelineForEvent(eventId)) {\n            return timelineSet.getTimelineForEvent(eventId);\n        }\n\n        const mapper = this.getEventMapper();\n        const event = mapper(res.event);\n        if (event.isRelation(THREAD_RELATION_TYPE.name)) {\n            this.logger.warn(\"Tried loading a regular timeline at the position of a thread event\");\n            return undefined;\n        }\n        const events = [\n            // Order events from most recent to oldest (reverse-chronological).\n            // We start with the last event, since that's the point at which we have known state.\n            // events_after is already backwards; events_before is forwards.\n            ...res.events_after.reverse().map(mapper),\n            event,\n            ...res.events_before.map(mapper),\n        ];\n\n        // Here we handle non-thread timelines only, but still process any thread events to populate thread summaries.\n        let timeline = timelineSet.getTimelineForEvent(events[0].getId());\n        if (timeline) {\n            timeline.getState(EventTimeline.BACKWARDS)!.setUnknownStateEvents(res.state.map(mapper));\n        } else {\n            timeline = timelineSet.addTimeline();\n            timeline.initialiseState(res.state.map(mapper));\n            timeline.getState(EventTimeline.FORWARDS)!.paginationToken = res.end;\n        }\n\n        const [timelineEvents, threadedEvents, unknownRelations] = timelineSet.room.partitionThreadedEvents(events);\n        timelineSet.addEventsToTimeline(timelineEvents, true, false, timeline, res.start);\n        // The target event is not in a thread but process the contextual events, so we can show any threads around it.\n        this.processThreadEvents(timelineSet.room, threadedEvents, true);\n        this.processAggregatedTimelineEvents(timelineSet.room, timelineEvents);\n        unknownRelations.forEach((event) => timelineSet.relations.aggregateChildEvent(event));\n\n        // There is no guarantee that the event ended up in \"timeline\" (we might have switched to a neighbouring\n        // timeline) - so check the room's index again. On the other hand, there's no guarantee the event ended up\n        // anywhere, if it was later redacted, so we just return the timeline we first thought of.\n        return (\n            timelineSet.getTimelineForEvent(eventId) ??\n            timelineSet.room.findThreadForEvent(event)?.liveTimeline ?? // for Threads degraded support\n            timeline\n        );\n    }\n\n    public async getThreadTimeline(timelineSet: EventTimelineSet, eventId: string): Promise<EventTimeline | undefined> {\n        if (!this.supportsThreads()) {\n            throw new Error(\"could not get thread timeline: no client support\");\n        }\n\n        if (!timelineSet.room) {\n            throw new Error(\"could not get thread timeline: not a room timeline\");\n        }\n\n        if (!timelineSet.thread) {\n            throw new Error(\"could not get thread timeline: not a thread timeline\");\n        }\n\n        const path = utils.encodeUri(\"/rooms/$roomId/context/$eventId\", {\n            $roomId: timelineSet.room.roomId,\n            $eventId: eventId,\n        });\n\n        const params: Record<string, string | string[]> = {\n            limit: \"0\",\n        };\n        if (this.clientOpts?.lazyLoadMembers) {\n            params.filter = JSON.stringify(Filter.LAZY_LOADING_MESSAGES_FILTER);\n        }\n\n        // TODO: we should implement a backoff (as per scrollback()) to deal more nicely with HTTP errors.\n        const res = await this.http.authedRequest<IContextResponse>(Method.Get, path, params);\n        const mapper = this.getEventMapper();\n        const event = mapper(res.event);\n\n        if (!timelineSet.canContain(event)) {\n            return undefined;\n        }\n\n        const recurse = this.canSupport.get(Feature.RelationsRecursion) !== ServerSupport.Unsupported;\n        if (Thread.hasServerSideSupport) {\n            if (Thread.hasServerSideFwdPaginationSupport) {\n                if (!timelineSet.thread) {\n                    throw new Error(\"could not get thread timeline: not a thread timeline\");\n                }\n\n                const thread = timelineSet.thread;\n                const resOlder: IRelationsResponse = await this.fetchRelations(\n                    timelineSet.room.roomId,\n                    thread.id,\n                    null,\n                    null,\n                    { dir: Direction.Backward, from: res.start, recurse: recurse || undefined },\n                );\n                const resNewer: IRelationsResponse = await this.fetchRelations(\n                    timelineSet.room.roomId,\n                    thread.id,\n                    null,\n                    null,\n                    { dir: Direction.Forward, from: res.end, recurse: recurse || undefined },\n                );\n                const events = [\n                    // Order events from most recent to oldest (reverse-chronological).\n                    // We start with the last event, since that's the point at which we have known state.\n                    // events_after is already backwards; events_before is forwards.\n                    ...resNewer.chunk.reverse().filter(getRelationsThreadFilter(thread.id)).map(mapper),\n                    event,\n                    ...resOlder.chunk.filter(getRelationsThreadFilter(thread.id)).map(mapper),\n                ];\n\n                for (const event of events) {\n                    await timelineSet.thread?.processEvent(event);\n                }\n\n                // Here we handle non-thread timelines only, but still process any thread events to populate thread summaries.\n                let timeline = timelineSet.getTimelineForEvent(event.getId());\n                if (timeline) {\n                    timeline.getState(EventTimeline.BACKWARDS)!.setUnknownStateEvents(res.state.map(mapper));\n                } else {\n                    timeline = timelineSet.addTimeline();\n                    timeline.initialiseState(res.state.map(mapper));\n                }\n\n                timelineSet.addEventsToTimeline(events, true, false, timeline, resNewer.next_batch);\n                if (!resOlder.next_batch) {\n                    const originalEvent = await this.fetchRoomEvent(timelineSet.room.roomId, thread.id);\n                    timelineSet.addEventsToTimeline([mapper(originalEvent)], true, false, timeline, null);\n                }\n                timeline.setPaginationToken(resOlder.next_batch ?? null, Direction.Backward);\n                timeline.setPaginationToken(resNewer.next_batch ?? null, Direction.Forward);\n                this.processAggregatedTimelineEvents(timelineSet.room, events);\n\n                // There is no guarantee that the event ended up in \"timeline\" (we might have switched to a neighbouring\n                // timeline) - so check the room's index again. On the other hand, there's no guarantee the event ended up\n                // anywhere, if it was later redacted, so we just return the timeline we first thought of.\n                return timelineSet.getTimelineForEvent(eventId) ?? timeline;\n            } else {\n                // Where the event is a thread reply (not a root) and running in MSC-enabled mode the Thread timeline only\n                // functions contiguously, so we have to jump through some hoops to get our target event in it.\n                // XXX: workaround for https://github.com/vector-im/element-meta/issues/150\n\n                const thread = timelineSet.thread;\n\n                const resOlder = await this.fetchRelations(\n                    timelineSet.room.roomId,\n                    thread.id,\n                    THREAD_RELATION_TYPE.name,\n                    null,\n                    { dir: Direction.Backward, from: res.start, recurse: recurse || undefined },\n                );\n                const eventsNewer: IEvent[] = [];\n                let nextBatch: Optional<string> = res.end;\n                while (nextBatch) {\n                    const resNewer: IRelationsResponse = await this.fetchRelations(\n                        timelineSet.room.roomId,\n                        thread.id,\n                        THREAD_RELATION_TYPE.name,\n                        null,\n                        { dir: Direction.Forward, from: nextBatch, recurse: recurse || undefined },\n                    );\n                    nextBatch = resNewer.next_batch ?? null;\n                    eventsNewer.push(...resNewer.chunk);\n                }\n                const events = [\n                    // Order events from most recent to oldest (reverse-chronological).\n                    // We start with the last event, since that's the point at which we have known state.\n                    // events_after is already backwards; events_before is forwards.\n                    ...eventsNewer.reverse().map(mapper),\n                    event,\n                    ...resOlder.chunk.map(mapper),\n                ];\n                for (const event of events) {\n                    await timelineSet.thread?.processEvent(event);\n                }\n\n                // Here we handle non-thread timelines only, but still process any thread events to populate thread\n                // summaries.\n                const timeline = timelineSet.getLiveTimeline();\n                timeline.getState(EventTimeline.BACKWARDS)!.setUnknownStateEvents(res.state.map(mapper));\n\n                timelineSet.addEventsToTimeline(events, true, false, timeline, null);\n                if (!resOlder.next_batch) {\n                    const originalEvent = await this.fetchRoomEvent(timelineSet.room.roomId, thread.id);\n                    timelineSet.addEventsToTimeline([mapper(originalEvent)], true, false, timeline, null);\n                }\n                timeline.setPaginationToken(resOlder.next_batch ?? null, Direction.Backward);\n                timeline.setPaginationToken(null, Direction.Forward);\n                this.processAggregatedTimelineEvents(timelineSet.room, events);\n\n                return timeline;\n            }\n        }\n    }\n\n    /**\n     * Get an EventTimeline for the latest events in the room. This will just\n     * call `/messages` to get the latest message in the room, then use\n     * `client.getEventTimeline(...)` to construct a new timeline from it.\n     *\n     * @param timelineSet -  The timelineSet to find or add the timeline to\n     *\n     * @returns Promise which resolves:\n     *    {@link EventTimeline} timeline with the latest events in the room\n     */\n    public async getLatestTimeline(timelineSet: EventTimelineSet): Promise<Optional<EventTimeline>> {\n        // don't allow any timeline support unless it's been enabled.\n        if (!this.timelineSupport) {\n            throw new Error(\n                \"timeline support is disabled. Set the 'timelineSupport'\" +\n                    \" parameter to true when creating MatrixClient to enable it.\",\n            );\n        }\n\n        if (!timelineSet.room) {\n            throw new Error(\"getLatestTimeline only supports room timelines\");\n        }\n\n        let event: IRoomEvent | undefined;\n        if (timelineSet.threadListType !== null) {\n            const res = await this.createThreadListMessagesRequest(\n                timelineSet.room.roomId,\n                null,\n                1,\n                Direction.Backward,\n                timelineSet.threadListType,\n                timelineSet.getFilter(),\n            );\n            event = res.chunk?.[0];\n        } else if (timelineSet.thread && Thread.hasServerSideSupport) {\n            const recurse = this.canSupport.get(Feature.RelationsRecursion) !== ServerSupport.Unsupported;\n            const res = await this.fetchRelations(\n                timelineSet.room.roomId,\n                timelineSet.thread.id,\n                THREAD_RELATION_TYPE.name,\n                null,\n                { dir: Direction.Backward, limit: 1, recurse: recurse || undefined },\n            );\n            event = res.chunk?.[0];\n        } else {\n            const messagesPath = utils.encodeUri(\"/rooms/$roomId/messages\", {\n                $roomId: timelineSet.room.roomId,\n            });\n\n            const params: Record<string, string | string[]> = {\n                dir: \"b\",\n            };\n            if (this.clientOpts?.lazyLoadMembers) {\n                params.filter = JSON.stringify(Filter.LAZY_LOADING_MESSAGES_FILTER);\n            }\n\n            const res = await this.http.authedRequest<IMessagesResponse>(Method.Get, messagesPath, params);\n            event = res.chunk?.[0];\n        }\n        if (!event) {\n            throw new Error(\"No message returned when trying to construct getLatestTimeline\");\n        }\n\n        return this.getEventTimeline(timelineSet, event.event_id);\n    }\n\n    /**\n     * Makes a request to /messages with the appropriate lazy loading filter set.\n     * XXX: if we do get rid of scrollback (as it's not used at the moment),\n     * we could inline this method again in paginateEventTimeline as that would\n     * then be the only call-site\n     * @param limit - the maximum amount of events the retrieve\n     * @param dir - 'f' or 'b'\n     * @param timelineFilter - the timeline filter to pass\n     */\n    // XXX: Intended private, used in code.\n    public createMessagesRequest(\n        roomId: string,\n        fromToken: string | null,\n        limit = 30,\n        dir: Direction,\n        timelineFilter?: Filter,\n    ): Promise<IMessagesResponse> {\n        const path = utils.encodeUri(\"/rooms/$roomId/messages\", { $roomId: roomId });\n\n        const params: Record<string, string> = {\n            limit: limit.toString(),\n            dir: dir,\n        };\n\n        if (fromToken) {\n            params.from = fromToken;\n        }\n\n        let filter: IRoomEventFilter | null = null;\n        if (this.clientOpts?.lazyLoadMembers) {\n            // create a shallow copy of LAZY_LOADING_MESSAGES_FILTER,\n            // so the timelineFilter doesn't get written into it below\n            filter = Object.assign({}, Filter.LAZY_LOADING_MESSAGES_FILTER);\n        }\n        if (timelineFilter) {\n            // XXX: it's horrific that /messages' filter parameter doesn't match\n            // /sync's one - see https://matrix.org/jira/browse/SPEC-451\n            filter = filter || {};\n            Object.assign(filter, timelineFilter.getRoomTimelineFilterComponent()?.toJSON());\n        }\n        if (filter) {\n            params.filter = JSON.stringify(filter);\n        }\n        return this.http.authedRequest(Method.Get, path, params);\n    }\n\n    /**\n     * Makes a request to /messages with the appropriate lazy loading filter set.\n     * XXX: if we do get rid of scrollback (as it's not used at the moment),\n     * we could inline this method again in paginateEventTimeline as that would\n     * then be the only call-site\n     * @param limit - the maximum amount of events the retrieve\n     * @param dir - 'f' or 'b'\n     * @param timelineFilter - the timeline filter to pass\n     */\n    // XXX: Intended private, used by room.fetchRoomThreads\n    public createThreadListMessagesRequest(\n        roomId: string,\n        fromToken: string | null,\n        limit = 30,\n        dir = Direction.Backward,\n        threadListType: ThreadFilterType | null = ThreadFilterType.All,\n        timelineFilter?: Filter,\n    ): Promise<IMessagesResponse> {\n        const path = utils.encodeUri(\"/rooms/$roomId/threads\", { $roomId: roomId });\n\n        const params: Record<string, string> = {\n            limit: limit.toString(),\n            dir: dir,\n            include: threadFilterTypeToFilter(threadListType),\n        };\n\n        if (fromToken) {\n            params.from = fromToken;\n        }\n\n        let filter: IRoomEventFilter = {};\n        if (this.clientOpts?.lazyLoadMembers) {\n            // create a shallow copy of LAZY_LOADING_MESSAGES_FILTER,\n            // so the timelineFilter doesn't get written into it below\n            filter = {\n                ...Filter.LAZY_LOADING_MESSAGES_FILTER,\n            };\n        }\n        if (timelineFilter) {\n            // XXX: it's horrific that /messages' filter parameter doesn't match\n            // /sync's one - see https://matrix.org/jira/browse/SPEC-451\n            filter = {\n                ...filter,\n                ...timelineFilter.getRoomTimelineFilterComponent()?.toJSON(),\n            };\n        }\n        if (Object.keys(filter).length) {\n            params.filter = JSON.stringify(filter);\n        }\n\n        const opts = {\n            prefix:\n                Thread.hasServerSideListSupport === FeatureSupport.Stable\n                    ? ClientPrefix.V1\n                    : \"/_matrix/client/unstable/org.matrix.msc3856\",\n        };\n\n        return this.http\n            .authedRequest<IThreadedMessagesResponse>(Method.Get, path, params, undefined, opts)\n            .then((res) => ({\n                ...res,\n                chunk: res.chunk?.reverse(),\n                start: res.prev_batch,\n                end: res.next_batch,\n            }));\n    }\n\n    /**\n     * Take an EventTimeline, and back/forward-fill results.\n     *\n     * @param eventTimeline - timeline object to be updated\n     *\n     * @returns Promise which resolves to a boolean: false if there are no\n     *    events and we reached either end of the timeline; else true.\n     */\n    public paginateEventTimeline(eventTimeline: EventTimeline, opts: IPaginateOpts): Promise<boolean> {\n        const isNotifTimeline = eventTimeline.getTimelineSet() === this.notifTimelineSet;\n        const room = this.getRoom(eventTimeline.getRoomId()!);\n        const threadListType = eventTimeline.getTimelineSet().threadListType;\n        const thread = eventTimeline.getTimelineSet().thread;\n\n        // TODO: we should implement a backoff (as per scrollback()) to deal more\n        // nicely with HTTP errors.\n        opts = opts || {};\n        const backwards = opts.backwards || false;\n\n        if (isNotifTimeline) {\n            if (!backwards) {\n                throw new Error(\"paginateNotifTimeline can only paginate backwards\");\n            }\n        }\n\n        const dir = backwards ? EventTimeline.BACKWARDS : EventTimeline.FORWARDS;\n\n        const token = eventTimeline.getPaginationToken(dir);\n        const pendingRequest = eventTimeline.paginationRequests[dir];\n\n        if (pendingRequest) {\n            // already a request in progress - return the existing promise\n            return pendingRequest;\n        }\n\n        let path: string;\n        let params: Record<string, string>;\n        let promise: Promise<boolean>;\n\n        if (isNotifTimeline) {\n            path = \"/notifications\";\n            params = {\n                limit: (opts.limit ?? 30).toString(),\n                only: \"highlight\",\n            };\n\n            if (token && token !== \"end\") {\n                params.from = token;\n            }\n\n            promise = this.http\n                .authedRequest<INotificationsResponse>(Method.Get, path, params)\n                .then(async (res) => {\n                    const token = res.next_token;\n                    const matrixEvents: MatrixEvent[] = [];\n\n                    res.notifications = res.notifications.filter(noUnsafeEventProps);\n\n                    for (let i = 0; i < res.notifications.length; i++) {\n                        const notification = res.notifications[i];\n                        const event = this.getEventMapper()(notification.event);\n\n                        // @TODO(kerrya) reprocessing every notification is ugly\n                        // remove if we get server MSC3994 support\n                        this.getPushDetailsForEvent(event, true);\n\n                        event.event.room_id = notification.room_id; // XXX: gutwrenching\n                        matrixEvents[i] = event;\n                    }\n\n                    // No need to partition events for threads here, everything lives\n                    // in the notification timeline set\n                    const timelineSet = eventTimeline.getTimelineSet();\n                    timelineSet.addEventsToTimeline(matrixEvents, backwards, false, eventTimeline, token);\n                    this.processAggregatedTimelineEvents(timelineSet.room, matrixEvents);\n\n                    // if we've hit the end of the timeline, we need to stop trying to\n                    // paginate. We need to keep the 'forwards' token though, to make sure\n                    // we can recover from gappy syncs.\n                    if (backwards && !res.next_token) {\n                        eventTimeline.setPaginationToken(null, dir);\n                    }\n                    return Boolean(res.next_token);\n                })\n                .finally(() => {\n                    eventTimeline.paginationRequests[dir] = null;\n                });\n            eventTimeline.paginationRequests[dir] = promise;\n        } else if (threadListType !== null) {\n            if (!room) {\n                throw new Error(\"Unknown room \" + eventTimeline.getRoomId());\n            }\n\n            if (!Thread.hasServerSideFwdPaginationSupport && dir === Direction.Forward) {\n                throw new Error(\"Cannot paginate threads forwards without server-side support for MSC 3715\");\n            }\n\n            promise = this.createThreadListMessagesRequest(\n                eventTimeline.getRoomId()!,\n                token,\n                opts.limit,\n                dir,\n                threadListType,\n                eventTimeline.getFilter(),\n            )\n                .then((res) => {\n                    if (res.state) {\n                        const roomState = eventTimeline.getState(dir)!;\n                        const stateEvents = res.state.filter(noUnsafeEventProps).map(this.getEventMapper());\n                        roomState.setUnknownStateEvents(stateEvents);\n                    }\n\n                    const token = res.end;\n                    const matrixEvents = res.chunk.filter(noUnsafeEventProps).map(this.getEventMapper());\n\n                    const timelineSet = eventTimeline.getTimelineSet();\n                    timelineSet.addEventsToTimeline(matrixEvents, backwards, false, eventTimeline, token);\n                    this.processAggregatedTimelineEvents(room, matrixEvents);\n                    this.processThreadRoots(room, matrixEvents, backwards);\n\n                    // if we've hit the end of the timeline, we need to stop trying to\n                    // paginate. We need to keep the 'forwards' token though, to make sure\n                    // we can recover from gappy syncs.\n                    if (backwards && res.end == res.start) {\n                        eventTimeline.setPaginationToken(null, dir);\n                    }\n                    return res.end !== res.start;\n                })\n                .finally(() => {\n                    eventTimeline.paginationRequests[dir] = null;\n                });\n            eventTimeline.paginationRequests[dir] = promise;\n        } else if (thread) {\n            const room = this.getRoom(eventTimeline.getRoomId() ?? undefined);\n            if (!room) {\n                throw new Error(\"Unknown room \" + eventTimeline.getRoomId());\n            }\n\n            const recurse = this.canSupport.get(Feature.RelationsRecursion) !== ServerSupport.Unsupported;\n            promise = this.fetchRelations(eventTimeline.getRoomId() ?? \"\", thread.id, null, null, {\n                dir,\n                limit: opts.limit,\n                from: token ?? undefined,\n                recurse: recurse || undefined,\n            })\n                .then(async (res) => {\n                    const mapper = this.getEventMapper();\n                    const matrixEvents = res.chunk\n                        .filter(noUnsafeEventProps)\n                        .filter(getRelationsThreadFilter(thread.id))\n                        .map(mapper);\n\n                    // Process latest events first\n                    for (const event of matrixEvents.slice().reverse()) {\n                        await thread?.processEvent(event);\n                        const sender = event.getSender()!;\n                        if (!backwards || thread?.getEventReadUpTo(sender) === null) {\n                            room.addLocalEchoReceipt(sender, event, ReceiptType.Read);\n                        }\n                    }\n\n                    const newToken = res.next_batch;\n\n                    const timelineSet = eventTimeline.getTimelineSet();\n                    timelineSet.addEventsToTimeline(matrixEvents, backwards, false, eventTimeline, newToken ?? null);\n                    if (!newToken && backwards) {\n                        const originalEvent =\n                            thread.rootEvent ??\n                            mapper(await this.fetchRoomEvent(eventTimeline.getRoomId() ?? \"\", thread.id));\n                        timelineSet.addEventsToTimeline([originalEvent], true, false, eventTimeline, null);\n                    }\n                    this.processAggregatedTimelineEvents(timelineSet.room, matrixEvents);\n\n                    // if we've hit the end of the timeline, we need to stop trying to\n                    // paginate. We need to keep the 'forwards' token though, to make sure\n                    // we can recover from gappy syncs.\n                    if (backwards && !newToken) {\n                        eventTimeline.setPaginationToken(null, dir);\n                    }\n                    return Boolean(newToken);\n                })\n                .finally(() => {\n                    eventTimeline.paginationRequests[dir] = null;\n                });\n            eventTimeline.paginationRequests[dir] = promise;\n        } else {\n            if (!room) {\n                throw new Error(\"Unknown room \" + eventTimeline.getRoomId());\n            }\n\n            promise = this.createMessagesRequest(\n                eventTimeline.getRoomId()!,\n                token,\n                opts.limit,\n                dir,\n                eventTimeline.getFilter(),\n            )\n                .then((res) => {\n                    if (res.state) {\n                        const roomState = eventTimeline.getState(dir)!;\n                        const stateEvents = res.state.filter(noUnsafeEventProps).map(this.getEventMapper());\n                        roomState.setUnknownStateEvents(stateEvents);\n                    }\n                    const token = res.end;\n                    const matrixEvents = res.chunk.filter(noUnsafeEventProps).map(this.getEventMapper());\n\n                    const timelineSet = eventTimeline.getTimelineSet();\n                    const [timelineEvents, , unknownRelations] = room.partitionThreadedEvents(matrixEvents);\n                    timelineSet.addEventsToTimeline(timelineEvents, backwards, false, eventTimeline, token);\n                    this.processAggregatedTimelineEvents(room, timelineEvents);\n                    this.processThreadRoots(\n                        room,\n                        timelineEvents.filter((it) => it.getServerAggregatedRelation(THREAD_RELATION_TYPE.name)),\n                        false,\n                    );\n                    unknownRelations.forEach((event) => room.relations.aggregateChildEvent(event));\n\n                    const atEnd = res.end === undefined || res.end === res.start;\n\n                    // if we've hit the end of the timeline, we need to stop trying to\n                    // paginate. We need to keep the 'forwards' token though, to make sure\n                    // we can recover from gappy syncs.\n                    if (backwards && atEnd) {\n                        eventTimeline.setPaginationToken(null, dir);\n                    }\n                    return !atEnd;\n                })\n                .finally(() => {\n                    eventTimeline.paginationRequests[dir] = null;\n                });\n            eventTimeline.paginationRequests[dir] = promise;\n        }\n\n        return promise;\n    }\n\n    /**\n     * Reset the notifTimelineSet entirely, paginating in some historical notifs as\n     * a starting point for subsequent pagination.\n     */\n    public resetNotifTimelineSet(): void {\n        if (!this.notifTimelineSet) {\n            return;\n        }\n\n        // FIXME: This thing is a total hack, and results in duplicate events being\n        // added to the timeline both from /sync and /notifications, and lots of\n        // slow and wasteful processing and pagination.  The correct solution is to\n        // extend /messages or /search or something to filter on notifications.\n\n        // use the fictitious token 'end'. in practice we would ideally give it\n        // the oldest backwards pagination token from /sync, but /sync doesn't\n        // know about /notifications, so we have no choice but to start paginating\n        // from the current point in time.  This may well overlap with historical\n        // notifs which are then inserted into the timeline by /sync responses.\n        this.notifTimelineSet.resetLiveTimeline(\"end\");\n\n        // we could try to paginate a single event at this point in order to get\n        // a more valid pagination token, but it just ends up with an out of order\n        // timeline. given what a mess this is and given we're going to have duplicate\n        // events anyway, just leave it with the dummy token for now.\n        /*\n        this.paginateNotifTimeline(this._notifTimelineSet.getLiveTimeline(), {\n            backwards: true,\n            limit: 1\n        });\n        */\n    }\n\n    /**\n     * Peek into a room and receive updates about the room. This only works if the\n     * history visibility for the room is world_readable.\n     * @param roomId - The room to attempt to peek into.\n     * @param limit - The number of timeline events to initially retrieve.\n     * @returns Promise which resolves: Room object\n     * @returns Rejects: with an error response.\n     */\n    public peekInRoom(roomId: string, limit: number = 20): Promise<Room> {\n        this.peekSync?.stopPeeking();\n        this.peekSync = new SyncApi(this, this.clientOpts, this.buildSyncApiOptions());\n        return this.peekSync.peek(roomId, limit);\n    }\n\n    /**\n     * Stop any ongoing room peeking.\n     */\n    public stopPeeking(): void {\n        if (this.peekSync) {\n            this.peekSync.stopPeeking();\n            this.peekSync = null;\n        }\n    }\n\n    /**\n     * Set r/w flags for guest access in a room.\n     * @param roomId - The room to configure guest access in.\n     * @param opts - Options\n     * @returns Promise which resolves\n     * @returns Rejects: with an error response.\n     */\n    public setGuestAccess(roomId: string, opts: IGuestAccessOpts): Promise<void> {\n        const writePromise = this.sendStateEvent(\n            roomId,\n            EventType.RoomGuestAccess,\n            {\n                guest_access: opts.allowJoin ? GuestAccess.CanJoin : GuestAccess.Forbidden,\n            },\n            \"\",\n        );\n\n        let readPromise: Promise<unknown> = Promise.resolve();\n        if (opts.allowRead) {\n            readPromise = this.sendStateEvent(\n                roomId,\n                EventType.RoomHistoryVisibility,\n                {\n                    history_visibility: HistoryVisibility.WorldReadable,\n                },\n                \"\",\n            );\n        }\n\n        return Promise.all([readPromise, writePromise]).then(); // .then() to hide results for contract\n    }\n\n    /**\n     * Requests an email verification token for the purposes of registration.\n     * This API requests a token from the homeserver.\n     * The doesServerRequireIdServerParam() method can be used to determine if\n     * the server requires the id_server parameter to be provided.\n     *\n     * Parameters and return value are as for requestEmailToken\n\n     * @param email - As requestEmailToken\n     * @param clientSecret - As requestEmailToken\n     * @param sendAttempt - As requestEmailToken\n     * @param nextLink - As requestEmailToken\n     * @returns Promise which resolves: As requestEmailToken\n     */\n    public requestRegisterEmailToken(\n        email: string,\n        clientSecret: string,\n        sendAttempt: number,\n        nextLink?: string,\n    ): Promise<IRequestTokenResponse> {\n        return this.requestTokenFromEndpoint(\"/register/email/requestToken\", {\n            email: email,\n            client_secret: clientSecret,\n            send_attempt: sendAttempt,\n            next_link: nextLink,\n        });\n    }\n\n    /**\n     * Requests a text message verification token for the purposes of registration.\n     * This API requests a token from the homeserver.\n     * The doesServerRequireIdServerParam() method can be used to determine if\n     * the server requires the id_server parameter to be provided.\n     *\n     * @param phoneCountry - The ISO 3166-1 alpha-2 code for the country in which\n     *    phoneNumber should be parsed relative to.\n     * @param phoneNumber - The phone number, in national or international format\n     * @param clientSecret - As requestEmailToken\n     * @param sendAttempt - As requestEmailToken\n     * @param nextLink - As requestEmailToken\n     * @returns Promise which resolves: As requestEmailToken\n     */\n    public requestRegisterMsisdnToken(\n        phoneCountry: string,\n        phoneNumber: string,\n        clientSecret: string,\n        sendAttempt: number,\n        nextLink?: string,\n    ): Promise<IRequestMsisdnTokenResponse> {\n        return this.requestTokenFromEndpoint(\"/register/msisdn/requestToken\", {\n            country: phoneCountry,\n            phone_number: phoneNumber,\n            client_secret: clientSecret,\n            send_attempt: sendAttempt,\n            next_link: nextLink,\n        });\n    }\n\n    /**\n     * Requests an email verification token for the purposes of adding a\n     * third party identifier to an account.\n     * This API requests a token from the homeserver.\n     * The doesServerRequireIdServerParam() method can be used to determine if\n     * the server requires the id_server parameter to be provided.\n     * If an account with the given email address already exists and is\n     * associated with an account other than the one the user is authed as,\n     * it will either send an email to the address informing them of this\n     * or return M_THREEPID_IN_USE (which one is up to the homeserver).\n     *\n     * @param email - As requestEmailToken\n     * @param clientSecret - As requestEmailToken\n     * @param sendAttempt - As requestEmailToken\n     * @param nextLink - As requestEmailToken\n     * @returns Promise which resolves: As requestEmailToken\n     */\n    public requestAdd3pidEmailToken(\n        email: string,\n        clientSecret: string,\n        sendAttempt: number,\n        nextLink?: string,\n    ): Promise<IRequestTokenResponse> {\n        return this.requestTokenFromEndpoint(\"/account/3pid/email/requestToken\", {\n            email: email,\n            client_secret: clientSecret,\n            send_attempt: sendAttempt,\n            next_link: nextLink,\n        });\n    }\n\n    /**\n     * Requests a text message verification token for the purposes of adding a\n     * third party identifier to an account.\n     * This API proxies the identity server /validate/email/requestToken API,\n     * adding specific behaviour for the addition of phone numbers to an\n     * account, as requestAdd3pidEmailToken.\n     *\n     * @param phoneCountry - As requestRegisterMsisdnToken\n     * @param phoneNumber - As requestRegisterMsisdnToken\n     * @param clientSecret - As requestEmailToken\n     * @param sendAttempt - As requestEmailToken\n     * @param nextLink - As requestEmailToken\n     * @returns Promise which resolves: As requestEmailToken\n     */\n    public requestAdd3pidMsisdnToken(\n        phoneCountry: string,\n        phoneNumber: string,\n        clientSecret: string,\n        sendAttempt: number,\n        nextLink?: string,\n    ): Promise<IRequestMsisdnTokenResponse> {\n        return this.requestTokenFromEndpoint(\"/account/3pid/msisdn/requestToken\", {\n            country: phoneCountry,\n            phone_number: phoneNumber,\n            client_secret: clientSecret,\n            send_attempt: sendAttempt,\n            next_link: nextLink,\n        });\n    }\n\n    /**\n     * Requests an email verification token for the purposes of resetting\n     * the password on an account.\n     * This API proxies the identity server /validate/email/requestToken API,\n     * adding specific behaviour for the password resetting. Specifically,\n     * if no account with the given email address exists, it may either\n     * return M_THREEPID_NOT_FOUND or send an email\n     * to the address informing them of this (which one is up to the homeserver).\n     *\n     * requestEmailToken calls the equivalent API directly on the identity server,\n     * therefore bypassing the password reset specific logic.\n     *\n     * @param email - As requestEmailToken\n     * @param clientSecret - As requestEmailToken\n     * @param sendAttempt - As requestEmailToken\n     * @param nextLink - As requestEmailToken\n     * @returns Promise which resolves: As requestEmailToken\n     */\n    public requestPasswordEmailToken(\n        email: string,\n        clientSecret: string,\n        sendAttempt: number,\n        nextLink?: string,\n    ): Promise<IRequestTokenResponse> {\n        return this.requestTokenFromEndpoint(\"/account/password/email/requestToken\", {\n            email: email,\n            client_secret: clientSecret,\n            send_attempt: sendAttempt,\n            next_link: nextLink,\n        });\n    }\n\n    /**\n     * Requests a text message verification token for the purposes of resetting\n     * the password on an account.\n     * This API proxies the identity server /validate/email/requestToken API,\n     * adding specific behaviour for the password resetting, as requestPasswordEmailToken.\n     *\n     * @param phoneCountry - As requestRegisterMsisdnToken\n     * @param phoneNumber - As requestRegisterMsisdnToken\n     * @param clientSecret - As requestEmailToken\n     * @param sendAttempt - As requestEmailToken\n     * @param nextLink - As requestEmailToken\n     * @returns Promise which resolves: As requestEmailToken\n     */\n    public requestPasswordMsisdnToken(\n        phoneCountry: string,\n        phoneNumber: string,\n        clientSecret: string,\n        sendAttempt: number,\n        nextLink: string,\n    ): Promise<IRequestMsisdnTokenResponse> {\n        return this.requestTokenFromEndpoint(\"/account/password/msisdn/requestToken\", {\n            country: phoneCountry,\n            phone_number: phoneNumber,\n            client_secret: clientSecret,\n            send_attempt: sendAttempt,\n            next_link: nextLink,\n        });\n    }\n\n    /**\n     * Internal utility function for requesting validation tokens from usage-specific\n     * requestToken endpoints.\n     *\n     * @param endpoint - The endpoint to send the request to\n     * @param params - Parameters for the POST request\n     * @returns Promise which resolves: As requestEmailToken\n     */\n    private async requestTokenFromEndpoint<T extends IRequestTokenResponse>(\n        endpoint: string,\n        params: QueryDict,\n    ): Promise<T> {\n        const postParams = Object.assign({}, params);\n\n        return this.http.request(Method.Post, endpoint, undefined, postParams);\n    }\n\n    /**\n     * Get the room-kind push rule associated with a room.\n     * @param scope - \"global\" or device-specific.\n     * @param roomId - the id of the room.\n     * @returns the rule or undefined.\n     */\n    public getRoomPushRule(scope: \"global\" | \"device\", roomId: string): IPushRule | undefined {\n        // There can be only room-kind push rule per room\n        // and its id is the room id.\n        if (this.pushRules) {\n            return this.pushRules[scope]?.room?.find((rule) => rule.rule_id === roomId);\n        } else {\n            throw new Error(\"SyncApi.sync() must be done before accessing to push rules.\");\n        }\n    }\n\n    /**\n     * Set a room-kind muting push rule in a room.\n     * The operation also updates MatrixClient.pushRules at the end.\n     * @param scope - \"global\" or device-specific.\n     * @param roomId - the id of the room.\n     * @param mute - the mute state.\n     * @returns Promise which resolves: result object\n     * @returns Rejects: with an error response.\n     */\n    public setRoomMutePushRule(scope: \"global\" | \"device\", roomId: string, mute: boolean): Promise<void> | undefined {\n        let promise: Promise<unknown> | undefined;\n        let hasDontNotifyRule = false;\n\n        // Get the existing room-kind push rule if any\n        const roomPushRule = this.getRoomPushRule(scope, roomId);\n        if (roomPushRule?.actions.includes(PushRuleActionName.DontNotify)) {\n            hasDontNotifyRule = true;\n        }\n\n        if (!mute) {\n            // Remove the rule only if it is a muting rule\n            if (hasDontNotifyRule) {\n                promise = this.deletePushRule(scope, PushRuleKind.RoomSpecific, roomPushRule!.rule_id);\n            }\n        } else {\n            if (!roomPushRule) {\n                promise = this.addPushRule(scope, PushRuleKind.RoomSpecific, roomId, {\n                    actions: [PushRuleActionName.DontNotify],\n                });\n            } else if (!hasDontNotifyRule) {\n                // Remove the existing one before setting the mute push rule\n                // This is a workaround to SYN-590 (Push rule update fails)\n                const doneResolvers = Promise.withResolvers<void>();\n                this.deletePushRule(scope, PushRuleKind.RoomSpecific, roomPushRule.rule_id)\n                    .then(() => {\n                        this.addPushRule(scope, PushRuleKind.RoomSpecific, roomId, {\n                            actions: [PushRuleActionName.DontNotify],\n                        })\n                            .then(() => {\n                                doneResolvers.resolve();\n                            })\n                            .catch((err) => {\n                                doneResolvers.reject(err);\n                            });\n                    })\n                    .catch((err) => {\n                        doneResolvers.reject(err);\n                    });\n\n                promise = doneResolvers.promise;\n            }\n        }\n\n        if (promise) {\n            return new Promise<void>((resolve, reject) => {\n                // Update this.pushRules when the operation completes\n                promise!\n                    .then(() => {\n                        this.getPushRules()\n                            .then((result) => {\n                                this.pushRules = result;\n                                resolve();\n                            })\n                            .catch((err) => {\n                                reject(err);\n                            });\n                    })\n                    .catch((err: Error) => {\n                        // Update it even if the previous operation fails. This can help the\n                        // app to recover when push settings has been modified from another client\n                        this.getPushRules()\n                            .then((result) => {\n                                this.pushRules = result;\n                                reject(err);\n                            })\n                            .catch((err2) => {\n                                reject(err);\n                            });\n                    });\n            });\n        }\n    }\n\n    public searchMessageText(opts: ISearchOpts): Promise<ISearchResponse> {\n        const roomEvents: ISearchRequestBody[\"search_categories\"][\"room_events\"] = {\n            search_term: opts.query,\n        };\n\n        if (\"keys\" in opts) {\n            roomEvents.keys = opts.keys;\n        }\n\n        return this.search({\n            body: {\n                search_categories: {\n                    room_events: roomEvents,\n                },\n            },\n        });\n    }\n\n    /**\n     * Perform a server-side search for room events.\n     *\n     * The returned promise resolves to an object containing the fields:\n     *\n     *  * count:       estimate of the number of results\n     *  * next_batch:  token for back-pagination; if undefined, there are no more results\n     *  * highlights:  a list of words to highlight from the stemming algorithm\n     *  * results:     a list of results\n     *\n     * Each entry in the results list is a SearchResult.\n     *\n     * @returns Promise which resolves: result object\n     * @returns Rejects: with an error response.\n     */\n    public searchRoomEvents(opts: IEventSearchOpts): Promise<ISearchResults> {\n        // TODO: support search groups\n\n        const body = {\n            search_categories: {\n                room_events: {\n                    search_term: opts.term,\n                    filter: opts.filter,\n                    order_by: SearchOrderBy.Recent,\n                    event_context: {\n                        before_limit: 1,\n                        after_limit: 1,\n                        include_profile: true,\n                    },\n                },\n            },\n        };\n\n        const searchResults: ISearchResults = {\n            _query: body,\n            results: [],\n            highlights: [],\n        };\n\n        return this.search({ body: body }).then((res) => this.processRoomEventsSearch(searchResults, res));\n    }\n\n    /**\n     * Take a result from an earlier searchRoomEvents call, and backfill results.\n     *\n     * @param searchResults -  the results object to be updated\n     * @returns Promise which resolves: updated result object\n     * @returns Rejects: with an error response.\n     */\n    public backPaginateRoomEventsSearch<T extends ISearchResults>(searchResults: T): Promise<T> {\n        // TODO: we should implement a backoff (as per scrollback()) to deal more\n        // nicely with HTTP errors.\n\n        if (!searchResults.next_batch) {\n            return Promise.reject(new Error(\"Cannot backpaginate event search any further\"));\n        }\n\n        if (searchResults.pendingRequest) {\n            // already a request in progress - return the existing promise\n            return searchResults.pendingRequest as Promise<T>;\n        }\n\n        const searchOpts = {\n            body: searchResults._query!,\n            next_batch: searchResults.next_batch,\n        };\n\n        const promise = this.search(searchOpts, searchResults.abortSignal)\n            .then((res) => this.processRoomEventsSearch(searchResults, res))\n            .finally(() => {\n                searchResults.pendingRequest = undefined;\n            });\n        searchResults.pendingRequest = promise;\n\n        return promise;\n    }\n\n    /**\n     * helper for searchRoomEvents and backPaginateRoomEventsSearch. Processes the\n     * response from the API call and updates the searchResults\n     *\n     * @returns searchResults\n     * @internal\n     */\n    // XXX: Intended private, used in code\n    public processRoomEventsSearch<T extends ISearchResults>(searchResults: T, response: ISearchResponse): T {\n        const roomEvents = response.search_categories.room_events;\n\n        searchResults.count = roomEvents.count;\n        searchResults.next_batch = roomEvents.next_batch;\n\n        // combine the highlight list with our existing list;\n        const highlights = new Set<string>(roomEvents.highlights);\n        searchResults.highlights.forEach((hl) => {\n            highlights.add(hl);\n        });\n\n        // turn it back into a list.\n        searchResults.highlights = Array.from(highlights);\n\n        const mapper = this.getEventMapper();\n\n        // append the new results to our existing results\n        const resultsLength = roomEvents.results?.length ?? 0;\n        for (let i = 0; i < resultsLength; i++) {\n            const sr = SearchResult.fromJson(roomEvents.results![i], mapper);\n            const room = this.getRoom(sr.context.getEvent().getRoomId());\n            if (room) {\n                for (const ev of sr.context.getTimeline()) {\n                    ev.setMetadata(room.currentState, false);\n                }\n            }\n            searchResults.results.push(sr);\n        }\n        return searchResults;\n    }\n\n    /**\n     * Populate the store with rooms the user has left.\n     * @returns Promise which resolves: TODO - Resolved when the rooms have\n     * been added to the data store.\n     * @returns Rejects: with an error response.\n     */\n    public syncLeftRooms(): Promise<Room[]> {\n        // Guard against multiple calls whilst ongoing and multiple calls post success\n        if (this.syncedLeftRooms) {\n            return Promise.resolve([]); // don't call syncRooms again if it succeeded.\n        }\n        if (this.syncLeftRoomsPromise) {\n            return this.syncLeftRoomsPromise; // return the ongoing request\n        }\n        const syncApi = new SyncApi(this, this.clientOpts, this.buildSyncApiOptions());\n        this.syncLeftRoomsPromise = syncApi.syncLeftRooms();\n\n        // cleanup locks\n        this.syncLeftRoomsPromise\n            .then(() => {\n                this.logger.debug(\"Marking success of sync left room request\");\n                this.syncedLeftRooms = true; // flip the bit on success\n            })\n            .finally(() => {\n                this.syncLeftRoomsPromise = undefined; // cleanup ongoing request state\n            });\n\n        return this.syncLeftRoomsPromise;\n    }\n\n    /**\n     * Create a new filter.\n     * @param content - The HTTP body for the request\n     * @returns Promise which resolves to a Filter object.\n     * @returns Rejects: with an error response.\n     */\n    public createFilter(content: IFilterDefinition): Promise<Filter> {\n        const path = utils.encodeUri(\"/user/$userId/filter\", {\n            $userId: this.credentials.userId!,\n        });\n        return this.http.authedRequest<IFilterResponse>(Method.Post, path, undefined, content).then((response) => {\n            // persist the filter\n            const filter = Filter.fromJson(this.credentials.userId, response.filter_id, content);\n            this.store.storeFilter(filter);\n            return filter;\n        });\n    }\n\n    /**\n     * Retrieve a filter.\n     * @param userId - The user ID of the filter owner\n     * @param filterId - The filter ID to retrieve\n     * @param allowCached - True to allow cached filters to be returned.\n     * Default: True.\n     * @returns Promise which resolves: a Filter object\n     * @returns Rejects: with an error response.\n     */\n    public getFilter(userId: string, filterId: string, allowCached: boolean): Promise<Filter> {\n        if (allowCached) {\n            const filter = this.store.getFilter(userId, filterId);\n            if (filter) {\n                return Promise.resolve(filter);\n            }\n        }\n\n        const path = utils.encodeUri(\"/user/$userId/filter/$filterId\", {\n            $userId: userId,\n            $filterId: filterId,\n        });\n\n        return this.http.authedRequest<IFilterDefinition>(Method.Get, path).then((response) => {\n            // persist the filter\n            const filter = Filter.fromJson(userId, filterId, response);\n            this.store.storeFilter(filter);\n            return filter;\n        });\n    }\n\n    /**\n     * @returns Filter ID\n     */\n    public async getOrCreateFilter(filterName: string, filter: Filter): Promise<string> {\n        const filterId = this.store.getFilterIdByName(filterName);\n        let existingId: string | undefined;\n\n        if (filterId) {\n            // check that the existing filter matches our expectations\n            try {\n                const existingFilter = await this.getFilter(this.credentials.userId!, filterId, true);\n                if (existingFilter) {\n                    const oldDef = existingFilter.getDefinition();\n                    const newDef = filter.getDefinition();\n\n                    if (utils.deepCompare(oldDef, newDef)) {\n                        // super, just use that.\n                        // debuglog(\"Using existing filter ID %s: %s\", filterId,\n                        //          JSON.stringify(oldDef));\n                        existingId = filterId;\n                    }\n                }\n            } catch (error) {\n                // Synapse currently returns the following when the filter cannot be found:\n                // {\n                //     errcode: \"M_UNKNOWN\",\n                //     name: \"M_UNKNOWN\",\n                //     message: \"No row found\",\n                // }\n                if ((<MatrixError>error).errcode !== \"M_UNKNOWN\" && (<MatrixError>error).errcode !== \"M_NOT_FOUND\") {\n                    throw error;\n                }\n            }\n            // if the filter doesn't exist anymore on the server, remove from store\n            if (!existingId) {\n                this.store.setFilterIdByName(filterName, undefined);\n            }\n        }\n\n        if (existingId) {\n            return existingId;\n        }\n\n        // create a new filter\n        const createdFilter = await this.createFilter(filter.getDefinition());\n\n        this.store.setFilterIdByName(filterName, createdFilter.filterId);\n        return createdFilter.filterId!;\n    }\n\n    /**\n     * Gets a bearer token from the homeserver that the user can\n     * present to a third party in order to prove their ownership\n     * of the Matrix account they are logged into.\n     * @returns Promise which resolves: Token object\n     * @returns Rejects: with an error response.\n     */\n    public getOpenIdToken(): Promise<IOpenIDToken> {\n        const path = utils.encodeUri(\"/user/$userId/openid/request_token\", {\n            $userId: this.credentials.userId!,\n        });\n\n        return this.http.authedRequest(Method.Post, path, undefined, {});\n    }\n\n    private startCallEventHandler = (): void => {\n        if (this.isInitialSyncComplete()) {\n            if (supportsMatrixCall()) {\n                this.callEventHandler!.start();\n                this.groupCallEventHandler!.start();\n            }\n\n            this.off(ClientEvent.Sync, this.startCallEventHandler);\n        }\n    };\n\n    private startMatrixRTC = (): void => {\n        if (this.isInitialSyncComplete()) {\n            this.matrixRTC.start();\n\n            this.off(ClientEvent.Sync, this.startMatrixRTC);\n        }\n    };\n\n    /**\n     * Once the client has been initialised, we want to clear notifications we\n     * know for a fact should be here.\n     * This issue should also be addressed on synapse's side and is tracked as part\n     * of https://github.com/matrix-org/synapse/issues/14837\n     *\n     * We consider a room or a thread as fully read if the current user has sent\n     * the last event in the live timeline of that context and if the read receipt\n     * we have on record matches.\n     */\n    private fixupRoomNotifications = (): void => {\n        if (this.isInitialSyncComplete()) {\n            const unreadRooms = (this.getRooms() ?? []).filter((room) => {\n                return room.getUnreadNotificationCount(NotificationCountType.Total) > 0;\n            });\n\n            for (const room of unreadRooms) {\n                const currentUserId = this.getSafeUserId();\n                room.fixupNotifications(currentUserId);\n            }\n\n            this.off(ClientEvent.Sync, this.fixupRoomNotifications);\n        }\n    };\n\n    /**\n     * @returns Promise which resolves: ITurnServerResponse object\n     * @returns Rejects: with an error response.\n     */\n    public turnServer(): Promise<ITurnServerResponse> {\n        return this.http.authedRequest(Method.Get, \"/voip/turnServer\");\n    }\n\n    /**\n     * Get the TURN servers for this homeserver.\n     * @returns The servers or an empty list.\n     */\n    public getTurnServers(): ITurnServer[] {\n        return this.turnServers || [];\n    }\n\n    /**\n     * Get the unix timestamp (in milliseconds) at which the current\n     * TURN credentials (from getTurnServers) expire\n     * @returns The expiry timestamp in milliseconds\n     */\n    public getTurnServersExpiry(): number {\n        return this.turnServersExpiry;\n    }\n\n    public get pollingTurnServers(): boolean {\n        return this.checkTurnServersIntervalID !== undefined;\n    }\n\n    // XXX: Intended private, used in code.\n    public async checkTurnServers(): Promise<boolean | undefined> {\n        if (!this.supportsVoip()) {\n            return;\n        }\n\n        let credentialsGood = false;\n        const remainingTime = this.turnServersExpiry - Date.now();\n        if (remainingTime > TURN_CHECK_INTERVAL) {\n            this.logger.debug(\"TURN creds are valid for another \" + remainingTime + \" ms: not fetching new ones.\");\n            credentialsGood = true;\n        } else {\n            this.logger.debug(\"Fetching new TURN credentials\");\n            try {\n                const res = await this.turnServer();\n                if (res.uris) {\n                    this.logger.debug(\"Got TURN URIs: \" + res.uris + \" refresh in \" + res.ttl + \" secs\");\n                    // map the response to a format that can be fed to RTCPeerConnection\n                    const servers: ITurnServer = {\n                        urls: res.uris,\n                        username: res.username,\n                        credential: res.password,\n                    };\n                    this.turnServers = [servers];\n                    // The TTL is in seconds but we work in ms\n                    this.turnServersExpiry = Date.now() + res.ttl * 1000;\n                    credentialsGood = true;\n                    this.emit(ClientEvent.TurnServers, this.turnServers);\n                }\n            } catch (err) {\n                this.logger.error(\"Failed to get TURN URIs\", err);\n                if ((<HTTPError>err).httpStatus === 403) {\n                    // We got a 403, so there's no point in looping forever.\n                    this.logger.info(\"TURN access unavailable for this account: stopping credentials checks\");\n                    if (this.checkTurnServersIntervalID !== null) {\n                        globalThis.clearInterval(this.checkTurnServersIntervalID);\n                    }\n                    this.checkTurnServersIntervalID = undefined;\n                    this.emit(ClientEvent.TurnServersError, <HTTPError>err, true); // fatal\n                } else {\n                    // otherwise, if we failed for whatever reason, try again the next time we're called.\n                    this.emit(ClientEvent.TurnServersError, <Error>err, false); // non-fatal\n                }\n            }\n        }\n\n        return credentialsGood;\n    }\n\n    /**\n     * Set whether to allow a fallback ICE server should be used for negotiating a\n     * WebRTC connection if the homeserver doesn't provide any servers. Defaults to\n     * false.\n     *\n     */\n    public setFallbackICEServerAllowed(allow: boolean): void {\n        this.fallbackICEServerAllowed = allow;\n    }\n\n    /**\n     * Get whether to allow a fallback ICE server should be used for negotiating a\n     * WebRTC connection if the homeserver doesn't provide any servers. Defaults to\n     * false.\n     *\n     * @returns\n     */\n    public isFallbackICEServerAllowed(): boolean {\n        return this.fallbackICEServerAllowed;\n    }\n\n    /**\n     * Determines if the current user is an administrator of the Synapse homeserver.\n     * Returns false if untrue or the homeserver does not appear to be a Synapse\n     * homeserver. <strong>This function is implementation specific and may change\n     * as a result.</strong>\n     * @returns true if the user appears to be a Synapse administrator.\n     */\n    public isSynapseAdministrator(): Promise<boolean> {\n        const path = utils.encodeUri(\"/_synapse/admin/v1/users/$userId/admin\", { $userId: this.getUserId()! });\n        return this.http\n            .authedRequest<{ admin: boolean }>(Method.Get, path, undefined, undefined, { prefix: \"\" })\n            .then((r) => r.admin); // pull out the specific boolean we want\n    }\n\n    /**\n     * Performs a whois lookup on a user using Synapse's administrator API.\n     * <strong>This function is implementation specific and may change as a\n     * result.</strong>\n     * @param userId - the User ID to look up.\n     * @returns the whois response - see Synapse docs for information.\n     */\n    public whoisSynapseUser(userId: string): Promise<ISynapseAdminWhoisResponse> {\n        const path = utils.encodeUri(\"/_synapse/admin/v1/whois/$userId\", { $userId: userId });\n        return this.http.authedRequest(Method.Get, path, undefined, undefined, { prefix: \"\" });\n    }\n\n    /**\n     * Deactivates a user using Synapse's administrator API. <strong>This\n     * function is implementation specific and may change as a result.</strong>\n     * @param userId - the User ID to deactivate.\n     * @returns the deactivate response - see Synapse docs for information.\n     */\n    public deactivateSynapseUser(userId: string): Promise<ISynapseAdminDeactivateResponse> {\n        const path = utils.encodeUri(\"/_synapse/admin/v1/deactivate/$userId\", { $userId: userId });\n        return this.http.authedRequest(Method.Post, path, undefined, undefined, { prefix: \"\" });\n    }\n\n    protected async fetchClientWellKnown(): Promise<void> {\n        // `getRawClientConfig` does not throw or reject on network errors, instead\n        // it absorbs errors and returns `{}`.\n        this.clientWellKnownPromise = AutoDiscovery.getRawClientConfig(this.getDomain() ?? undefined);\n        this.clientWellKnown = await this.clientWellKnownPromise;\n        this.emit(ClientEvent.ClientWellKnown, this.clientWellKnown);\n    }\n\n    public getClientWellKnown(): IClientWellKnown | undefined {\n        return this.clientWellKnown;\n    }\n\n    public waitForClientWellKnown(): Promise<IClientWellKnown> {\n        if (!this.clientRunning) {\n            throw new Error(\"Client is not running\");\n        }\n        return this.clientWellKnownPromise!;\n    }\n\n    /**\n     * store client options with boolean/string/numeric values\n     * to know in the next session what flags the sync data was\n     * created with (e.g. lazy loading)\n     * @returns for store operation\n     */\n    public storeClientOptions(): Promise<void> {\n        // XXX: Intended private, used in code\n        const primTypes = [\"boolean\", \"string\", \"number\"];\n        const serializableOpts = Object.entries(this.clientOpts!)\n            .filter(([key, value]) => {\n                return primTypes.includes(typeof value);\n            })\n            .reduce<Record<string, any>>((obj, [key, value]) => {\n                obj[key] = value;\n                return obj;\n            }, {});\n        return this.store.storeClientOptions(serializableOpts);\n    }\n\n    /**\n     * Gets a set of room IDs in common with another user.\n     *\n     * Note: This endpoint is unstable, and can throw an `Error`.\n     *   Check progress on [MSC2666](https://github.com/matrix-org/matrix-spec-proposals/pull/2666) for more details.\n     *\n     * @param userId - The userId to check.\n     * @returns Promise which resolves to an array of rooms\n     * @returns Rejects: with an error response.\n     */\n    // TODO: on spec release, rename this to getMutualRooms\n    // eslint-disable-next-line\n    public async _unstable_getSharedRooms(userId: string): Promise<string[]> {\n        // Initial variant of the MSC\n        const sharedRoomsSupport = await this.doesServerSupportUnstableFeature(UNSTABLE_MSC2666_SHARED_ROOMS);\n\n        // Newer variant that renamed shared rooms to mutual rooms\n        const mutualRoomsSupport = await this.doesServerSupportUnstableFeature(UNSTABLE_MSC2666_MUTUAL_ROOMS);\n\n        // Latest variant that changed from path elements to query elements\n        const queryMutualRoomsSupport = await this.doesServerSupportUnstableFeature(\n            UNSTABLE_MSC2666_QUERY_MUTUAL_ROOMS,\n        );\n\n        if (!sharedRoomsSupport && !mutualRoomsSupport && !queryMutualRoomsSupport) {\n            throw Error(\"Server does not support the Mutual Rooms API\");\n        }\n\n        let path;\n        let query;\n\n        // Cascading unstable support switching.\n        if (queryMutualRoomsSupport) {\n            path = \"/uk.half-shot.msc2666/user/mutual_rooms\";\n            query = { user_id: userId };\n        } else {\n            path = utils.encodeUri(\n                `/uk.half-shot.msc2666/user/${mutualRoomsSupport ? \"mutual_rooms\" : \"shared_rooms\"}/$userId`,\n                { $userId: userId },\n            );\n            query = {};\n        }\n\n        // Accumulated rooms\n        const rooms: string[] = [];\n        let token = null;\n\n        do {\n            const tokenQuery: Record<string, string> = {};\n            if (token != null && queryMutualRoomsSupport) {\n                tokenQuery[\"batch_token\"] = token;\n            }\n\n            const res = await this.http.authedRequest<{\n                joined: string[];\n                next_batch_token?: string;\n            }>(Method.Get, path, { ...query, ...tokenQuery }, undefined, {\n                prefix: ClientPrefix.Unstable,\n            });\n\n            rooms.push(...res.joined);\n\n            if (res.next_batch_token !== undefined) {\n                token = res.next_batch_token;\n            } else {\n                token = null;\n            }\n        } while (token != null);\n\n        return rooms;\n    }\n\n    /**\n     * Get the API versions supported by the server, along with any\n     * unstable APIs it supports\n     * @returns The server /versions response\n     */\n    public async getVersions(): Promise<IServerVersions> {\n        if (this.serverVersionsPromise) {\n            return this.serverVersionsPromise;\n        }\n\n        // We send an authenticated request as of MSC4026\n        this.serverVersionsPromise = this.http\n            .authedRequest<IServerVersions>(Method.Get, \"/_matrix/client/versions\", undefined, undefined, {\n                prefix: \"\",\n            })\n            .catch((e) => {\n                // Need to unset this if it fails, otherwise we'll never retry\n                this.serverVersionsPromise = undefined;\n                // but rethrow the exception to anything that was waiting\n                throw e;\n            });\n\n        const serverVersions = await this.serverVersionsPromise;\n        this.canSupport = await buildFeatureSupportMap(serverVersions);\n\n        return this.serverVersionsPromise;\n    }\n\n    /**\n     * Check if a particular spec version is supported by the server.\n     * @param version - The spec version (such as \"r0.5.0\") to check for.\n     * @returns Whether it is supported\n     */\n    public async isVersionSupported(version: string): Promise<boolean> {\n        const { versions } = await this.getVersions();\n        return versions && versions.includes(version);\n    }\n\n    /**\n     * Query the server to see if it lists support for an unstable feature\n     * in the /versions response\n     * @param feature - the feature name\n     * @returns true if the feature is supported\n     */\n    public async doesServerSupportUnstableFeature(feature: string): Promise<boolean> {\n        const response = await this.getVersions();\n        if (!response) return false;\n        const unstableFeatures = response[\"unstable_features\"];\n        return unstableFeatures && !!unstableFeatures[feature];\n    }\n\n    /**\n     * Query the server to see if it is forcing encryption to be enabled for\n     * a given room preset, based on the /versions response.\n     * @param presetName - The name of the preset to check.\n     * @returns true if the server is forcing encryption\n     * for the preset.\n     */\n    public async doesServerForceEncryptionForPreset(presetName: Preset): Promise<boolean> {\n        const response = await this.getVersions();\n        if (!response) return false;\n        const unstableFeatures = response[\"unstable_features\"];\n\n        // The preset name in the versions response will be without the _chat suffix.\n        const versionsPresetName = presetName.includes(\"_chat\")\n            ? presetName.substring(0, presetName.indexOf(\"_chat\"))\n            : presetName;\n\n        return unstableFeatures && !!unstableFeatures[`io.element.e2ee_forced.${versionsPresetName}`];\n    }\n\n    public async doesServerSupportThread(): Promise<{\n        threads: FeatureSupport;\n        list: FeatureSupport;\n        fwdPagination: FeatureSupport;\n    }> {\n        if (await this.isVersionSupported(\"v1.4\")) {\n            return {\n                threads: FeatureSupport.Stable,\n                list: FeatureSupport.Stable,\n                fwdPagination: FeatureSupport.Stable,\n            };\n        }\n\n        try {\n            const [threadUnstable, threadStable, listUnstable, listStable, fwdPaginationUnstable, fwdPaginationStable] =\n                await Promise.all([\n                    this.doesServerSupportUnstableFeature(\"org.matrix.msc3440\"),\n                    this.doesServerSupportUnstableFeature(\"org.matrix.msc3440.stable\"),\n                    this.doesServerSupportUnstableFeature(\"org.matrix.msc3856\"),\n                    this.doesServerSupportUnstableFeature(\"org.matrix.msc3856.stable\"),\n                    this.doesServerSupportUnstableFeature(\"org.matrix.msc3715\"),\n                    this.doesServerSupportUnstableFeature(\"org.matrix.msc3715.stable\"),\n                ]);\n\n            return {\n                threads: determineFeatureSupport(threadStable, threadUnstable),\n                list: determineFeatureSupport(listStable, listUnstable),\n                fwdPagination: determineFeatureSupport(fwdPaginationStable, fwdPaginationUnstable),\n            };\n        } catch {\n            return {\n                threads: FeatureSupport.None,\n                list: FeatureSupport.None,\n                fwdPagination: FeatureSupport.None,\n            };\n        }\n    }\n\n    /**\n     * Get if lazy loading members is being used.\n     * @returns Whether or not members are lazy loaded by this client\n     */\n    public hasLazyLoadMembersEnabled(): boolean {\n        return !!this.clientOpts?.lazyLoadMembers;\n    }\n\n    /**\n     * Set a function which is called when /sync returns a 'limited' response.\n     * It is called with a room ID and returns a boolean. It should return 'true' if the SDK\n     * can SAFELY remove events from this room. It may not be safe to remove events if there\n     * are other references to the timelines for this room, e.g because the client is\n     * actively viewing events in this room.\n     * Default: returns false.\n     * @param cb - The callback which will be invoked.\n     */\n    public setCanResetTimelineCallback(cb: ResetTimelineCallback): void {\n        this.canResetTimelineCallback = cb;\n    }\n\n    /**\n     * Get the callback set via `setCanResetTimelineCallback`.\n     * @returns The callback or null\n     */\n    public getCanResetTimelineCallback(): ResetTimelineCallback | undefined {\n        return this.canResetTimelineCallback;\n    }\n\n    /**\n     * Returns relations for a given event. Handles encryption transparently,\n     * with the caveat that the amount of events returned might be 0, even though you get a nextBatch.\n     * When the returned promise resolves, all messages should have finished trying to decrypt.\n     * @param roomId - the room of the event\n     * @param eventId - the id of the event\n     * @param relationType - the rel_type of the relations requested\n     * @param eventType - the event type of the relations requested\n     * @param opts - options with optional values for the request.\n     * @returns an object with `events` as `MatrixEvent[]` and optionally `nextBatch` if more relations are available.\n     */\n    public async relations(\n        roomId: string,\n        eventId: string,\n        relationType: RelationType | string | null,\n        eventType?: EventType | string | null,\n        opts: IRelationsRequestOpts = { dir: Direction.Backward },\n    ): Promise<{\n        originalEvent?: MatrixEvent | null;\n        events: MatrixEvent[];\n        nextBatch?: string | null;\n        prevBatch?: string | null;\n    }> {\n        const fetchedEventType = eventType ? this.getEncryptedIfNeededEventType(roomId, eventType) : null;\n        const [eventResult, result] = await Promise.all([\n            this.fetchRoomEvent(roomId, eventId),\n            this.fetchRelations(roomId, eventId, relationType, fetchedEventType, opts),\n        ]);\n        const mapper = this.getEventMapper();\n\n        const originalEvent = eventResult ? mapper(eventResult) : undefined;\n        let events = result.chunk.map(mapper);\n\n        if (fetchedEventType === EventType.RoomMessageEncrypted) {\n            const allEvents = originalEvent ? events.concat(originalEvent) : events;\n            await Promise.all(allEvents.map((e) => this.decryptEventIfNeeded(e)));\n            if (eventType !== null) {\n                events = events.filter((e) => e.getType() === eventType);\n            }\n        }\n\n        if (originalEvent && relationType === RelationType.Replace) {\n            events = events.filter((e) => e.getSender() === originalEvent.getSender());\n        }\n        return {\n            originalEvent: originalEvent ?? null,\n            events,\n            nextBatch: result.next_batch ?? null,\n            prevBatch: result.prev_batch ?? null,\n        };\n    }\n\n    /**\n     * Generates a random string suitable for use as a client secret. <strong>This\n     * method is experimental and may change.</strong>\n     * @returns A new client secret\n     */\n    public generateClientSecret(): string {\n        return secureRandomString(32);\n    }\n\n    /**\n     * Attempts to decrypt an event\n     * @param event - The event to decrypt\n     * @returns A decryption promise\n     */\n    public decryptEventIfNeeded(event: MatrixEvent, options?: IDecryptOptions): Promise<void> {\n        if (event.isState() && !this.enableEncryptedStateEvents) {\n            return Promise.resolve();\n        }\n\n        if (event.shouldAttemptDecryption() && this.getCrypto()) {\n            event.attemptDecryption(this.cryptoBackend!, options);\n        }\n\n        if (event.isBeingDecrypted()) {\n            return event.getDecryptionPromise()!;\n        } else {\n            return Promise.resolve();\n        }\n    }\n\n    private termsUrlForService(serviceType: SERVICE_TYPES, baseUrl: string): URL {\n        switch (serviceType) {\n            case SERVICE_TYPES.IS:\n                return this.http.getUrl(\"/terms\", undefined, IdentityPrefix.V2, baseUrl);\n            case SERVICE_TYPES.IM:\n                return this.http.getUrl(\"/terms\", undefined, \"/_matrix/integrations/v1\", baseUrl);\n            default:\n                throw new Error(\"Unsupported service type\");\n        }\n    }\n\n    /**\n     * Get the Homeserver URL of this client\n     * @returns Homeserver URL of this client\n     */\n    public getHomeserverUrl(): string {\n        return this.baseUrl;\n    }\n\n    /**\n     * Get the identity server URL of this client\n     * @param stripProto - whether or not to strip the protocol from the URL\n     * @returns Identity server URL of this client\n     */\n    public getIdentityServerUrl(stripProto = false): string | undefined {\n        if (stripProto && (this.idBaseUrl?.startsWith(\"http://\") || this.idBaseUrl?.startsWith(\"https://\"))) {\n            return this.idBaseUrl.split(\"://\")[1];\n        }\n        return this.idBaseUrl;\n    }\n\n    /**\n     * Set the identity server URL of this client\n     * @param url - New identity server URL\n     */\n    public setIdentityServerUrl(url?: string): void {\n        this.idBaseUrl = utils.ensureNoTrailingSlash(url);\n        this.http.setIdBaseUrl(this.idBaseUrl);\n    }\n\n    /**\n     * Get the access token associated with this account.\n     * @returns The access_token or null\n     */\n    public getAccessToken(): string | null {\n        return this.http.opts.accessToken || null;\n    }\n\n    /**\n     * Get the refresh token associated with this account.\n     * @returns The refresh_token or null\n     */\n    public getRefreshToken(): string | null {\n        return this.http.opts.refreshToken ?? null;\n    }\n\n    /**\n     * Set the access token associated with this account.\n     * @param token - The new access token.\n     */\n    public setAccessToken(token: string): void {\n        this.http.opts.accessToken = token;\n        // The /versions response can vary for different users so clear the cache\n        this.serverVersionsPromise = undefined;\n    }\n\n    /**\n     * @returns true if there is a valid access_token for this client.\n     */\n    public isLoggedIn(): boolean {\n        return this.http.opts.accessToken !== undefined;\n    }\n\n    /**\n     * Make up a new transaction id\n     *\n     * @returns a new, unique, transaction id\n     */\n    public makeTxnId(): string {\n        return \"m\" + new Date().getTime() + \".\" + this.txnCtr++;\n    }\n\n    /**\n     * Check whether a username is available prior to registration. An error response\n     * indicates an invalid/unavailable username.\n     * @param username - The username to check the availability of.\n     * @returns Promise which resolves: to boolean of whether the username is available.\n     */\n    public isUsernameAvailable(username: string): Promise<boolean> {\n        return this.http\n            .authedRequest<{ available: true }>(Method.Get, \"/register/available\", { username })\n            .then((response) => {\n                return response.available;\n            })\n            .catch((response) => {\n                if (response.errcode === \"M_USER_IN_USE\") {\n                    return false;\n                }\n                return Promise.reject(response);\n            });\n    }\n\n    /**\n     * @param bindThreepids - Set key 'email' to true to bind any email\n     *     threepid uses during registration in the identity server. Set 'msisdn' to\n     *     true to bind msisdn.\n     * @returns Promise which resolves to a RegisterResponse object\n     * @returns Rejects: with an error response.\n     */\n    public register(\n        username: string,\n        password: string,\n        sessionId: string | null,\n        auth: { session?: string; type: string },\n        bindThreepids?: { email?: boolean; msisdn?: boolean },\n        guestAccessToken?: string,\n        inhibitLogin?: boolean,\n    ): Promise<RegisterResponse> {\n        if (sessionId) {\n            auth.session = sessionId;\n        }\n\n        const params: RegisterRequest = {\n            auth: auth,\n            refresh_token: true, // always ask for a refresh token - does nothing if unsupported\n        };\n        if (username !== undefined && username !== null) {\n            params.username = username;\n        }\n        if (password !== undefined && password !== null) {\n            params.password = password;\n        }\n        if (guestAccessToken !== undefined && guestAccessToken !== null) {\n            params.guest_access_token = guestAccessToken;\n        }\n        if (inhibitLogin !== undefined && inhibitLogin !== null) {\n            params.inhibit_login = inhibitLogin;\n        }\n\n        return this.registerRequest(params);\n    }\n\n    /**\n     * Register a guest account.\n     * This method returns the auth info needed to create a new authenticated client,\n     * Remember to call `setGuest(true)` on the (guest-)authenticated client, e.g:\n     * ```javascript\n     * const tmpClient = await sdk.createClient(MATRIX_INSTANCE);\n     * const { user_id, device_id, access_token } = tmpClient.registerGuest();\n     * const client = createClient({\n     *   baseUrl: MATRIX_INSTANCE,\n     *   accessToken: access_token,\n     *   userId: user_id,\n     *   deviceId: device_id,\n     * })\n     * client.setGuest(true);\n     * ```\n     *\n     * @param body - JSON HTTP body to provide.\n     * @returns Promise which resolves: JSON object that contains:\n     *                   `{ user_id, device_id, access_token, home_server }`\n     * @returns Rejects: with an error response.\n     */\n    public registerGuest({ body }: { body?: RegisterRequest } = {}): Promise<RegisterResponse> {\n        return this.registerRequest(body || {}, \"guest\");\n    }\n\n    /**\n     * @param data - parameters for registration request\n     * @param kind - type of user to register. may be \"guest\"\n     * @returns Promise which resolves: to the /register response\n     * @returns Rejects: with an error response.\n     */\n    public registerRequest(data: RegisterRequest, kind?: string): Promise<RegisterResponse> {\n        const params: { kind?: string } = {};\n        if (kind) {\n            params.kind = kind;\n        }\n\n        return this.http.request(Method.Post, \"/register\", params, data);\n    }\n\n    /**\n     * Refreshes an access token using a provided refresh token. The refresh token\n     * must be valid for the current access token known to the client instance.\n     *\n     * Note that this function will not cause a logout if the token is deemed\n     * unknown by the server - the caller is responsible for managing logout\n     * actions on error.\n     * @param refreshToken - The refresh token.\n     * @returns Promise which resolves to the new token.\n     * @returns Rejects with an error response.\n     */\n    public refreshToken(refreshToken: string): Promise<IRefreshTokenResponse> {\n        const performRefreshRequestWithPrefix = (prefix: ClientPrefix): Promise<IRefreshTokenResponse> =>\n            this.http.authedRequest(\n                Method.Post,\n                \"/refresh\",\n                undefined,\n                { refresh_token: refreshToken },\n                {\n                    prefix,\n                    inhibitLogoutEmit: true, // we don't want to cause logout loops\n                },\n            );\n\n        // First try with the (specced) /v3/ prefix.\n        // However, before Synapse 1.72.0, Synapse incorrectly required a /v1/ prefix, so we fall\n        // back to that if the request fails, for backwards compatibility.\n        return performRefreshRequestWithPrefix(ClientPrefix.V3).catch((e) => {\n            if (e.errcode === \"M_UNRECOGNIZED\") {\n                return performRefreshRequestWithPrefix(ClientPrefix.V1);\n            }\n            throw e;\n        });\n    }\n\n    /**\n     * @returns Promise which resolves to the available login flows\n     * @returns Rejects: with an error response.\n     */\n    public loginFlows(): Promise<ILoginFlowsResponse> {\n        return this.http.request(Method.Get, \"/login\");\n    }\n\n    /**\n     * @returns Promise which resolves to a LoginResponse object\n     * @returns Rejects: with an error response.\n     *\n     * @deprecated This method has unintuitive behaviour: it updates the `MatrixClient` instance with *some* of the\n     *    returned credentials. Instead, call {@link loginRequest} and create a new `MatrixClient` instance using the\n     *    results. See https://github.com/matrix-org/matrix-js-sdk/issues/4502.\n     */\n    public login(loginType: LoginRequest[\"type\"], data: Omit<LoginRequest, \"type\">): Promise<LoginResponse> {\n        return this.loginRequest({\n            ...data,\n            type: loginType,\n        }).then((response) => {\n            if (response.access_token && response.user_id) {\n                this.http.opts.accessToken = response.access_token;\n                this.credentials = {\n                    userId: response.user_id,\n                };\n            }\n            return response;\n        });\n    }\n\n    /**\n     * @returns Promise which resolves to a LoginResponse object\n     * @returns Rejects: with an error response.\n     *\n     * @deprecated This method has unintuitive behaviour: it updates the `MatrixClient` instance with *some* of the\n     *   returned credentials. Instead, call {@link loginRequest} with `data.type: \"m.login.password\"`, and create a new\n     *   `MatrixClient` instance using the results. See https://github.com/matrix-org/matrix-js-sdk/issues/4502.\n     */\n    public loginWithPassword(user: string, password: string): Promise<LoginResponse> {\n        return this.login(\"m.login.password\", {\n            user: user,\n            password: password,\n        });\n    }\n\n    /**\n     * @param redirectUrl - The URL to redirect to after the HS\n     * authenticates with CAS.\n     * @returns The HS URL to hit to begin the CAS login process.\n     */\n    public getCasLoginUrl(redirectUrl: string): string {\n        return this.getSsoLoginUrl(redirectUrl, \"cas\");\n    }\n\n    /**\n     * @param redirectUrl - The URL to redirect to after the HS\n     *     authenticates with the SSO.\n     * @param loginType - The type of SSO login we are doing (sso or cas).\n     *     Defaults to 'sso'.\n     * @param idpId - The ID of the Identity Provider being targeted, optional.\n     * @param action - the SSO flow to indicate to the IdP, optional.\n     * @returns The HS URL to hit to begin the SSO login process.\n     */\n    public getSsoLoginUrl(redirectUrl: string, loginType = \"sso\", idpId?: string, action?: SSOAction): string {\n        let url = \"/login/\" + loginType + \"/redirect\";\n        if (idpId) {\n            url += \"/\" + idpId;\n        }\n\n        const params = {\n            redirectUrl,\n            [SSO_ACTION_PARAM.unstable!]: action,\n        };\n\n        return this.http.getUrl(url, params).href;\n    }\n\n    /**\n     * @param token - Login token previously received from homeserver\n     * @returns Promise which resolves to a LoginResponse object\n     * @returns Rejects: with an error response.\n     *\n     * @deprecated This method has unintuitive behaviour: it updates the `MatrixClient` instance with *some* of the\n     *   returned credentials. Instead, call {@link loginRequest} with `data.type: \"m.login.token\"`, and create a new\n     *   `MatrixClient` instance using the results. See https://github.com/matrix-org/matrix-js-sdk/issues/4502.\n     */\n    public loginWithToken(token: string): Promise<LoginResponse> {\n        return this.login(\"m.login.token\", {\n            token: token,\n        });\n    }\n\n    /**\n     * Sends a `POST /login` request to the server.\n     *\n     * If successful, this will create a new device and access token for the user.\n     *\n     * @see {@link MatrixClient.loginFlows} which makes a `GET /login` request.\n     * @see https://spec.matrix.org/v1.13/client-server-api/#post_matrixclientv3login\n     *\n     * @param data - Credentials and other details for the login request.\n     */\n    public async loginRequest(data: LoginRequest): Promise<LoginResponse> {\n        return await this.http.authedRequest<LoginResponse>(Method.Post, \"/login\", undefined, data);\n    }\n\n    /**\n     * Logs out the current session.\n     * Obviously, further calls that require authorisation should fail after this\n     * method is called. The state of the MatrixClient object is not affected:\n     * it is up to the caller to either reset or destroy the MatrixClient after\n     * this method succeeds.\n     * @param stopClient - whether to stop the client before calling /logout to prevent invalid token errors.\n     * @returns Promise which resolves: On success, the empty object `{}`\n     */\n    public async logout(stopClient = false): Promise<EmptyObject> {\n        if (stopClient) {\n            this.stopClient();\n            this.http.abort();\n        }\n\n        return this.http.authedRequest(Method.Post, \"/logout\");\n    }\n\n    /**\n     * Deactivates the logged-in account.\n     * Obviously, further calls that require authorisation should fail after this\n     * method is called. The state of the MatrixClient object is not affected:\n     * it is up to the caller to either reset or destroy the MatrixClient after\n     * this method succeeds.\n     * @param auth - Optional. Auth data to supply for User-Interactive auth.\n     * @param erase - Optional. If set, send as `erase` attribute in the\n     * JSON request body, indicating whether the account should be erased. Defaults\n     * to false.\n     * @returns Promise which resolves: On success, the empty object\n     */\n    public deactivateAccount(\n        auth?: AuthDict,\n        erase?: boolean,\n    ): Promise<{ id_server_unbind_result: IdServerUnbindResult }> {\n        const body: Body = {};\n        if (auth) {\n            body.auth = auth;\n        }\n        if (erase !== undefined) {\n            body.erase = erase;\n        }\n\n        return this.http.authedRequest(Method.Post, \"/account/deactivate\", undefined, body);\n    }\n\n    /**\n     * Make a request for an `m.login.token` to be issued as per\n     * https://spec.matrix.org/v1.7/client-server-api/#post_matrixclientv1loginget_token\n     *\n     * The server may require User-Interactive auth.\n     *\n     * @param auth - Optional. Auth data to supply for User-Interactive auth.\n     * @returns Promise which resolves: On success, the token response\n     * or UIA auth data.\n     */\n    public async requestLoginToken(auth?: AuthDict): Promise<LoginTokenPostResponse> {\n        const body: UIARequest<unknown> = { auth };\n        return this.http.authedRequest<LoginTokenPostResponse>(\n            Method.Post,\n            \"/login/get_token\",\n            undefined, // no query params\n            body,\n            { prefix: ClientPrefix.V1 },\n        );\n    }\n\n    /**\n     * Get the fallback URL to use for unknown interactive-auth stages.\n     *\n     * @param loginType -     the type of stage being attempted\n     * @param authSessionId - the auth session ID provided by the homeserver\n     *\n     * @returns HS URL to hit to for the fallback interface\n     */\n    public getFallbackAuthUrl(loginType: string, authSessionId: string): string {\n        const path = utils.encodeUri(\"/auth/$loginType/fallback/web\", {\n            $loginType: loginType,\n        });\n\n        return this.http.getUrl(path, {\n            session: authSessionId,\n        }).href;\n    }\n\n    /**\n     * Create a new room.\n     * @param options - a list of options to pass to the /createRoom API.\n     * @returns Promise which resolves: `{room_id: {string}}`\n     * @returns Rejects: with an error response.\n     */\n    public async createRoom(options: ICreateRoomOpts): Promise<{ room_id: string }> {\n        // eslint-disable-line camelcase\n        // some valid options include: room_alias_name, visibility, invite\n\n        // inject the id_access_token if inviting 3rd party addresses\n        const invitesNeedingToken = (options.invite_3pid || []).filter((i) => !i.id_access_token);\n        if (invitesNeedingToken.length > 0 && this.identityServer?.getAccessToken) {\n            const identityAccessToken = await this.identityServer.getAccessToken();\n            if (identityAccessToken) {\n                for (const invite of invitesNeedingToken) {\n                    invite.id_access_token = identityAccessToken;\n                }\n            }\n        }\n\n        return this.http.authedRequest(Method.Post, \"/createRoom\", undefined, options);\n    }\n\n    /**\n     * Fetches relations for a given event\n     * @param roomId - the room of the event\n     * @param eventId - the id of the event\n     * @param relationType - the rel_type of the relations requested\n     * @param eventType - the event type of the relations requested\n     * @param opts - options with optional values for the request.\n     * @returns the response, with chunk, prev_batch and, next_batch.\n     */\n    public fetchRelations(\n        roomId: string,\n        eventId: string,\n        relationType: RelationType | string | null,\n        eventType?: EventType | string | null,\n        opts: IRelationsRequestOpts = { dir: Direction.Backward },\n    ): Promise<IRelationsResponse> {\n        let params = opts as QueryDict;\n        if (Thread.hasServerSideFwdPaginationSupport === FeatureSupport.Experimental) {\n            params = replaceParam(\"dir\", \"org.matrix.msc3715.dir\", params);\n        }\n        if (this.canSupport.get(Feature.RelationsRecursion) === ServerSupport.Unstable) {\n            params = replaceParam(\"recurse\", \"org.matrix.msc3981.recurse\", params);\n        }\n        const queryString = utils.encodeParams(params);\n\n        let templatedUrl = \"/rooms/$roomId/relations/$eventId\";\n        if (relationType !== null) {\n            templatedUrl += \"/$relationType\";\n            if (eventType !== null) {\n                templatedUrl += \"/$eventType\";\n            }\n        } else if (eventType !== null) {\n            this.logger.warn(`eventType: ${eventType} ignored when fetching\n            relations as relationType is null`);\n            eventType = null;\n        }\n\n        const path = utils.encodeUri(templatedUrl + \"?\" + queryString, {\n            $roomId: roomId,\n            $eventId: eventId,\n            $relationType: relationType!,\n            $eventType: eventType!,\n        });\n        return this.http.authedRequest(Method.Get, path, undefined, undefined, {\n            prefix: ClientPrefix.V1,\n        });\n    }\n\n    /**\n     * @returns Promise which resolves: TODO\n     * @returns Rejects: with an error response.\n     */\n    public roomState(roomId: string): Promise<IStateEventWithRoomId[]> {\n        const path = utils.encodeUri(\"/rooms/$roomId/state\", { $roomId: roomId });\n        return this.http.authedRequest(Method.Get, path);\n    }\n\n    /**\n     * Get an event in a room by its event id.\n     *\n     * @returns Promise which resolves to an object containing the event.\n     * @returns Rejects: with an error response.\n     */\n    public fetchRoomEvent(roomId: string, eventId: string): Promise<Partial<IEvent>> {\n        const path = utils.encodeUri(\"/rooms/$roomId/event/$eventId\", {\n            $roomId: roomId,\n            $eventId: eventId,\n        });\n        return this.http.authedRequest(Method.Get, path);\n    }\n\n    /**\n     * @param includeMembership - the membership type to include in the response\n     * @param excludeMembership - the membership type to exclude from the response\n     * @param atEventId - the id of the event for which moment in the timeline the members should be returned for\n     * @returns Promise which resolves: dictionary of userid to profile information\n     * @returns Rejects: with an error response.\n     */\n    public members(\n        roomId: string,\n        includeMembership?: string,\n        excludeMembership?: string,\n        atEventId?: string,\n    ): Promise<{ [userId: string]: IStateEventWithRoomId[] }> {\n        const queryParams: Record<string, string> = {};\n        if (includeMembership) {\n            queryParams.membership = includeMembership;\n        }\n        if (excludeMembership) {\n            queryParams.not_membership = excludeMembership;\n        }\n        if (atEventId) {\n            queryParams.at = atEventId;\n        }\n\n        const queryString = utils.encodeParams(queryParams);\n\n        const path = utils.encodeUri(\"/rooms/$roomId/members?\" + queryString, { $roomId: roomId });\n        return this.http.authedRequest(Method.Get, path);\n    }\n\n    /**\n     * Upgrades a room to a new protocol version\n     * @param newVersion - The target version to upgrade to\n     * @returns Promise which resolves: Object with key 'replacement_room'\n     * @returns Rejects: with an error response.\n     */\n    public upgradeRoom(roomId: string, newVersion: string): Promise<{ replacement_room: string }> {\n        // eslint-disable-line camelcase\n        const path = utils.encodeUri(\"/rooms/$roomId/upgrade\", { $roomId: roomId });\n        return this.http.authedRequest(Method.Post, path, undefined, { new_version: newVersion });\n    }\n\n    /**\n     * Retrieve a state event.\n     * @returns Promise which resolves: TODO\n     * @returns Rejects: with an error response.\n     */\n    public getStateEvent(roomId: string, eventType: string, stateKey: string): Promise<Record<string, any>> {\n        const pathParams = {\n            $roomId: roomId,\n            $eventType: eventType,\n            $stateKey: stateKey,\n        };\n        let path = utils.encodeUri(\"/rooms/$roomId/state/$eventType\", pathParams);\n        if (stateKey !== undefined) {\n            path = utils.encodeUri(path + \"/$stateKey\", pathParams);\n        }\n        return this.http.authedRequest(Method.Get, path);\n    }\n\n    /**\n     * Send a state event into a room\n     * @param roomId - ID of the room to send the event into\n     * @param eventType - type of the state event to send\n     * @param content - content of the event to send\n     * @param stateKey - the stateKey to send into the room\n     * @param opts - Options for the request function.\n     * @returns Promise which resolves: TODO\n     * @returns Rejects: with an error response.\n     */\n    public async sendStateEvent<K extends keyof StateEvents>(\n        roomId: string,\n        eventType: K,\n        content: StateEvents[K],\n        stateKey = \"\",\n        opts: IRequestOpts = {},\n    ): Promise<ISendEventResponse> {\n        const room = this.getRoom(roomId);\n        const event = new MatrixEvent({\n            room_id: roomId,\n            type: eventType,\n            state_key: stateKey,\n            // Cast safety: StateEvents[K] is a stronger bound than IContent, which has [key: string]: any\n            content: content as IContent,\n        });\n\n        await this.encryptStateEventIfNeeded(event, room ?? undefined);\n\n        const pathParams = {\n            $roomId: roomId,\n            $eventType: event.getWireType(),\n            $stateKey: event.getWireStateKey(),\n        };\n        let path = utils.encodeUri(\"/rooms/$roomId/state/$eventType\", pathParams);\n        if (stateKey !== undefined) {\n            path = utils.encodeUri(path + \"/$stateKey\", pathParams);\n        }\n        return this.http.authedRequest(Method.Put, path, undefined, event.getWireContent(), opts);\n    }\n\n    private async encryptStateEventIfNeeded(event: MatrixEvent, room?: Room): Promise<void> {\n        if (!this.enableEncryptedStateEvents) {\n            return;\n        }\n\n        // If the room is unknown, we cannot encrypt for it\n        if (!room) return;\n\n        if (!this.cryptoBackend && this.usingExternalCrypto) {\n            // The client has opted to allow sending messages to encrypted\n            // rooms even if the room is encrypted, and we haven't set up\n            // crypto. This is useful for users of matrix-org/pantalaimon\n            return;\n        }\n\n        if (!this.cryptoBackend) {\n            throw new Error(\"This room is configured to use encryption, but your client does not support encryption.\");\n        }\n\n        // Check regular encryption conditions.\n        if (!(await this.shouldEncryptEventForRoom(event, room))) {\n            return;\n        }\n\n        // If the crypto impl thinks we shouldn't encrypt, then we shouldn't.\n        // Safety: we checked the crypto impl exists above.\n        if (!(await this.cryptoBackend!.isStateEncryptionEnabledInRoom(room.roomId))) {\n            return;\n        }\n\n        // Check if the event is excluded under MSC3414\n        if (\n            [\n                \"m.room.create\",\n                \"m.room.member\",\n                \"m.room.join_rules\",\n                \"m.room.power_levels\",\n                \"m.room.third_party_invite\",\n                \"m.room.history_visibility\",\n                \"m.room.guest_access\",\n                \"m.room.encryption\",\n            ].includes(event.getType())\n        ) {\n            return;\n        }\n\n        await this.cryptoBackend.encryptEvent(event, room);\n    }\n\n    /**\n     * @returns Promise which resolves: TODO\n     * @returns Rejects: with an error response.\n     */\n    public roomInitialSync(roomId: string, limit: number): Promise<IRoomInitialSyncResponse> {\n        const path = utils.encodeUri(\"/rooms/$roomId/initialSync\", { $roomId: roomId });\n\n        return this.http.authedRequest(Method.Get, path, { limit: limit?.toString() ?? \"30\" });\n    }\n\n    /**\n     * Set a marker to indicate the point in a room before which the user has read every\n     * event. This can be retrieved from room account data (the event type is `m.fully_read`)\n     * and displayed as a horizontal line in the timeline that is visually distinct to the\n     * position of the user's own read receipt.\n     * @param roomId - ID of the room that has been read\n     * @param rmEventId - ID of the event that has been read\n     * @param rrEventId - ID of the event tracked by the read receipt. This is here\n     * for convenience because the RR and the RM are commonly updated at the same time as\n     * each other. Optional.\n     * @param rpEventId - rpEvent the m.read.private read receipt event for when we\n     * don't want other users to see the read receipts. This is experimental. Optional.\n     * @returns Promise which resolves: the empty object, `{}`.\n     */\n    public async setRoomReadMarkersHttpRequest(\n        roomId: string,\n        rmEventId: string,\n        rrEventId?: string,\n        rpEventId?: string,\n    ): Promise<EmptyObject> {\n        const path = utils.encodeUri(\"/rooms/$roomId/read_markers\", {\n            $roomId: roomId,\n        });\n\n        const content: IContent = {\n            [ReceiptType.FullyRead]: rmEventId,\n            [ReceiptType.Read]: rrEventId,\n        };\n\n        if (\n            (await this.doesServerSupportUnstableFeature(\"org.matrix.msc2285.stable\")) ||\n            (await this.isVersionSupported(\"v1.4\"))\n        ) {\n            content[ReceiptType.ReadPrivate] = rpEventId;\n        }\n\n        return this.http.authedRequest(Method.Post, path, undefined, content);\n    }\n\n    /**\n     * @returns Promise which resolves: A list of the user's current rooms\n     * @returns Rejects: with an error response.\n     */\n    public getJoinedRooms(): Promise<IJoinedRoomsResponse> {\n        const path = utils.encodeUri(\"/joined_rooms\", {});\n        return this.http.authedRequest(Method.Get, path);\n    }\n\n    /**\n     * Retrieve membership info. for a room.\n     * @param roomId - ID of the room to get membership for\n     * @returns Promise which resolves: A list of currently joined users\n     *                                 and their profile data.\n     * @returns Rejects: with an error response.\n     */\n    public getJoinedRoomMembers(roomId: string): Promise<IJoinedMembersResponse> {\n        const path = utils.encodeUri(\"/rooms/$roomId/joined_members\", {\n            $roomId: roomId,\n        });\n        return this.http.authedRequest(Method.Get, path);\n    }\n\n    /**\n     * @param params - Options for this request\n     * @returns Promise which resolves: IPublicRoomsResponse\n     * @returns Rejects: with an error response.\n     */\n    public publicRooms({\n        server,\n        limit,\n        since,\n        ...options\n    }: IRoomDirectoryOptions = {}): Promise<IPublicRoomsResponse> {\n        if (Object.keys(options).length === 0) {\n            const queryParams: QueryDict = { server, limit, since };\n            return this.http.authedRequest(Method.Get, \"/publicRooms\", queryParams);\n        } else {\n            const queryParams: QueryDict = { server };\n            const body = {\n                limit,\n                since,\n                ...options,\n            };\n            return this.http.authedRequest(Method.Post, \"/publicRooms\", queryParams, body);\n        }\n    }\n\n    /**\n     * Create an alias to room ID mapping.\n     * @param alias - The room alias to create.\n     * @param roomId - The room ID to link the alias to.\n     * @returns Promise which resolves: an empty object `{}`\n     * @returns Rejects: with an error response.\n     */\n    public createAlias(alias: string, roomId: string): Promise<EmptyObject> {\n        const path = utils.encodeUri(\"/directory/room/$alias\", {\n            $alias: alias,\n        });\n        const data = {\n            room_id: roomId,\n        };\n        return this.http.authedRequest(Method.Put, path, undefined, data);\n    }\n\n    /**\n     * Delete an alias to room ID mapping. This alias must be on your local server,\n     * and you must have sufficient access to do this operation.\n     * @param alias - The room alias to delete.\n     * @returns Promise which resolves: an empty object `{}`.\n     * @returns Rejects: with an error response.\n     */\n    public deleteAlias(alias: string): Promise<EmptyObject> {\n        const path = utils.encodeUri(\"/directory/room/$alias\", {\n            $alias: alias,\n        });\n        return this.http.authedRequest(Method.Delete, path);\n    }\n\n    /**\n     * Gets the local aliases for the room. Note: this includes all local aliases, unlike the\n     * curated list from the m.room.canonical_alias state event.\n     * @param roomId - The room ID to get local aliases for.\n     * @returns Promise which resolves: an object with an `aliases` property, containing an array of local aliases\n     * @returns Rejects: with an error response.\n     */\n    public getLocalAliases(roomId: string): Promise<{ aliases: string[] }> {\n        const path = utils.encodeUri(\"/rooms/$roomId/aliases\", { $roomId: roomId });\n        const prefix = ClientPrefix.V3;\n        return this.http.authedRequest(Method.Get, path, undefined, undefined, { prefix });\n    }\n\n    /**\n     * Get room info for the given alias.\n     * @param alias - The room alias to resolve.\n     * @returns Promise which resolves: Object with room_id and servers.\n     * @returns Rejects: with an error response.\n     */\n    public getRoomIdForAlias(alias: string): Promise<{ room_id: string; servers: string[] }> {\n        // eslint-disable-line camelcase\n        const path = utils.encodeUri(\"/directory/room/$alias\", {\n            $alias: alias,\n        });\n        return this.http.authedRequest(Method.Get, path);\n    }\n\n    /**\n     * Get the visibility of a room in the current HS's room directory\n     * @returns Promise which resolves: TODO\n     * @returns Rejects: with an error response.\n     */\n    public getRoomDirectoryVisibility(roomId: string): Promise<{ visibility: Visibility }> {\n        const path = utils.encodeUri(\"/directory/list/room/$roomId\", {\n            $roomId: roomId,\n        });\n        return this.http.authedRequest(Method.Get, path);\n    }\n\n    /**\n     * Set the visibility of a room in the current HS's room directory\n     * @param visibility - \"public\" to make the room visible\n     *                 in the public directory, or \"private\" to make\n     *                 it invisible.\n     * @returns Promise which resolves: to an empty object `{}`\n     * @returns Rejects: with an error response.\n     */\n    public setRoomDirectoryVisibility(roomId: string, visibility: Visibility): Promise<EmptyObject> {\n        const path = utils.encodeUri(\"/directory/list/room/$roomId\", {\n            $roomId: roomId,\n        });\n        return this.http.authedRequest(Method.Put, path, undefined, { visibility });\n    }\n\n    /**\n     * Query the user directory with a term matching user IDs, display names and domains.\n     * @param options\n     * @param options.term - the term with which to search.\n     * @param options.limit - the maximum number of results to return. The server will apply a limit if unspecified.\n     * @returns Promise which resolves: an array of results.\n     */\n    public searchUserDirectory({ term, limit }: { term: string; limit?: number }): Promise<IUserDirectoryResponse> {\n        const body: Body = {\n            search_term: term,\n        };\n\n        if (limit !== undefined) {\n            body.limit = limit;\n        }\n\n        return this.http.authedRequest(Method.Post, \"/user_directory/search\", undefined, body);\n    }\n\n    /**\n     * Upload a file to the media repository on the homeserver.\n     *\n     * @param file - The object to upload. On a browser, something that\n     *   can be sent to XMLHttpRequest.send (typically a File).  Under node.js,\n     *   a a Buffer, String or ReadStream.\n     *\n     * @param opts -  options object\n     *\n     * @returns Promise which resolves to response object, or rejects with an error (usually a MatrixError).\n     */\n    public uploadContent(file: FileType, opts?: UploadOpts): Promise<UploadResponse> {\n        return this.http.uploadContent(file, opts);\n    }\n\n    /**\n     * Cancel a file upload in progress\n     * @param upload - The object returned from uploadContent\n     * @returns true if canceled, otherwise false\n     */\n    public cancelUpload(upload: Promise<UploadResponse>): boolean {\n        return this.http.cancelUpload(upload);\n    }\n\n    /**\n     * Get a list of all file uploads in progress\n     * @returns Array of objects representing current uploads.\n     * Currently in progress is element 0. Keys:\n     *  - promise: The promise associated with the upload\n     *  - loaded: Number of bytes uploaded\n     *  - total: Total number of bytes to upload\n     */\n    public getCurrentUploads(): Upload[] {\n        return this.http.getCurrentUploads();\n    }\n\n    /**\n     * @param info - The kind of info to retrieve (e.g. 'displayname',\n     * 'avatar_url').\n     * @returns Promise which resolves: TODO\n     * @returns Rejects: with an error response.\n     */\n    public getProfileInfo(\n        userId: string,\n        info?: string,\n        // eslint-disable-next-line camelcase\n    ): Promise<{ avatar_url?: string; displayname?: string }> {\n        const path = info\n            ? utils.encodeUri(\"/profile/$userId/$info\", { $userId: userId, $info: info })\n            : utils.encodeUri(\"/profile/$userId\", { $userId: userId });\n        return this.http.authedRequest(Method.Get, path);\n    }\n\n    /**\n     * Determine if the server supports extended profiles, as described by MSC4133.\n     *\n     * @returns `true` if supported, otherwise `false`\n     */\n    public async doesServerSupportExtendedProfiles(): Promise<boolean> {\n        return (\n            (await this.isVersionSupported(\"v1.16\")) ||\n            (await this.doesServerSupportUnstableFeature(UNSTABLE_MSC4133_EXTENDED_PROFILES)) ||\n            (await this.doesServerSupportUnstableFeature(STABLE_MSC4133_EXTENDED_PROFILES))\n        );\n    }\n\n    /**\n     * Get the prefix used for extended profile requests.\n     *\n     * @returns The prefix for use with `authedRequest`\n     */\n    private async getExtendedProfileRequestPrefix(): Promise<string> {\n        if (\n            (await this.isVersionSupported(\"v1.16\")) ||\n            (await this.doesServerSupportUnstableFeature(\"uk.tcpip.msc4133.stable\"))\n        ) {\n            return ClientPrefix.V3;\n        }\n        return \"/_matrix/client/unstable/uk.tcpip.msc4133\";\n    }\n\n    /**\n     * Fetch a user's *extended* profile, which may include additional keys.\n     *\n     * @see https://github.com/tcpipuk/matrix-spec-proposals/blob/main/proposals/4133-extended-profiles.md\n     * @param userId The user ID to fetch the profile of.\n     * @returns A set of keys to property values.\n     *\n     * @throws An error if the server does not support MSC4133.\n     * @throws A M_NOT_FOUND error if the profile could not be found.\n     */\n    public async getExtendedProfile(userId: string): Promise<Record<string, unknown>> {\n        if (!(await this.doesServerSupportExtendedProfiles())) {\n            throw new Error(\"Server does not support extended profiles\");\n        }\n        return this.http.authedRequest(\n            Method.Get,\n            utils.encodeUri(\"/profile/$userId\", { $userId: userId }),\n            undefined,\n            undefined,\n            {\n                prefix: await this.getExtendedProfileRequestPrefix(),\n            },\n        );\n    }\n\n    /**\n     * Fetch a specific key from the user's *extended* profile.\n     *\n     * @see https://github.com/tcpipuk/matrix-spec-proposals/blob/main/proposals/4133-extended-profiles.md\n     * @param userId The user ID to fetch the profile of.\n     * @param key The key of the property to fetch.\n     * @returns The property value.\n     *\n     * @throws An error if the server does not support MSC4133.\n     * @throws A M_NOT_FOUND error if the key was not set OR the profile could not be found.\n     */\n    public async getExtendedProfileProperty(userId: string, key: string): Promise<unknown> {\n        if (!(await this.doesServerSupportExtendedProfiles())) {\n            throw new Error(\"Server does not support extended profiles\");\n        }\n        const profile = (await this.http.authedRequest(\n            Method.Get,\n            utils.encodeUri(\"/profile/$userId/$key\", { $userId: userId, $key: key }),\n            undefined,\n            undefined,\n            {\n                prefix: await this.getExtendedProfileRequestPrefix(),\n            },\n        )) as Record<string, unknown>;\n        return profile[key];\n    }\n\n    /**\n     * Set a property on your *extended* profile.\n     *\n     * @see https://github.com/tcpipuk/matrix-spec-proposals/blob/main/proposals/4133-extended-profiles.md\n     * @param key The key of the property to set.\n     * @param value The value to set on the property.\n     *\n     * @throws An error if the server does not support MSC4133 OR the server disallows editing the user profile.\n     */\n    public async setExtendedProfileProperty(key: string, value: unknown): Promise<void> {\n        if (!(await this.doesServerSupportExtendedProfiles())) {\n            throw new Error(\"Server does not support extended profiles\");\n        }\n        const userId = this.getUserId();\n\n        await this.http.authedRequest(\n            Method.Put,\n            utils.encodeUri(\"/profile/$userId/$key\", { $userId: userId, $key: key }),\n            undefined,\n            { [key]: value },\n            {\n                prefix: await this.getExtendedProfileRequestPrefix(),\n            },\n        );\n    }\n\n    /**\n     * Delete a property on your *extended* profile.\n     *\n     * @see https://github.com/tcpipuk/matrix-spec-proposals/blob/main/proposals/4133-extended-profiles.md\n     * @param key The key of the property to delete.\n     *\n     * @throws An error if the server does not support MSC4133 OR the server disallows editing the user profile.\n     */\n    public async deleteExtendedProfileProperty(key: string): Promise<void> {\n        if (!(await this.doesServerSupportExtendedProfiles())) {\n            throw new Error(\"Server does not support extended profiles\");\n        }\n        const userId = this.getUserId();\n\n        await this.http.authedRequest(\n            Method.Delete,\n            utils.encodeUri(\"/profile/$userId/$key\", { $userId: userId, $key: key }),\n            undefined,\n            undefined,\n            {\n                prefix: await this.getExtendedProfileRequestPrefix(),\n            },\n        );\n    }\n\n    /**\n     * Update multiple properties on your *extended* profile. This will\n     * merge with any existing keys.\n     *\n     * @see https://github.com/tcpipuk/matrix-spec-proposals/blob/main/proposals/4133-extended-profiles.md\n     * @param profile The profile object to merge with the existing profile.\n     * @returns The newly merged profile.\n     *\n     * @throws An error if the server does not support MSC4133 OR the server disallows editing the user profile.\n     */\n    public async patchExtendedProfile(profile: Record<string, unknown>): Promise<Record<string, unknown>> {\n        if (!(await this.doesServerSupportExtendedProfiles())) {\n            throw new Error(\"Server does not support extended profiles\");\n        }\n        const userId = this.getUserId();\n\n        return this.http.authedRequest(\n            Method.Patch,\n            utils.encodeUri(\"/profile/$userId\", { $userId: userId }),\n            {},\n            profile,\n            {\n                prefix: await this.getExtendedProfileRequestPrefix(),\n            },\n        );\n    }\n\n    /**\n     * Set multiple properties on your *extended* profile. This will completely\n     * replace the existing profile, removing any unspecified keys.\n     *\n     * @see https://github.com/tcpipuk/matrix-spec-proposals/blob/main/proposals/4133-extended-profiles.md\n     * @param profile The profile object to set.\n     *\n     * @throws An error if the server does not support MSC4133 OR the server disallows editing the user profile.\n     */\n    public async setExtendedProfile(profile: Record<string, unknown>): Promise<void> {\n        if (!(await this.doesServerSupportExtendedProfiles())) {\n            throw new Error(\"Server does not support extended profiles\");\n        }\n        const userId = this.getUserId();\n\n        await this.http.authedRequest(\n            Method.Put,\n            utils.encodeUri(\"/profile/$userId\", { $userId: userId }),\n            {},\n            profile,\n            {\n                prefix: await this.getExtendedProfileRequestPrefix(),\n            },\n        );\n    }\n\n    /**\n     * @returns Promise which resolves to a list of the user's threepids.\n     * @returns Rejects: with an error response.\n     */\n    public getThreePids(): Promise<{ threepids: IThreepid[] }> {\n        return this.http.authedRequest(Method.Get, \"/account/3pid\");\n    }\n\n    /**\n     * Add a 3PID to your homeserver account. This API does not use an identity\n     * server, as the homeserver is expected to handle 3PID ownership validation.\n     *\n     * @param data - A object with 3PID validation data from having called\n     * `account/3pid/<medium>/requestToken` on the homeserver.\n     * @returns Promise which resolves: to an empty object `{}`\n     * @returns Rejects: with an error response.\n     */\n    public async addThreePidOnly(data: IAddThreePidOnlyBody): Promise<EmptyObject> {\n        const path = \"/account/3pid/add\";\n        return this.http.authedRequest(Method.Post, path, undefined, data);\n    }\n\n    /**\n     * Bind a 3PID for discovery onto an identity server via the homeserver. The\n     * identity server handles 3PID ownership validation and the homeserver records\n     * the new binding to track where all 3PIDs for the account are bound.\n     *\n     * @param data - A object with 3PID validation data from having called\n     * `validate/<medium>/requestToken` on the identity server. It should also\n     * contain `id_server` and `id_access_token` fields as well.\n     * @returns Promise which resolves: to an empty object `{}`\n     * @returns Rejects: with an error response.\n     */\n    public async bindThreePid(data: IBindThreePidBody): Promise<EmptyObject> {\n        const path = \"/account/3pid/bind\";\n        return this.http.authedRequest(Method.Post, path, undefined, data);\n    }\n\n    /**\n     * Unbind a 3PID for discovery on an identity server via the homeserver. The\n     * homeserver removes its record of the binding to keep an updated record of\n     * where all 3PIDs for the account are bound.\n     *\n     * @param medium - The threepid medium (eg. 'email')\n     * @param address - The threepid address (eg. 'bob\\@example.com')\n     *        this must be as returned by getThreePids.\n     * @returns Promise which resolves: on success\n     * @returns Rejects: with an error response.\n     */\n    public async unbindThreePid(\n        medium: string,\n        address: string,\n        // eslint-disable-next-line camelcase\n    ): Promise<{ id_server_unbind_result: IdServerUnbindResult }> {\n        const path = \"/account/3pid/unbind\";\n        const data = {\n            medium,\n            address,\n            id_server: this.getIdentityServerUrl(true),\n        };\n        return this.http.authedRequest(Method.Post, path, undefined, data);\n    }\n\n    /**\n     * @param medium - The threepid medium (eg. 'email')\n     * @param address - The threepid address (eg. 'bob\\@example.com')\n     *        this must be as returned by getThreePids.\n     * @returns Promise which resolves: The server response on success\n     *     (generally the empty JSON object)\n     * @returns Rejects: with an error response.\n     */\n    public deleteThreePid(\n        medium: string,\n        address: string,\n        // eslint-disable-next-line camelcase\n    ): Promise<{ id_server_unbind_result: IdServerUnbindResult }> {\n        const path = \"/account/3pid/delete\";\n        return this.http.authedRequest(Method.Post, path, undefined, { medium, address });\n    }\n\n    /**\n     * Make a request to change your password.\n     * @param newPassword - The new desired password.\n     * @param logoutDevices - Should all sessions be logged out after the password change. Defaults to true.\n     * @returns Promise which resolves: to an empty object `{}`\n     * @returns Rejects: with an error response.\n     */\n    public setPassword(authDict: AuthDict, newPassword: string, logoutDevices?: boolean): Promise<EmptyObject> {\n        const path = \"/account/password\";\n        const data = {\n            auth: authDict,\n            new_password: newPassword,\n            logout_devices: logoutDevices,\n        };\n\n        return this.http.authedRequest<EmptyObject>(Method.Post, path, undefined, data);\n    }\n\n    /**\n     * Gets all devices recorded for the logged-in user\n     * @returns Promise which resolves: result object\n     * @returns Rejects: with an error response.\n     */\n    public getDevices(): Promise<{ devices: IMyDevice[] }> {\n        return this.http.authedRequest(Method.Get, \"/devices\");\n    }\n\n    /**\n     * Gets specific device details for the logged-in user\n     * @param deviceId -  device to query\n     * @returns Promise which resolves: result object\n     * @returns Rejects: with an error response.\n     */\n    public getDevice(deviceId: string): Promise<IMyDevice> {\n        const path = utils.encodeUri(\"/devices/$device_id\", {\n            $device_id: deviceId,\n        });\n        return this.http.authedRequest(Method.Get, path);\n    }\n\n    /**\n     * Update the given device\n     *\n     * @param deviceId -  device to update\n     * @param body -       body of request\n     * @returns Promise which resolves: to an empty object `{}`\n     * @returns Rejects: with an error response.\n     */\n    // eslint-disable-next-line camelcase\n    public setDeviceDetails(deviceId: string, body: { display_name: string }): Promise<EmptyObject> {\n        const path = utils.encodeUri(\"/devices/$device_id\", {\n            $device_id: deviceId,\n        });\n\n        return this.http.authedRequest(Method.Put, path, undefined, body);\n    }\n\n    /**\n     * Delete the given device\n     *\n     * @param deviceId -  device to delete\n     * @param auth - Optional. Auth data to supply for User-Interactive auth.\n     * @returns Promise which resolves: result object\n     * @returns Rejects: with an error response.\n     */\n    public deleteDevice(deviceId: string, auth?: AuthDict): Promise<EmptyObject> {\n        const path = utils.encodeUri(\"/devices/$device_id\", {\n            $device_id: deviceId,\n        });\n\n        const body: Body = {};\n\n        if (auth) {\n            body.auth = auth;\n        }\n\n        return this.http.authedRequest(Method.Delete, path, undefined, body);\n    }\n\n    /**\n     * Delete multiple device\n     *\n     * @param devices - IDs of the devices to delete\n     * @param auth - Optional. Auth data to supply for User-Interactive auth.\n     * @returns Promise which resolves: result object\n     * @returns Rejects: with an error response.\n     */\n    public deleteMultipleDevices(devices: string[], auth?: AuthDict): Promise<EmptyObject> {\n        const body: Body = { devices };\n\n        if (auth) {\n            body.auth = auth;\n        }\n\n        const path = \"/delete_devices\";\n        return this.http.authedRequest(Method.Post, path, undefined, body);\n    }\n\n    /**\n     * Gets all pushers registered for the logged-in user\n     *\n     * @returns Promise which resolves: Array of objects representing pushers\n     * @returns Rejects: with an error response.\n     */\n    public async getPushers(): Promise<{ pushers: IPusher[] }> {\n        const response = await this.http.authedRequest<{ pushers: IPusher[] }>(Method.Get, \"/pushers\");\n\n        // Migration path for clients that connect to a homeserver that does not support\n        // MSC3881 yet, see https://github.com/matrix-org/matrix-spec-proposals/blob/kerry/remote-push-toggle/proposals/3881-remote-push-notification-toggling.md#migration\n        if (!(await this.doesServerSupportUnstableFeature(\"org.matrix.msc3881\"))) {\n            response.pushers = response.pushers.map((pusher) => {\n                if (!pusher.hasOwnProperty(PUSHER_ENABLED.name)) {\n                    pusher[PUSHER_ENABLED.name] = true;\n                }\n                return pusher;\n            });\n        }\n\n        return response;\n    }\n\n    /**\n     * Adds a new pusher or updates an existing pusher\n     *\n     * @param pusher - Object representing a pusher\n     * @returns Promise which resolves: Empty json object on success\n     * @returns Rejects: with an error response.\n     */\n    public setPusher(pusher: IPusherRequest): Promise<EmptyObject> {\n        const path = \"/pushers/set\";\n        return this.http.authedRequest(Method.Post, path, undefined, pusher);\n    }\n\n    /**\n     * Removes an existing pusher\n     * @param pushKey - pushkey of pusher to remove\n     * @param appId - app_id of pusher to remove\n     * @returns Promise which resolves: Empty json object on success\n     * @returns Rejects: with an error response.\n     */\n    public removePusher(pushKey: string, appId: string): Promise<EmptyObject> {\n        const path = \"/pushers/set\";\n        const body = {\n            pushkey: pushKey,\n            app_id: appId,\n            kind: null, // marks pusher for removal\n        };\n        return this.http.authedRequest(Method.Post, path, undefined, body);\n    }\n\n    /**\n     * Persists local notification settings\n     * @returns Promise which resolves: an empty object\n     * @returns Rejects: with an error response.\n     */\n    public setLocalNotificationSettings(\n        deviceId: string,\n        notificationSettings: LocalNotificationSettings,\n    ): Promise<EmptyObject> {\n        const key = `${LOCAL_NOTIFICATION_SETTINGS_PREFIX.name}.${deviceId}` as const;\n        return this.setAccountData(key, notificationSettings);\n    }\n\n    /**\n     * Get the push rules for the account from the server.\n     * @returns Promise which resolves to the push rules.\n     * @returns Rejects: with an error response.\n     */\n    public getPushRules(): Promise<IPushRules> {\n        return this.http.authedRequest<IPushRules>(Method.Get, \"/pushrules/\").then((rules: IPushRules) => {\n            this.setPushRules(rules);\n            return this.pushRules!;\n        });\n    }\n\n    /**\n     * Update the push rules for the account. This should be called whenever\n     * updated push rules are available.\n     */\n    public setPushRules(rules: IPushRules): void {\n        // Fix-up defaults, if applicable.\n        this.pushRules = PushProcessor.rewriteDefaultRules(this.logger, rules, this.getUserId()!);\n        // Pre-calculate any necessary caches.\n        this.pushProcessor.updateCachedPushRuleKeys(this.pushRules);\n    }\n\n    /**\n     * @returns Promise which resolves: an empty object `{}`\n     * @returns Rejects: with an error response.\n     */\n    public addPushRule(\n        scope: string,\n        kind: PushRuleKind,\n        ruleId: Exclude<string, RuleId>,\n        body: Pick<IPushRule, \"actions\" | \"conditions\" | \"pattern\">,\n    ): Promise<EmptyObject> {\n        // NB. Scope not uri encoded because devices need the '/'\n        const path = utils.encodeUri(\"/pushrules/\" + scope + \"/$kind/$ruleId\", {\n            $kind: kind,\n            $ruleId: ruleId,\n        });\n        return this.http.authedRequest(Method.Put, path, undefined, body);\n    }\n\n    /**\n     * @returns Promise which resolves: an empty object `{}`\n     * @returns Rejects: with an error response.\n     */\n    public deletePushRule(scope: string, kind: PushRuleKind, ruleId: Exclude<string, RuleId>): Promise<EmptyObject> {\n        // NB. Scope not uri encoded because devices need the '/'\n        const path = utils.encodeUri(\"/pushrules/\" + scope + \"/$kind/$ruleId\", {\n            $kind: kind,\n            $ruleId: ruleId,\n        });\n        return this.http.authedRequest(Method.Delete, path);\n    }\n\n    /**\n     * Enable or disable a push notification rule.\n     * @returns Promise which resolves: to an empty object `{}`\n     * @returns Rejects: with an error response.\n     */\n    public setPushRuleEnabled(\n        scope: string,\n        kind: PushRuleKind,\n        ruleId: RuleId | string,\n        enabled: boolean,\n    ): Promise<EmptyObject> {\n        const path = utils.encodeUri(\"/pushrules/\" + scope + \"/$kind/$ruleId/enabled\", {\n            $kind: kind,\n            $ruleId: ruleId,\n        });\n        return this.http.authedRequest(Method.Put, path, undefined, { enabled: enabled });\n    }\n\n    /**\n     * Set the actions for a push notification rule.\n     * @returns Promise which resolves: to an empty object `{}`\n     * @returns Rejects: with an error response.\n     */\n    public setPushRuleActions(\n        scope: string,\n        kind: PushRuleKind,\n        ruleId: RuleId | string,\n        actions: PushRuleAction[],\n    ): Promise<EmptyObject> {\n        const path = utils.encodeUri(\"/pushrules/\" + scope + \"/$kind/$ruleId/actions\", {\n            $kind: kind,\n            $ruleId: ruleId,\n        });\n        return this.http.authedRequest(Method.Put, path, undefined, { actions: actions });\n    }\n\n    /**\n     * Perform a server-side search.\n     * @param params\n     * @param params.next_batch - the batch token to pass in the query string\n     * @param params.body - the JSON object to pass to the request body.\n     * @param abortSignal - optional signal used to cancel the http request.\n     * @returns Promise which resolves to the search response object.\n     * @returns Rejects: with an error response.\n     */\n    public search(\n        { body, next_batch: nextBatch }: { body: ISearchRequestBody; next_batch?: string },\n        abortSignal?: AbortSignal,\n    ): Promise<ISearchResponse> {\n        const queryParams: QueryDict = {};\n        if (nextBatch) {\n            queryParams.next_batch = nextBatch;\n        }\n        return this.http.authedRequest(Method.Post, \"/search\", queryParams, body, { abortSignal });\n    }\n\n    /**\n     * Upload keys\n     *\n     * @param content -  body of upload request\n     *\n     * @param opts - this method no longer takes any opts,\n     *  used to take opts.device_id but this was not removed from the spec as a redundant parameter\n     *\n     * @returns Promise which resolves: result object. Rejects: with\n     *     an error response ({@link MatrixError}).\n     */\n    public uploadKeysRequest(content: IUploadKeysRequest, opts?: void): Promise<IKeysUploadResponse> {\n        return this.http.authedRequest(Method.Post, \"/keys/upload\", undefined, content);\n    }\n\n    public uploadKeySignatures(content: KeySignatures): Promise<IUploadKeySignaturesResponse> {\n        return this.http.authedRequest(Method.Post, \"/keys/signatures/upload\", undefined, content);\n    }\n\n    /**\n     * Download device keys\n     *\n     * @param userIds -  list of users to get keys for\n     *\n     * @param token - sync token to pass in the query request, to help\n     *   the HS give the most recent results\n     *\n     * @returns Promise which resolves: result object. Rejects: with\n     *     an error response ({@link MatrixError}).\n     */\n    public downloadKeysForUsers(userIds: string[], { token }: { token?: string } = {}): Promise<IDownloadKeyResult> {\n        const content: IQueryKeysRequest = {\n            device_keys: {},\n        };\n        if (token !== undefined) {\n            content.token = token;\n        }\n        userIds.forEach((u) => {\n            content.device_keys[u] = [];\n        });\n\n        return this.http.authedRequest(Method.Post, \"/keys/query\", undefined, content);\n    }\n\n    /**\n     * Claim one-time keys\n     *\n     * @param devices -  a list of [userId, deviceId] pairs\n     *\n     * @param keyAlgorithm -  desired key type\n     *\n     * @param timeout - the time (in milliseconds) to wait for keys from remote\n     *     servers\n     *\n     * @returns Promise which resolves: result object. Rejects: with\n     *     an error response ({@link MatrixError}).\n     */\n    public claimOneTimeKeys(\n        devices: [string, string][],\n        keyAlgorithm = \"signed_curve25519\",\n        timeout?: number,\n    ): Promise<IClaimOTKsResult> {\n        const queries: Record<string, Record<string, string>> = {};\n\n        if (keyAlgorithm === undefined) {\n            keyAlgorithm = \"signed_curve25519\";\n        }\n\n        for (const [userId, deviceId] of devices) {\n            const query = queries[userId] || {};\n            safeSet(queries, userId, query);\n            safeSet(query, deviceId, keyAlgorithm);\n        }\n        const content: IClaimKeysRequest = { one_time_keys: queries };\n        if (timeout) {\n            content.timeout = timeout;\n        }\n        const path = \"/keys/claim\";\n        return this.http.authedRequest(Method.Post, path, undefined, content);\n    }\n\n    /**\n     * Ask the server for a list of users who have changed their device lists\n     * between a pair of sync tokens\n     *\n     *\n     * @returns Promise which resolves: result object. Rejects: with\n     *     an error response ({@link MatrixError}).\n     */\n    public getKeyChanges(oldToken: string, newToken: string): Promise<{ changed: string[]; left: string[] }> {\n        const qps = {\n            from: oldToken,\n            to: newToken,\n        };\n\n        return this.http.authedRequest(Method.Get, \"/keys/changes\", qps);\n    }\n\n    public uploadDeviceSigningKeys(auth?: AuthDict, keys?: CrossSigningKeys): Promise<EmptyObject> {\n        // API returns empty object\n        const data = Object.assign({}, keys);\n        if (auth) Object.assign(data, { auth });\n        return this.http.authedRequest(Method.Post, \"/keys/device_signing/upload\", undefined, data, {\n            prefix: ClientPrefix.Unstable,\n        });\n    }\n\n    /**\n     * Register with an identity server using the OpenID token from the user's\n     * Homeserver, which can be retrieved via\n     * {@link MatrixClient#getOpenIdToken}.\n     *\n     * Note that the `/account/register` endpoint (as well as IS authentication in\n     * general) was added as part of the v2 API version.\n     *\n     * @returns Promise which resolves: with object containing an Identity\n     * Server access token.\n     * @returns Rejects: with an error response.\n     */\n    public registerWithIdentityServer(hsOpenIdToken: IOpenIDToken): Promise<{\n        access_token: string;\n        token: string;\n    }> {\n        if (!this.idBaseUrl) {\n            throw new Error(\"No identity server base URL set\");\n        }\n\n        const uri = this.http.getUrl(\"/account/register\", undefined, IdentityPrefix.V2, this.idBaseUrl);\n        return this.http.requestOtherUrl(Method.Post, uri, hsOpenIdToken);\n    }\n\n    /**\n     * Requests an email verification token directly from an identity server.\n     *\n     * This API is used as part of binding an email for discovery on an identity\n     * server. The validation data that results should be passed to the\n     * `bindThreePid` method to complete the binding process.\n     *\n     * @param email - The email address to request a token for\n     * @param clientSecret - A secret binary string generated by the client.\n     *                 It is recommended this be around 16 ASCII characters.\n     * @param sendAttempt - If an identity server sees a duplicate request\n     *                 with the same sendAttempt, it will not send another email.\n     *                 To request another email to be sent, use a larger value for\n     *                 the sendAttempt param as was used in the previous request.\n     * @param nextLink - Optional If specified, the client will be redirected\n     *                 to this link after validation.\n     * @param identityAccessToken - The `access_token` field of the identity\n     * server `/account/register` response (see {@link registerWithIdentityServer}).\n     *\n     * @returns Promise which resolves: TODO\n     * @returns Rejects: with an error response.\n     * @throws Error if no identity server is set\n     */\n    public requestEmailToken(\n        email: string,\n        clientSecret: string,\n        sendAttempt: number,\n        nextLink?: string,\n        identityAccessToken?: string,\n    ): Promise<IRequestTokenResponse> {\n        const params: Record<string, string> = {\n            client_secret: clientSecret,\n            email: email,\n            send_attempt: sendAttempt?.toString(),\n        };\n        if (nextLink) {\n            params.next_link = nextLink;\n        }\n\n        return this.http.idServerRequest<IRequestTokenResponse>(\n            Method.Post,\n            \"/validate/email/requestToken\",\n            params,\n            IdentityPrefix.V2,\n            identityAccessToken,\n        );\n    }\n\n    /**\n     * Requests a MSISDN verification token directly from an identity server.\n     *\n     * This API is used as part of binding a MSISDN for discovery on an identity\n     * server. The validation data that results should be passed to the\n     * `bindThreePid` method to complete the binding process.\n     *\n     * @param phoneCountry - The ISO 3166-1 alpha-2 code for the country in\n     *                 which phoneNumber should be parsed relative to.\n     * @param phoneNumber - The phone number, in national or international\n     *                 format\n     * @param clientSecret - A secret binary string generated by the client.\n     *                 It is recommended this be around 16 ASCII characters.\n     * @param sendAttempt - If an identity server sees a duplicate request\n     *                 with the same sendAttempt, it will not send another SMS.\n     *                 To request another SMS to be sent, use a larger value for\n     *                 the sendAttempt param as was used in the previous request.\n     * @param nextLink - Optional If specified, the client will be redirected\n     *                 to this link after validation.\n     * @param identityAccessToken - The `access_token` field of the Identity\n     * Server `/account/register` response (see {@link registerWithIdentityServer}).\n     *\n     * @returns Promise which resolves to an object with a sid string\n     * @returns Rejects: with an error response.\n     * @throws Error if no identity server is set\n     */\n    public requestMsisdnToken(\n        phoneCountry: string,\n        phoneNumber: string,\n        clientSecret: string,\n        sendAttempt: number,\n        nextLink?: string,\n        identityAccessToken?: string,\n    ): Promise<IRequestMsisdnTokenResponse> {\n        const params: Record<string, string> = {\n            client_secret: clientSecret,\n            country: phoneCountry,\n            phone_number: phoneNumber,\n            send_attempt: sendAttempt?.toString(),\n        };\n        if (nextLink) {\n            params.next_link = nextLink;\n        }\n\n        return this.http.idServerRequest<IRequestMsisdnTokenResponse>(\n            Method.Post,\n            \"/validate/msisdn/requestToken\",\n            params,\n            IdentityPrefix.V2,\n            identityAccessToken,\n        );\n    }\n\n    /**\n     * Submits a MSISDN token to the identity server\n     *\n     * This is used when submitting the code sent by SMS to a phone number.\n     * The identity server has an equivalent API for email but the js-sdk does\n     * not expose this, since email is normally validated by the user clicking\n     * a link rather than entering a code.\n     *\n     * @param sid - The sid given in the response to requestToken\n     * @param clientSecret - A secret binary string generated by the client.\n     *                 This must be the same value submitted in the requestToken call.\n     * @param msisdnToken - The MSISDN token, as entered by the user.\n     * @param identityAccessToken - The `access_token` field of the Identity\n     * Server `/account/register` response (see {@link registerWithIdentityServer}).\n     * Some legacy identity servers had no authentication here.\n     *\n     * @returns Promise which resolves: Object, containing success boolean.\n     * @returns Rejects: with an error response.\n     * @throws Error if No identity server is set\n     */\n    public submitMsisdnToken(\n        sid: string,\n        clientSecret: string,\n        msisdnToken: string,\n        identityAccessToken: string | null,\n    ): Promise<{ success: boolean }> {\n        const params = {\n            sid: sid,\n            client_secret: clientSecret,\n            token: msisdnToken,\n        };\n\n        return this.http.idServerRequest(\n            Method.Post,\n            \"/validate/msisdn/submitToken\",\n            params,\n            IdentityPrefix.V2,\n            identityAccessToken ?? undefined,\n        );\n    }\n\n    /**\n     * Submits a MSISDN token to an arbitrary URL.\n     *\n     * This is used when submitting the code sent by SMS to a phone number in the\n     * newer 3PID flow where the homeserver validates 3PID ownership (as part of\n     * `requestAdd3pidMsisdnToken`). The homeserver response may include a\n     * `submit_url` to specify where the token should be sent, and this helper can\n     * be used to pass the token to this URL.\n     *\n     * @param url - The URL to submit the token to\n     * @param sid - The sid given in the response to requestToken\n     * @param clientSecret - A secret binary string generated by the client.\n     *                 This must be the same value submitted in the requestToken call.\n     * @param msisdnToken - The MSISDN token, as entered by the user.\n     *\n     * @returns Promise which resolves: Object, containing success boolean.\n     * @returns Rejects: with an error response.\n     */\n    public submitMsisdnTokenOtherUrl(\n        url: string,\n        sid: string,\n        clientSecret: string,\n        msisdnToken: string,\n    ): Promise<{ success: boolean }> {\n        const params = {\n            sid: sid,\n            client_secret: clientSecret,\n            token: msisdnToken,\n        };\n        return this.http.requestOtherUrl(Method.Post, url, params);\n    }\n\n    /**\n     * Gets the V2 hashing information from the identity server. Primarily useful for\n     * lookups.\n     * @param identityAccessToken - The access token for the identity server.\n     * @returns The hashing information for the identity server.\n     */\n    public getIdentityHashDetails(identityAccessToken: string): Promise<{\n        /**\n         * The algorithms the server supports. Must contain at least sha256.\n         */\n        algorithms: string[];\n        /**\n         * The pepper the client MUST use in hashing identifiers,\n         * and MUST supply to the /lookup endpoint when performing lookups.\n         */\n        lookup_pepper: string;\n    }> {\n        return this.http.idServerRequest(\n            Method.Get,\n            \"/hash_details\",\n            undefined,\n            IdentityPrefix.V2,\n            identityAccessToken,\n        );\n    }\n\n    /**\n     * Performs a hashed lookup of addresses against the identity server. This is\n     * only supported on identity servers which have at least the version 2 API.\n     * @param addressPairs - An array of 2 element arrays.\n     * The first element of each pair is the address, the second is the 3PID medium.\n     * Eg: `[\"email@example.org\", \"email\"]`\n     * @param identityAccessToken - The access token for the identity server.\n     * @returns A collection of address mappings to\n     * found MXIDs. Results where no user could be found will not be listed.\n     */\n    public async identityHashedLookup(\n        addressPairs: [string, string][],\n        identityAccessToken: string,\n    ): Promise<{ address: string; mxid: string }[]> {\n        const params: Record<string, string | string[]> = {\n            // addresses: [\"email@example.org\", \"10005550000\"],\n            // algorithm: \"sha256\",\n            // pepper: \"abc123\"\n        };\n\n        // Get hash information first before trying to do a lookup\n        const hashes = await this.getIdentityHashDetails(identityAccessToken);\n        if (!hashes || !hashes[\"lookup_pepper\"] || !hashes[\"algorithms\"]) {\n            throw new Error(\"Unsupported identity server: bad response\");\n        }\n\n        params[\"pepper\"] = hashes[\"lookup_pepper\"];\n\n        const localMapping: Record<string, string> = {\n            // hashed identifier => plain text address\n            // For use in this function's return format\n        };\n\n        // When picking an algorithm, we pick the hashed over no hashes\n        if (hashes[\"algorithms\"].includes(\"sha256\")) {\n            params[\"addresses\"] = await Promise.all(\n                addressPairs.map(async (p) => {\n                    const addr = p[0].toLowerCase(); // lowercase to get consistent hashes\n                    const med = p[1].toLowerCase();\n                    const hashBuffer = await sha256(`${addr} ${med} ${params[\"pepper\"]}`);\n                    const hashed = encodeUnpaddedBase64Url(hashBuffer);\n\n                    // Map the hash to a known (case-sensitive) address. We use the case\n                    // sensitive version because the caller might be expecting that.\n                    localMapping[hashed] = p[0];\n                    return hashed;\n                }),\n            );\n            params[\"algorithm\"] = \"sha256\";\n        } else if (hashes[\"algorithms\"].includes(\"none\")) {\n            params[\"addresses\"] = addressPairs.map((p) => {\n                const addr = p[0].toLowerCase(); // lowercase to get consistent hashes\n                const med = p[1].toLowerCase();\n                const unhashed = `${addr} ${med}`;\n                // Map the unhashed values to a known (case-sensitive) address. We use\n                // the case-sensitive version because the caller might be expecting that.\n                localMapping[unhashed] = p[0];\n                return unhashed;\n            });\n            params[\"algorithm\"] = \"none\";\n        } else {\n            throw new Error(\"Unsupported identity server: unknown hash algorithm\");\n        }\n\n        const response = await this.http.idServerRequest<{\n            mappings: { [address: string]: string };\n        }>(Method.Post, \"/lookup\", params, IdentityPrefix.V2, identityAccessToken);\n\n        if (!response?.[\"mappings\"]) return []; // no results\n\n        const foundAddresses: { address: string; mxid: string }[] = [];\n        for (const hashed of Object.keys(response[\"mappings\"])) {\n            const mxid = response[\"mappings\"][hashed];\n            const plainAddress = localMapping[hashed];\n            if (!plainAddress) {\n                throw new Error(\"Identity server returned more results than expected\");\n            }\n\n            foundAddresses.push({ address: plainAddress, mxid });\n        }\n        return foundAddresses;\n    }\n\n    /**\n     * Looks up the public Matrix ID mapping for a given 3rd party\n     * identifier from the identity server\n     *\n     * @param medium - The medium of the threepid, eg. 'email'\n     * @param address - The textual address of the threepid\n     * @param identityAccessToken - The `access_token` field of the Identity\n     * Server `/account/register` response (see {@link registerWithIdentityServer}).\n     *\n     * @returns Promise which resolves: A threepid mapping\n     *                                 object or the empty object if no mapping\n     *                                 exists\n     * @returns Rejects: with an error response.\n     */\n    public async lookupThreePid(\n        medium: string,\n        address: string,\n        identityAccessToken: string,\n    ): Promise<\n        | {\n              address: string;\n              medium: string;\n              mxid: string;\n          }\n        | EmptyObject\n    > {\n        // Note: we're using the V2 API by calling this function, but our\n        // function contract requires a V1 response. We therefore have to\n        // convert it manually.\n        const response = await this.identityHashedLookup([[address, medium]], identityAccessToken);\n        const result = response.find((p) => p.address === address);\n        if (!result) {\n            return {};\n        }\n\n        const mapping = {\n            address,\n            medium,\n            mxid: result.mxid,\n\n            // We can't reasonably fill these parameters:\n            // not_before\n            // not_after\n            // ts\n            // signatures\n        };\n\n        return mapping;\n    }\n\n    /**\n     * Looks up the public Matrix ID mappings for multiple 3PIDs.\n     *\n     * @param query - Array of arrays containing\n     * [medium, address]\n     * @param identityAccessToken - The `access_token` field of the Identity\n     * Server `/account/register` response (see {@link registerWithIdentityServer}).\n     *\n     * @returns Promise which resolves: Lookup results from IS.\n     * @returns Rejects: with an error response.\n     */\n    public async bulkLookupThreePids(\n        query: [string, string][],\n        identityAccessToken: string,\n    ): Promise<{\n        threepids: [medium: string, address: string, mxid: string][];\n    }> {\n        // Note: we're using the V2 API by calling this function, but our\n        // function contract requires a V1 response. We therefore have to\n        // convert it manually.\n        const response = await this.identityHashedLookup(\n            // We have to reverse the query order to get [address, medium] pairs\n            query.map((p) => [p[1], p[0]]),\n            identityAccessToken,\n        );\n\n        const v1results: [medium: string, address: string, mxid: string][] = [];\n        for (const mapping of response) {\n            const originalQuery = query.find((p) => p[1] === mapping.address);\n            if (!originalQuery) {\n                throw new Error(\"Identity sever returned unexpected results\");\n            }\n\n            v1results.push([\n                originalQuery[0], // medium\n                mapping.address,\n                mapping.mxid,\n            ]);\n        }\n\n        return { threepids: v1results };\n    }\n\n    /**\n     * Get account info from the identity server. This is useful as a neutral check\n     * to verify that other APIs are likely to approve access by testing that the\n     * token is valid, terms have been agreed, etc.\n     *\n     * @param identityAccessToken - The `access_token` field of the Identity\n     * Server `/account/register` response (see {@link registerWithIdentityServer}).\n     *\n     * @returns Promise which resolves: an object with account info.\n     * @returns Rejects: with an error response.\n     */\n    public getIdentityAccount(identityAccessToken: string): Promise<{ user_id: string }> {\n        return this.http.idServerRequest(Method.Get, \"/account\", undefined, IdentityPrefix.V2, identityAccessToken);\n    }\n\n    /**\n     * Send an event to a specific list of devices.\n     * This is a low-level API that simply wraps the HTTP API\n     * call to send to-device messages. We recommend using\n     * queueToDevice() which is a higher level API.\n     *\n     * @param eventType -  type of event to send\n     *    content to send. Map from user_id to device_id to content object.\n     * @param txnId -     transaction id. One will be made up if not\n     *    supplied.\n     * @returns Promise which resolves: to an empty object `{}`\n     */\n    public sendToDevice(eventType: string, contentMap: SendToDeviceContentMap, txnId?: string): Promise<EmptyObject> {\n        const path = utils.encodeUri(\"/sendToDevice/$eventType/$txnId\", {\n            $eventType: eventType,\n            $txnId: txnId ? txnId : this.makeTxnId(),\n        });\n\n        const body = {\n            messages: utils.recursiveMapToObject(contentMap),\n        };\n\n        const targets = new Map<string, string[]>();\n\n        for (const [userId, deviceMessages] of contentMap) {\n            targets.set(userId, Array.from(deviceMessages.keys()));\n        }\n\n        this.logger.debug(`PUT ${path}`, targets);\n\n        return this.http.authedRequest(Method.Put, path, undefined, body);\n    }\n\n    /**\n     * This will encrypt the payload for all devices in the list and will queue it.\n     * The type of the sent to-device message will be `m.room.encrypted`.\n     * @param eventType - The type of event to send\n     * @param devices - The list of devices to send the event to.\n     * @param payload - The payload to send. This will be encrypted.\n     * @returns Promise which resolves once queued there is no error feedback when sending fails.\n     */\n    public async encryptAndSendToDevice(\n        eventType: string,\n        devices: { userId: string; deviceId: string }[],\n        payload: ToDevicePayload,\n    ): Promise<void> {\n        if (!this.cryptoBackend) {\n            throw new Error(\"Cannot encrypt to device event, your client does not support encryption.\");\n        }\n        const batch = await this.cryptoBackend.encryptToDeviceMessages(eventType, devices, payload);\n\n        // TODO The batch mechanism removes all possibility to get error feedbacks..\n        // We might want instead to do the API call directly and pass the errors back.\n        await this.queueToDevice(batch);\n    }\n\n    /**\n     * Sends events directly to specific devices using Matrix's to-device\n     * messaging system. The batch will be split up into appropriately sized\n     * batches for sending and stored in the store so they can be retried\n     * later if they fail to send. Retries will happen automatically.\n     * @param batch - The to-device messages to send\n     */\n    public queueToDevice(batch: ToDeviceBatch): Promise<void> {\n        return this.toDeviceMessageQueue.queueBatch(batch);\n    }\n\n    /**\n     * Get the third party protocols that can be reached using\n     * this HS\n     * @returns Promise which resolves to the result object\n     */\n    public getThirdpartyProtocols(): Promise<{ [protocol: string]: IProtocol }> {\n        return this.http\n            .authedRequest<Record<string, IProtocol>>(Method.Get, \"/thirdparty/protocols\")\n            .then((response) => {\n                // sanity check\n                if (!response || typeof response !== \"object\") {\n                    throw new Error(`/thirdparty/protocols did not return an object: ${response}`);\n                }\n                return response;\n            });\n    }\n\n    /**\n     * Get information on how a specific place on a third party protocol\n     * may be reached.\n     * @param protocol - The protocol given in getThirdpartyProtocols()\n     * @param params - Protocol-specific parameters, as given in the\n     *                        response to getThirdpartyProtocols()\n     * @returns Promise which resolves to the result object\n     */\n    public getThirdpartyLocation(\n        protocol: string,\n        params: { searchFields?: string[] },\n    ): Promise<IThirdPartyLocation[]> {\n        const path = utils.encodeUri(\"/thirdparty/location/$protocol\", {\n            $protocol: protocol,\n        });\n\n        return this.http.authedRequest(Method.Get, path, params);\n    }\n\n    /**\n     * Get information on how a specific user on a third party protocol\n     * may be reached.\n     * @param protocol - The protocol given in getThirdpartyProtocols()\n     * @param params - Protocol-specific parameters, as given in the\n     *                        response to getThirdpartyProtocols()\n     * @returns Promise which resolves to the result object\n     */\n    public getThirdpartyUser(protocol: string, params?: QueryDict): Promise<IThirdPartyUser[]> {\n        const path = utils.encodeUri(\"/thirdparty/user/$protocol\", {\n            $protocol: protocol,\n        });\n\n        return this.http.authedRequest(Method.Get, path, params);\n    }\n\n    public getTerms(serviceType: SERVICE_TYPES, baseUrl: string): Promise<Terms> {\n        const url = this.termsUrlForService(serviceType, baseUrl);\n        return this.http.requestOtherUrl(Method.Get, url);\n    }\n\n    public agreeToTerms(\n        serviceType: SERVICE_TYPES,\n        baseUrl: string,\n        accessToken: string,\n        termsUrls: string[],\n    ): Promise<EmptyObject> {\n        const url = this.termsUrlForService(serviceType, baseUrl);\n        const headers = {\n            Authorization: \"Bearer \" + accessToken,\n        };\n        return this.http.requestOtherUrl(\n            Method.Post,\n            url,\n            {\n                user_accepts: termsUrls,\n            },\n            { headers },\n        );\n    }\n\n    /**\n     * Reports an event as inappropriate to the server, which may then notify the appropriate people.\n     * @param roomId - The room in which the event being reported is located.\n     * @param eventId - The event to report.\n     * @param score - The score to rate this content as where -100 is most offensive and 0 is inoffensive.\n     * @param reason - The reason the content is being reported. May be blank.\n     * @returns Promise which resolves to an empty object if successful\n     */\n    public reportEvent(roomId: string, eventId: string, score: number, reason: string): Promise<EmptyObject> {\n        const path = utils.encodeUri(\"/rooms/$roomId/report/$eventId\", {\n            $roomId: roomId,\n            $eventId: eventId,\n        });\n\n        return this.http.authedRequest(Method.Post, path, undefined, { score, reason });\n    }\n\n    /**\n     * Reports a room as inappropriate to the server, which may then notify the appropriate people.\n     *\n     * This API was introduced in Matrix v1.13.\n     *\n     * @param roomId - The room being reported.\n     * @param reason - The reason the room is being reported. May be blank.\n     * @returns Promise which resolves to an empty object if successful\n     */\n    public reportRoom(roomId: string, reason: string): Promise<EmptyObject> {\n        const path = utils.encodeUri(\"/rooms/$roomId/report\", {\n            $roomId: roomId,\n        });\n\n        return this.http.authedRequest(Method.Post, path, undefined, { reason });\n    }\n\n    /**\n     * Fetches or paginates a room hierarchy asmatrix-js-sdk/spec/unit/matrix-client.spec.ts defined by MSC2946.\n     * Falls back gracefully to sourcing its data from `getSpaceSummary` if this API is not yet supported by the server.\n     * @param roomId - The ID of the space-room to use as the root of the summary.\n     * @param limit - The maximum number of rooms to return per page.\n     * @param maxDepth - The maximum depth in the tree from the root room to return.\n     * @param suggestedOnly - Whether to only return rooms with suggested=true.\n     * @param fromToken - The opaque token to paginate a previous request.\n     * @returns the response, with next_batch & rooms fields.\n     */\n    public getRoomHierarchy(\n        roomId: string,\n        limit?: number,\n        maxDepth?: number,\n        suggestedOnly = false,\n        fromToken?: string,\n    ): Promise<IRoomHierarchy> {\n        const path = utils.encodeUri(\"/rooms/$roomId/hierarchy\", {\n            $roomId: roomId,\n        });\n\n        const queryParams: QueryDict = {\n            suggested_only: String(suggestedOnly),\n            max_depth: maxDepth?.toString(),\n            from: fromToken,\n            limit: limit?.toString(),\n        };\n\n        return this.http\n            .authedRequest<IRoomHierarchy>(Method.Get, path, queryParams, undefined, {\n                prefix: ClientPrefix.V1,\n            })\n            .catch((e) => {\n                if (e.errcode === \"M_UNRECOGNIZED\") {\n                    // fall back to the prefixed hierarchy API.\n                    return this.http.authedRequest<IRoomHierarchy>(Method.Get, path, queryParams, undefined, {\n                        prefix: \"/_matrix/client/unstable/org.matrix.msc2946\",\n                    });\n                }\n\n                throw e;\n            });\n    }\n\n    /**\n     * Creates a new file tree space with the given name. The client will pick\n     * defaults for how it expects to be able to support the remaining API offered\n     * by the returned class.\n     *\n     * Note that this is UNSTABLE and may have breaking changes without notice.\n     * @param name - The name of the tree space.\n     * @returns Promise which resolves to the created space.\n     */\n    public async unstableCreateFileTree(name: string): Promise<MSC3089TreeSpace> {\n        const { room_id: roomId } = await this.createRoom({\n            name: name,\n            preset: Preset.PrivateChat,\n            power_level_content_override: {\n                ...DEFAULT_TREE_POWER_LEVELS_TEMPLATE,\n                users: {\n                    [this.getUserId()!]: 100,\n                },\n            },\n            creation_content: {\n                [RoomCreateTypeField]: RoomType.Space,\n            },\n            initial_state: [\n                {\n                    type: UNSTABLE_MSC3088_PURPOSE.name,\n                    state_key: UNSTABLE_MSC3089_TREE_SUBTYPE.name,\n                    content: {\n                        [UNSTABLE_MSC3088_ENABLED.name]: true,\n                    },\n                },\n                {\n                    type: EventType.RoomEncryption,\n                    state_key: \"\",\n                    content: {\n                        algorithm: \"m.megolm.v1.aes-sha2\",\n                    },\n                },\n            ],\n        });\n        return new MSC3089TreeSpace(this, roomId);\n    }\n\n    /**\n     * Gets a reference to a tree space, if the room ID given is a tree space. If the room\n     * does not appear to be a tree space then null is returned.\n     *\n     * Note that this is UNSTABLE and may have breaking changes without notice.\n     * @param roomId - The room ID to get a tree space reference for.\n     * @returns The tree space, or null if not a tree space.\n     */\n    public unstableGetFileTreeSpace(roomId: string): MSC3089TreeSpace | null {\n        const room = this.getRoom(roomId);\n        if (room?.getMyMembership() !== KnownMembership.Join) return null;\n\n        const createEvent = room.currentState.getStateEvents(EventType.RoomCreate, \"\");\n        const purposeEvent = room.currentState.getStateEvents(\n            UNSTABLE_MSC3088_PURPOSE.name,\n            UNSTABLE_MSC3089_TREE_SUBTYPE.name,\n        );\n\n        if (!createEvent) throw new Error(\"Expected single room create event\");\n\n        if (!purposeEvent?.getContent()?.[UNSTABLE_MSC3088_ENABLED.name]) return null;\n        if (createEvent.getContent()?.[RoomCreateTypeField] !== RoomType.Space) return null;\n\n        return new MSC3089TreeSpace(this, roomId);\n    }\n\n    /**\n     * Perform a single MSC3575 sliding sync request.\n     * @param req - The request to make.\n     * @param proxyBaseUrl - The base URL for the sliding sync proxy.\n     * @param abortSignal - Optional signal to abort request mid-flight.\n     * @returns The sliding sync response, or a standard error.\n     * @throws on non 2xx status codes with an object with a field \"httpStatus\":number.\n     */\n    public slidingSync(\n        req: MSC3575SlidingSyncRequest,\n        proxyBaseUrl?: string,\n        abortSignal?: AbortSignal,\n    ): Promise<MSC3575SlidingSyncResponse> {\n        const qps: QueryDict = {};\n        if (req.pos) {\n            qps.pos = req.pos;\n            delete req.pos;\n        }\n        if (req.timeout) {\n            qps.timeout = req.timeout;\n            delete req.timeout;\n        }\n        const clientTimeout = req.clientTimeout;\n        delete req.clientTimeout;\n        return this.http.authedRequest<MSC3575SlidingSyncResponse>(Method.Post, \"/sync\", qps, req, {\n            prefix: \"/_matrix/client/unstable/org.matrix.simplified_msc3575\",\n            baseUrl: proxyBaseUrl,\n            localTimeoutMs: clientTimeout,\n            abortSignal,\n        });\n    }\n\n    /**\n     * A helper to determine thread support\n     * @returns a boolean to determine if threads are enabled\n     */\n    public supportsThreads(): boolean {\n        return this.clientOpts?.threadSupport || false;\n    }\n\n    /**\n     * A helper to determine intentional mentions support\n     * @returns a boolean to determine if intentional mentions are enabled on the server\n     * @experimental\n     */\n    public supportsIntentionalMentions(): boolean {\n        return this.canSupport.get(Feature.IntentionalMentions) !== ServerSupport.Unsupported;\n    }\n\n    /**\n     * Fetches the summary of a room as defined by an initial version of MSC3266 and implemented in Synapse\n     * Proposed at https://github.com/matrix-org/matrix-doc/pull/3266\n     * @param roomIdOrAlias - The ID or alias of the room to get the summary of.\n     * @param via - The list of servers which know about the room if only an ID was provided.\n     */\n    public async getRoomSummary(roomIdOrAlias: string, via?: string[]): Promise<RoomSummary> {\n        const paramOpts = {\n            prefix: \"/_matrix/client/unstable/im.nheko.summary\",\n        };\n        try {\n            const path = utils.encodeUri(\"/summary/$roomid\", { $roomid: roomIdOrAlias });\n            return await this.http.authedRequest(Method.Get, path, { via }, undefined, paramOpts);\n        } catch (e) {\n            if (e instanceof MatrixError && e.errcode === \"M_UNRECOGNIZED\") {\n                const path = utils.encodeUri(\"/rooms/$roomid/summary\", { $roomid: roomIdOrAlias });\n                return await this.http.authedRequest(Method.Get, path, { via }, undefined, paramOpts);\n            } else {\n                throw e;\n            }\n        }\n    }\n\n    /**\n     * Processes a list of threaded events and adds them to their respective timelines\n     * @param room - the room the adds the threaded events\n     * @param threadedEvents - an array of the threaded events\n     * @param toStartOfTimeline - the direction in which we want to add the events\n     */\n    public processThreadEvents(room: Room, threadedEvents: MatrixEvent[], toStartOfTimeline: boolean): void {\n        room.processThreadedEvents(threadedEvents, toStartOfTimeline);\n    }\n\n    /**\n     * Processes a list of thread roots and creates a thread model\n     * @param room - the room to create the threads in\n     * @param threadedEvents - an array of thread roots\n     * @param toStartOfTimeline - the direction\n     */\n    public processThreadRoots(room: Room, threadedEvents: MatrixEvent[], toStartOfTimeline: boolean): void {\n        if (!this.supportsThreads()) return;\n        room.processThreadRoots(threadedEvents, toStartOfTimeline);\n    }\n\n    public processBeaconEvents(room?: Room, events?: MatrixEvent[]): void {\n        this.processAggregatedTimelineEvents(room, events);\n    }\n\n    /**\n     * Calls aggregation functions for event types that are aggregated\n     * Polls and location beacons\n     * @param room - room the events belong to\n     * @param events - timeline events to be processed\n     * @returns\n     */\n    public processAggregatedTimelineEvents(room?: Room, events?: MatrixEvent[]): void {\n        if (!events?.length) return;\n        if (!room) return;\n\n        room.currentState.processBeaconEvents(events, this);\n        room.processPollEvents(events);\n    }\n\n    /**\n     * Fetches information about the user for the configured access token.\n     */\n    public async whoami(): Promise<IWhoamiResponse> {\n        return this.http.authedRequest(Method.Get, \"/account/whoami\");\n    }\n\n    /**\n     * Find the event_id closest to the given timestamp in the given direction.\n     * @returns Resolves: A promise of an object containing the event_id and\n     *    origin_server_ts of the closest event to the timestamp in the given direction\n     * @returns Rejects: when the request fails (module:http-api.MatrixError)\n     */\n    public async timestampToEvent(\n        roomId: string,\n        timestamp: number,\n        dir: Direction,\n    ): Promise<TimestampToEventResponse> {\n        const path = utils.encodeUri(\"/rooms/$roomId/timestamp_to_event\", {\n            $roomId: roomId,\n        });\n        const queryParams = {\n            ts: timestamp.toString(),\n            dir: dir,\n        };\n\n        try {\n            return await this.http.authedRequest(Method.Get, path, queryParams, undefined, {\n                prefix: ClientPrefix.V1,\n            });\n        } catch (err) {\n            // Fallback to the prefixed unstable endpoint. Since the stable endpoint is\n            // new, we should also try the unstable endpoint before giving up. We can\n            // remove this fallback request in a year (remove after 2023-11-28).\n            if (\n                (<MatrixError>err).errcode === \"M_UNRECOGNIZED\" &&\n                // XXX: The 400 status code check should be removed in the future\n                // when Synapse is compliant with MSC3743.\n                ((<MatrixError>err).httpStatus === 400 ||\n                    // This the correct standard status code for an unsupported\n                    // endpoint according to MSC3743. Not Found and Method Not Allowed\n                    // both indicate that this endpoint+verb combination is\n                    // not supported.\n                    (<MatrixError>err).httpStatus === 404 ||\n                    (<MatrixError>err).httpStatus === 405)\n            ) {\n                return await this.http.authedRequest(Method.Get, path, queryParams, undefined, {\n                    prefix: \"/_matrix/client/unstable/org.matrix.msc3030\",\n                });\n            }\n\n            throw err;\n        }\n    }\n\n    /**\n     * Discover and validate delegated auth configuration\n     * - delegated auth issuer openid-configuration is reachable\n     * - delegated auth issuer openid-configuration is configured correctly for us\n     * Fetches /auth_metadata falling back to legacy implementation using /auth_issuer followed by\n     * https://oidc-issuer.example.com/.well-known/openid-configuration and other files linked therein.\n     * When successful, validated metadata is returned\n     * @returns validated authentication metadata and optionally signing keys\n     * @throws when delegated auth config is invalid or unreachable\n     * @experimental - part of MSC2965\n     */\n    public async getAuthMetadata(): Promise<OidcClientConfig> {\n        let authMetadata: unknown | undefined;\n        try {\n            authMetadata = await this.http.request<unknown>(Method.Get, \"/auth_metadata\", undefined, undefined, {\n                prefix: ClientPrefix.Unstable + \"/org.matrix.msc2965\",\n            });\n        } catch (e) {\n            if (e instanceof MatrixError && e.errcode === \"M_UNRECOGNIZED\") {\n                // Fall back to older variant of MSC2965\n                const { issuer } = await this.http.request<{\n                    issuer: string;\n                }>(Method.Get, \"/auth_issuer\", undefined, undefined, {\n                    prefix: ClientPrefix.Unstable + \"/org.matrix.msc2965\",\n                });\n                return discoverAndValidateOIDCIssuerWellKnown(issuer);\n            }\n            throw e;\n        }\n\n        return validateAuthMetadataAndKeys(authMetadata);\n    }\n}\n\nfunction getUnstableDelayQueryOpts(delayOpts: SendDelayedEventRequestOpts): QueryDict {\n    return Object.fromEntries(\n        Object.entries(delayOpts).map(([k, v]) => [`${UNSTABLE_MSC4140_DELAYED_EVENTS}.${k}`, v]),\n    );\n}\n\n/**\n * recalculates an accurate notifications count on event decryption.\n * Servers do not have enough knowledge about encrypted events to calculate an\n * accurate notification_count\n */\nexport function fixNotificationCountOnDecryption(cli: MatrixClient, event: MatrixEvent): void {\n    const ourUserId = cli.getUserId();\n    const eventId = event.getId();\n\n    const room = cli.getRoom(event.getRoomId());\n    if (!room || !ourUserId || !eventId) return;\n\n    // Due to threads, we can get relation events (eg. edits & reactions) that never get\n    // added to a timeline and so cannot be found in their own room (their edit / reaction\n    // still applies to the event it needs to, so it doesn't matter too much). However, if\n    // we try to process notification about this event, we'll get very confused because we\n    // won't be able to find the event in the room, so will assume it must be unread, even\n    // if it's actually read. We therefore skip anything that isn't in the room. This isn't\n    // *great*, so if we can fix the homeless events (eg. with MSC4023) then we should probably\n    // remove this workaround.\n    if (!room.findEventById(eventId)) {\n        logger.info(`Decrypted event ${event.getId()} is not in room ${room.roomId}: ignoring`);\n        return;\n    }\n\n    const isThreadEvent = !!event.threadRootId && !event.isThreadRoot;\n\n    let hasReadEvent;\n    if (isThreadEvent) {\n        const thread = room.getThread(event.threadRootId);\n        hasReadEvent = thread\n            ? thread.hasUserReadEvent(ourUserId, eventId)\n            : // If the thread object does not exist in the room yet, we don't\n              // want to calculate notification for this event yet. We have not\n              // restored the read receipts yet and can't accurately calculate\n              // notifications at this stage.\n              //\n              // This issue can likely go away when MSC3874 is implemented\n              true;\n    } else {\n        hasReadEvent = room.hasUserReadEvent(ourUserId, eventId);\n    }\n\n    if (hasReadEvent) {\n        // If the event has been read, ignore it.\n        return;\n    }\n\n    const actions = cli.getPushActionsForEvent(event, true);\n\n    // Ensure the unread counts are kept up to date if the event is encrypted\n    // We also want to make sure that the notification count goes up if we already\n    // have encrypted events to avoid other code from resetting 'highlight' to zero.\n    const newHighlight = !!actions?.tweaks?.highlight;\n\n    if (newHighlight) {\n        // TODO: Handle mentions received while the client is offline\n        // See also https://github.com/vector-im/element-web/issues/9069\n        const newCount = room.getUnreadCountForEventContext(NotificationCountType.Highlight, event) + 1;\n        if (isThreadEvent) {\n            room.setThreadUnreadNotificationCount(event.threadRootId, NotificationCountType.Highlight, newCount);\n        } else {\n            room.setUnreadNotificationCount(NotificationCountType.Highlight, newCount);\n        }\n    }\n\n    // `notify` is used in practice for incrementing the total count\n    const newNotify = !!actions?.notify;\n\n    // The room total count is NEVER incremented by the server for encrypted rooms. We basically ignore\n    // the server here as it's always going to tell us to increment for encrypted events.\n    if (newNotify) {\n        // Total count is used to typically increment a room notification counter, but not loudly highlight it.\n        const newCount = room.getUnreadCountForEventContext(NotificationCountType.Total, event) + 1;\n        if (isThreadEvent) {\n            room.setThreadUnreadNotificationCount(event.threadRootId, NotificationCountType.Total, newCount);\n        } else {\n            room.setUnreadNotificationCount(NotificationCountType.Total, newCount);\n        }\n    }\n}\n\n/**\n * Given an event, figure out the thread ID we should use for it in a receipt.\n *\n * This will either be \"main\", or event.threadRootId. For the thread root, or\n * e.g. reactions to the thread root, this will be main. For events inside the\n * thread, or e.g. reactions to them, this will be event.threadRootId.\n *\n * (Exported for test.)\n */\nexport function threadIdForReceipt(event: MatrixEvent): string {\n    return inMainTimelineForReceipt(event) ? MAIN_ROOM_TIMELINE : event.threadRootId!;\n}\n\n/**\n * a) True for non-threaded messages, thread roots and non-thread relations to thread roots.\n * b) False for messages with thread relations to the thread root.\n * c) False for messages with any kind of relation to a message from case b.\n *\n * Note: true for redactions of messages that are in threads. Redacted messages\n * are not really in threads (because their relations are gone), so if they look\n * like they are in threads, that is a sign of a bug elsewhere. (At time of\n * writing, this bug definitely exists - messages are not moved to another\n * thread when they are redacted.)\n *\n * @returns true if this event is considered to be in the main timeline as far\n *               as receipts are concerned.\n */\nexport function inMainTimelineForReceipt(event: MatrixEvent): boolean {\n    if (!event.threadRootId) {\n        // Not in a thread: then it is in the main timeline\n        return true;\n    }\n\n    if (event.isThreadRoot) {\n        // Thread roots are in the main timeline. Note: the spec is ambiguous (or\n        // wrong) on this - see\n        // https://github.com/matrix-org/matrix-spec-proposals/pull/4037\n        return true;\n    }\n\n    if (!event.isRelation()) {\n        // If it's not related to anything, it can't be related via a chain of\n        // relations to a thread root.\n        //\n        // Note: this is a bug, because how does it have a threadRootId if it is\n        // neither a thread root, nor related to one?\n        logger.warn(`Event is not a relation or a thread root, but still has a threadRootId! id=${event.getId()}`);\n        return true;\n    }\n\n    if (event.isRelation(THREAD_RELATION_TYPE.name)) {\n        // It's a message in a thread - definitely not in the main timeline.\n        return false;\n    }\n\n    const isRelatedToRoot = event.relationEventId === event.threadRootId;\n\n    // If it's related to the thread root (and we already know it's not a thread\n    // relation) then it's in the main timeline. If it's related to something\n    // else, then it's in the thread (because it has a thread ID).\n    return isRelatedToRoot;\n}\n"],"mappings":"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","ignoreList":[]}